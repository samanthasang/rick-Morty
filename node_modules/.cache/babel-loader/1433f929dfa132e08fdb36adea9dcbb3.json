{"ast":null,"code":"import { generate } from '@ant-design/colors';\nimport { getAlphaColor, getSolidColor } from './colorAlgorithm';\nexport var generateColorPalettes = function generateColorPalettes(baseColor) {\n  var colors = generate(baseColor, {\n    theme: 'dark'\n  });\n  return {\n    1: colors[0],\n    2: colors[1],\n    3: colors[2],\n    4: colors[3],\n    5: colors[6],\n    6: colors[5],\n    7: colors[4],\n    8: colors[6],\n    9: colors[5],\n    10: colors[4] // 8: colors[9],\n    // 9: colors[8],\n    // 10: colors[7],\n\n  };\n};\nexport var generateNeutralColorPalettes = function generateNeutralColorPalettes(bgBaseColor, textBaseColor) {\n  var colorBgBase = bgBaseColor || '#000';\n  var colorTextBase = textBaseColor || '#fff';\n  return {\n    colorBgBase: colorBgBase,\n    colorTextBase: colorTextBase,\n    colorText: getAlphaColor(colorTextBase, 0.85),\n    colorTextSecondary: getAlphaColor(colorTextBase, 0.65),\n    colorTextTertiary: getAlphaColor(colorTextBase, 0.45),\n    colorTextQuaternary: getAlphaColor(colorTextBase, 0.25),\n    colorFill: getAlphaColor(colorTextBase, 0.18),\n    colorFillSecondary: getAlphaColor(colorTextBase, 0.12),\n    colorFillTertiary: getAlphaColor(colorTextBase, 0.08),\n    colorFillQuaternary: getAlphaColor(colorTextBase, 0.04),\n    colorBgElevated: getSolidColor(colorBgBase, 12),\n    colorBgContainer: getSolidColor(colorBgBase, 8),\n    colorBgLayout: getSolidColor(colorBgBase, 0),\n    colorBgSpotlight: getSolidColor(colorBgBase, 26),\n    colorBorder: getSolidColor(colorBgBase, 26),\n    colorBorderSecondary: getSolidColor(colorBgBase, 19)\n  };\n};","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/theme/themes/dark/colors.js"],"names":["generate","getAlphaColor","getSolidColor","generateColorPalettes","baseColor","colors","theme","generateNeutralColorPalettes","bgBaseColor","textBaseColor","colorBgBase","colorTextBase","colorText","colorTextSecondary","colorTextTertiary","colorTextQuaternary","colorFill","colorFillSecondary","colorFillTertiary","colorFillQuaternary","colorBgElevated","colorBgContainer","colorBgLayout","colorBgSpotlight","colorBorder","colorBorderSecondary"],"mappings":"AAAA,SAASA,QAAT,QAAyB,oBAAzB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kBAA7C;AACA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,SAAS,EAAI;AAChD,MAAMC,MAAM,GAAGL,QAAQ,CAACI,SAAD,EAAY;AACjCE,IAAAA,KAAK,EAAE;AAD0B,GAAZ,CAAvB;AAGA,SAAO;AACL,OAAGD,MAAM,CAAC,CAAD,CADJ;AAEL,OAAGA,MAAM,CAAC,CAAD,CAFJ;AAGL,OAAGA,MAAM,CAAC,CAAD,CAHJ;AAIL,OAAGA,MAAM,CAAC,CAAD,CAJJ;AAKL,OAAGA,MAAM,CAAC,CAAD,CALJ;AAML,OAAGA,MAAM,CAAC,CAAD,CANJ;AAOL,OAAGA,MAAM,CAAC,CAAD,CAPJ;AAQL,OAAGA,MAAM,CAAC,CAAD,CARJ;AASL,OAAGA,MAAM,CAAC,CAAD,CATJ;AAUL,QAAIA,MAAM,CAAC,CAAD,CAVL,CAWL;AACA;AACA;;AAbK,GAAP;AAeD,CAnBM;AAqBP,OAAO,IAAME,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACC,WAAD,EAAcC,aAAd,EAAgC;AAC1E,MAAMC,WAAW,GAAGF,WAAW,IAAI,MAAnC;AACA,MAAMG,aAAa,GAAGF,aAAa,IAAI,MAAvC;AACA,SAAO;AACLC,IAAAA,WAAW,EAAXA,WADK;AAELC,IAAAA,aAAa,EAAbA,aAFK;AAGLC,IAAAA,SAAS,EAAEX,aAAa,CAACU,aAAD,EAAgB,IAAhB,CAHnB;AAILE,IAAAA,kBAAkB,EAAEZ,aAAa,CAACU,aAAD,EAAgB,IAAhB,CAJ5B;AAKLG,IAAAA,iBAAiB,EAAEb,aAAa,CAACU,aAAD,EAAgB,IAAhB,CAL3B;AAMLI,IAAAA,mBAAmB,EAAEd,aAAa,CAACU,aAAD,EAAgB,IAAhB,CAN7B;AAOLK,IAAAA,SAAS,EAAEf,aAAa,CAACU,aAAD,EAAgB,IAAhB,CAPnB;AAQLM,IAAAA,kBAAkB,EAAEhB,aAAa,CAACU,aAAD,EAAgB,IAAhB,CAR5B;AASLO,IAAAA,iBAAiB,EAAEjB,aAAa,CAACU,aAAD,EAAgB,IAAhB,CAT3B;AAULQ,IAAAA,mBAAmB,EAAElB,aAAa,CAACU,aAAD,EAAgB,IAAhB,CAV7B;AAWLS,IAAAA,eAAe,EAAElB,aAAa,CAACQ,WAAD,EAAc,EAAd,CAXzB;AAYLW,IAAAA,gBAAgB,EAAEnB,aAAa,CAACQ,WAAD,EAAc,CAAd,CAZ1B;AAaLY,IAAAA,aAAa,EAAEpB,aAAa,CAACQ,WAAD,EAAc,CAAd,CAbvB;AAcLa,IAAAA,gBAAgB,EAAErB,aAAa,CAACQ,WAAD,EAAc,EAAd,CAd1B;AAeLc,IAAAA,WAAW,EAAEtB,aAAa,CAACQ,WAAD,EAAc,EAAd,CAfrB;AAgBLe,IAAAA,oBAAoB,EAAEvB,aAAa,CAACQ,WAAD,EAAc,EAAd;AAhB9B,GAAP;AAkBD,CArBM","sourcesContent":["import { generate } from '@ant-design/colors';\nimport { getAlphaColor, getSolidColor } from './colorAlgorithm';\nexport const generateColorPalettes = baseColor => {\n  const colors = generate(baseColor, {\n    theme: 'dark'\n  });\n  return {\n    1: colors[0],\n    2: colors[1],\n    3: colors[2],\n    4: colors[3],\n    5: colors[6],\n    6: colors[5],\n    7: colors[4],\n    8: colors[6],\n    9: colors[5],\n    10: colors[4]\n    // 8: colors[9],\n    // 9: colors[8],\n    // 10: colors[7],\n  };\n};\n\nexport const generateNeutralColorPalettes = (bgBaseColor, textBaseColor) => {\n  const colorBgBase = bgBaseColor || '#000';\n  const colorTextBase = textBaseColor || '#fff';\n  return {\n    colorBgBase,\n    colorTextBase,\n    colorText: getAlphaColor(colorTextBase, 0.85),\n    colorTextSecondary: getAlphaColor(colorTextBase, 0.65),\n    colorTextTertiary: getAlphaColor(colorTextBase, 0.45),\n    colorTextQuaternary: getAlphaColor(colorTextBase, 0.25),\n    colorFill: getAlphaColor(colorTextBase, 0.18),\n    colorFillSecondary: getAlphaColor(colorTextBase, 0.12),\n    colorFillTertiary: getAlphaColor(colorTextBase, 0.08),\n    colorFillQuaternary: getAlphaColor(colorTextBase, 0.04),\n    colorBgElevated: getSolidColor(colorBgBase, 12),\n    colorBgContainer: getSolidColor(colorBgBase, 8),\n    colorBgLayout: getSolidColor(colorBgBase, 0),\n    colorBgSpotlight: getSolidColor(colorBgBase, 26),\n    colorBorder: getSolidColor(colorBgBase, 26),\n    colorBorderSecondary: getSolidColor(colorBgBase, 19)\n  };\n};"]},"metadata":{},"sourceType":"module"}