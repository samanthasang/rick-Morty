{"ast":null,"code":"import _slicedToArray from \"/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { render } from \"rc-util/es/React/render\";\nimport * as React from 'react';\nimport ConfigProvider, { globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useNotification, { useInternalNotification } from './useNotification';\nvar notification = null;\n\nvar act = function act(callback) {\n  return callback();\n};\n\nvar taskQueue = [];\nvar defaultGlobalConfig = {};\n\nfunction getGlobalContext() {\n  var _defaultGlobalConfig = defaultGlobalConfig,\n      globalPrefixCls = _defaultGlobalConfig.prefixCls,\n      globalGetContainer = _defaultGlobalConfig.getContainer,\n      rtl = _defaultGlobalConfig.rtl,\n      maxCount = _defaultGlobalConfig.maxCount,\n      top = _defaultGlobalConfig.top,\n      bottom = _defaultGlobalConfig.bottom;\n  var mergedPrefixCls = globalPrefixCls !== null && globalPrefixCls !== void 0 ? globalPrefixCls : globalConfig().getPrefixCls('notification');\n  var mergedContainer = (globalGetContainer === null || globalGetContainer === void 0 ? void 0 : globalGetContainer()) || document.body;\n  return {\n    prefixCls: mergedPrefixCls,\n    container: mergedContainer,\n    rtl: rtl,\n    maxCount: maxCount,\n    top: top,\n    bottom: bottom\n  };\n}\n\nvar GlobalHolder = /*#__PURE__*/React.forwardRef(function (_, ref) {\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      prefixCls = _React$useState2[0],\n      setPrefixCls = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      container = _React$useState4[0],\n      setContainer = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      maxCount = _React$useState6[0],\n      setMaxCount = _React$useState6[1];\n\n  var _React$useState7 = React.useState(),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      rtl = _React$useState8[0],\n      setRTL = _React$useState8[1];\n\n  var _React$useState9 = React.useState(),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      top = _React$useState10[0],\n      setTop = _React$useState10[1];\n\n  var _React$useState11 = React.useState(),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      bottom = _React$useState12[0],\n      setBottom = _React$useState12[1];\n\n  var _useInternalNotificat = useInternalNotification({\n    prefixCls: prefixCls,\n    getContainer: function getContainer() {\n      return container;\n    },\n    maxCount: maxCount,\n    rtl: rtl,\n    top: top,\n    bottom: bottom\n  }),\n      _useInternalNotificat2 = _slicedToArray(_useInternalNotificat, 2),\n      api = _useInternalNotificat2[0],\n      holder = _useInternalNotificat2[1];\n\n  var global = globalConfig();\n  var rootPrefixCls = global.getRootPrefixCls();\n  var rootIconPrefixCls = global.getIconPrefixCls();\n\n  var sync = function sync() {\n    var _getGlobalContext = getGlobalContext(),\n        nextGlobalPrefixCls = _getGlobalContext.prefixCls,\n        nextGlobalContainer = _getGlobalContext.container,\n        nextGlobalMaxCount = _getGlobalContext.maxCount,\n        nextGlobalRTL = _getGlobalContext.rtl,\n        nextTop = _getGlobalContext.top,\n        nextBottom = _getGlobalContext.bottom;\n\n    setPrefixCls(nextGlobalPrefixCls);\n    setContainer(nextGlobalContainer);\n    setMaxCount(nextGlobalMaxCount);\n    setRTL(nextGlobalRTL);\n    setTop(nextTop);\n    setBottom(nextBottom);\n  };\n\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, function () {\n    var instance = Object.assign({}, api);\n    Object.keys(instance).forEach(function (method) {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance: instance,\n      sync: sync\n    };\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls\n  }, holder);\n});\n\nfunction flushNotice() {\n  if (!notification) {\n    var holderFragment = document.createDocumentFragment();\n    var newNotification = {\n      fragment: holderFragment\n    };\n    notification = newNotification; // Delay render to avoid sync issue\n\n    act(function () {\n      render( /*#__PURE__*/React.createElement(GlobalHolder, {\n        ref: function ref(node) {\n          var _ref = node || {},\n              instance = _ref.instance,\n              sync = _ref.sync;\n\n          Promise.resolve().then(function () {\n            if (!newNotification.instance && instance) {\n              newNotification.instance = instance;\n              newNotification.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  } // Notification not ready\n\n\n  if (!notification.instance) {\n    return;\n  } // >>> Execute task\n\n\n  taskQueue.forEach(function (task) {\n    // eslint-disable-next-line default-case\n    switch (task.type) {\n      case 'open':\n        {\n          act(function () {\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n          });\n          break;\n        }\n\n      case 'destroy':\n        act(function () {\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\n        });\n        break;\n    }\n  }); // Clean up\n\n  taskQueue = [];\n} // ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\n\n\nfunction setNotificationGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config); // Trigger sync for it\n\n  act(function () {\n    var _a;\n\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\n  });\n}\n\nfunction open(config) {\n  // Warning if exist theme\n  if (process.env.NODE_ENV !== 'production') {\n    warnContext('notification');\n  }\n\n  taskQueue.push({\n    type: 'open',\n    config: config\n  });\n  flushNotice();\n}\n\nfunction destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key: key\n  });\n  flushNotice();\n}\n\nvar methods = ['success', 'info', 'warning', 'error'];\nvar baseStaticMethods = {\n  open: open,\n  destroy: destroy,\n  config: setNotificationGlobalConfig,\n  useNotification: useNotification,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nvar staticMethods = baseStaticMethods;\nmethods.forEach(function (type) {\n  staticMethods[type] = function (config) {\n    return open(Object.assign(Object.assign({}, config), {\n      type: type\n    }));\n  };\n}); // ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\n\nvar noop = function noop() {};\n/** @private Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\n\n\nexport var actWrapper = noop;\n\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = function actWrapper(wrapper) {\n    act = wrapper;\n  };\n}\n\nexport default staticMethods;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/notification/index.js"],"names":["render","React","ConfigProvider","globalConfig","warnContext","PurePanel","useNotification","useInternalNotification","notification","act","callback","taskQueue","defaultGlobalConfig","getGlobalContext","globalPrefixCls","prefixCls","globalGetContainer","getContainer","rtl","maxCount","top","bottom","mergedPrefixCls","getPrefixCls","mergedContainer","document","body","container","GlobalHolder","forwardRef","_","ref","useState","setPrefixCls","setContainer","setMaxCount","setRTL","setTop","setBottom","api","holder","global","rootPrefixCls","getRootPrefixCls","rootIconPrefixCls","getIconPrefixCls","sync","nextGlobalPrefixCls","nextGlobalContainer","nextGlobalMaxCount","nextGlobalRTL","nextTop","nextBottom","useEffect","useImperativeHandle","instance","Object","assign","keys","forEach","method","apply","arguments","createElement","iconPrefixCls","flushNotice","holderFragment","createDocumentFragment","newNotification","fragment","node","Promise","resolve","then","task","type","open","config","destroy","key","setNotificationGlobalConfig","_a","call","process","env","NODE_ENV","push","methods","baseStaticMethods","_InternalPanelDoNotUseOrYouWillBeFired","staticMethods","noop","actWrapper","wrapper"],"mappings":"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","sourcesContent":["import { render } from \"rc-util/es/React/render\";\nimport * as React from 'react';\nimport ConfigProvider, { globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useNotification, { useInternalNotification } from './useNotification';\nlet notification = null;\nlet act = callback => callback();\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\nfunction getGlobalContext() {\n  const {\n    prefixCls: globalPrefixCls,\n    getContainer: globalGetContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  } = defaultGlobalConfig;\n  const mergedPrefixCls = globalPrefixCls !== null && globalPrefixCls !== void 0 ? globalPrefixCls : globalConfig().getPrefixCls('notification');\n  const mergedContainer = (globalGetContainer === null || globalGetContainer === void 0 ? void 0 : globalGetContainer()) || document.body;\n  return {\n    prefixCls: mergedPrefixCls,\n    container: mergedContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  };\n}\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((_, ref) => {\n  const [prefixCls, setPrefixCls] = React.useState();\n  const [container, setContainer] = React.useState();\n  const [maxCount, setMaxCount] = React.useState();\n  const [rtl, setRTL] = React.useState();\n  const [top, setTop] = React.useState();\n  const [bottom, setBottom] = React.useState();\n  const [api, holder] = useInternalNotification({\n    prefixCls,\n    getContainer: () => container,\n    maxCount,\n    rtl,\n    top,\n    bottom\n  });\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const sync = () => {\n    const {\n      prefixCls: nextGlobalPrefixCls,\n      container: nextGlobalContainer,\n      maxCount: nextGlobalMaxCount,\n      rtl: nextGlobalRTL,\n      top: nextTop,\n      bottom: nextBottom\n    } = getGlobalContext();\n    setPrefixCls(nextGlobalPrefixCls);\n    setContainer(nextGlobalContainer);\n    setMaxCount(nextGlobalMaxCount);\n    setRTL(nextGlobalRTL);\n    setTop(nextTop);\n    setBottom(nextBottom);\n  };\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls\n  }, holder);\n});\nfunction flushNotice() {\n  if (!notification) {\n    const holderFragment = document.createDocumentFragment();\n    const newNotification = {\n      fragment: holderFragment\n    };\n    notification = newNotification;\n    // Delay render to avoid sync issue\n    act(() => {\n      render( /*#__PURE__*/React.createElement(GlobalHolder, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {};\n          Promise.resolve().then(() => {\n            if (!newNotification.instance && instance) {\n              newNotification.instance = instance;\n              newNotification.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  }\n  // Notification not ready\n  if (!notification.instance) {\n    return;\n  }\n  // >>> Execute task\n  taskQueue.forEach(task => {\n    // eslint-disable-next-line default-case\n    switch (task.type) {\n      case 'open':\n        {\n          act(() => {\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n          });\n          break;\n        }\n      case 'destroy':\n        act(() => {\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\n        });\n        break;\n    }\n  });\n  // Clean up\n  taskQueue = [];\n}\n// ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\nfunction setNotificationGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\n  // Trigger sync for it\n  act(() => {\n    var _a;\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\n  });\n}\nfunction open(config) {\n  // Warning if exist theme\n  if (process.env.NODE_ENV !== 'production') {\n    warnContext('notification');\n  }\n  taskQueue.push({\n    type: 'open',\n    config\n  });\n  flushNotice();\n}\nfunction destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n}\nconst methods = ['success', 'info', 'warning', 'error'];\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setNotificationGlobalConfig,\n  useNotification,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = config => open(Object.assign(Object.assign({}, config), {\n    type\n  }));\n});\n// ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\nconst noop = () => {};\n/** @private Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actWrapper = noop;\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\nexport default staticMethods;"]},"metadata":{},"sourceType":"module"}