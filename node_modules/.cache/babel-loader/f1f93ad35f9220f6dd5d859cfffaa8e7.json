{"ast":null,"code":"import { getArrowOffset } from '../style/placementArrow';\nexport function getOverflowOptions(placement, arrowOffset, arrowWidth, autoAdjustOverflow) {\n  if (autoAdjustOverflow === false) {\n    return {\n      adjustX: false,\n      adjustY: false\n    };\n  }\n\n  var overflow = autoAdjustOverflow && typeof autoAdjustOverflow === 'object' ? autoAdjustOverflow : {};\n  var baseOverflow = {};\n\n  switch (placement) {\n    case 'top':\n    case 'bottom':\n      baseOverflow.shiftX = arrowOffset.dropdownArrowOffset * 2 + arrowWidth;\n      break;\n\n    case 'left':\n    case 'right':\n      baseOverflow.shiftY = arrowOffset.dropdownArrowOffsetVertical * 2 + arrowWidth;\n      break;\n  }\n\n  var mergedOverflow = Object.assign(Object.assign({}, baseOverflow), overflow); // Support auto shift\n\n  if (!mergedOverflow.shiftX) {\n    mergedOverflow.adjustX = true;\n  }\n\n  if (!mergedOverflow.shiftY) {\n    mergedOverflow.adjustY = true;\n  }\n\n  return mergedOverflow;\n}\nvar PlacementAlignMap = {\n  left: {\n    points: ['cr', 'cl']\n  },\n  right: {\n    points: ['cl', 'cr']\n  },\n  top: {\n    points: ['bc', 'tc']\n  },\n  bottom: {\n    points: ['tc', 'bc']\n  },\n  topLeft: {\n    points: ['bl', 'tl']\n  },\n  leftTop: {\n    points: ['tr', 'tl']\n  },\n  topRight: {\n    points: ['br', 'tr']\n  },\n  rightTop: {\n    points: ['tl', 'tr']\n  },\n  bottomRight: {\n    points: ['tr', 'br']\n  },\n  rightBottom: {\n    points: ['bl', 'br']\n  },\n  bottomLeft: {\n    points: ['tl', 'bl']\n  },\n  leftBottom: {\n    points: ['br', 'bl']\n  }\n};\nvar ArrowCenterPlacementAlignMap = {\n  topLeft: {\n    points: ['bl', 'tc']\n  },\n  leftTop: {\n    points: ['tr', 'cl']\n  },\n  topRight: {\n    points: ['br', 'tc']\n  },\n  rightTop: {\n    points: ['tl', 'cr']\n  },\n  bottomRight: {\n    points: ['tr', 'bc']\n  },\n  rightBottom: {\n    points: ['bl', 'cr']\n  },\n  bottomLeft: {\n    points: ['tl', 'bc']\n  },\n  leftBottom: {\n    points: ['br', 'cl']\n  }\n};\nvar DisableAutoArrowList = new Set(['topLeft', 'topRight', 'bottomLeft', 'bottomRight', 'leftTop', 'leftBottom', 'rightTop', 'rightBottom']);\nexport default function getPlacements(config) {\n  var arrowWidth = config.arrowWidth,\n      autoAdjustOverflow = config.autoAdjustOverflow,\n      arrowPointAtCenter = config.arrowPointAtCenter,\n      offset = config.offset,\n      borderRadius = config.borderRadius;\n  var halfArrowWidth = arrowWidth / 2;\n  var placementMap = {};\n  Object.keys(PlacementAlignMap).forEach(function (key) {\n    var template = arrowPointAtCenter && ArrowCenterPlacementAlignMap[key] || PlacementAlignMap[key];\n    var placementInfo = Object.assign(Object.assign({}, template), {\n      offset: [0, 0]\n    });\n    placementMap[key] = placementInfo; // Disable autoArrow since design is fixed position\n\n    if (DisableAutoArrowList.has(key)) {\n      placementInfo.autoArrow = false;\n    } // Static offset\n\n\n    switch (key) {\n      case 'top':\n      case 'topLeft':\n      case 'topRight':\n        placementInfo.offset[1] = -halfArrowWidth - offset;\n        break;\n\n      case 'bottom':\n      case 'bottomLeft':\n      case 'bottomRight':\n        placementInfo.offset[1] = halfArrowWidth + offset;\n        break;\n\n      case 'left':\n      case 'leftTop':\n      case 'leftBottom':\n        placementInfo.offset[0] = -halfArrowWidth - offset;\n        break;\n\n      case 'right':\n      case 'rightTop':\n      case 'rightBottom':\n        placementInfo.offset[0] = halfArrowWidth + offset;\n        break;\n    } // Dynamic offset\n\n\n    var arrowOffset = getArrowOffset({\n      contentRadius: borderRadius,\n      limitVerticalRadius: true\n    });\n\n    if (arrowPointAtCenter) {\n      switch (key) {\n        case 'topLeft':\n        case 'bottomLeft':\n          placementInfo.offset[0] = -arrowOffset.dropdownArrowOffset - halfArrowWidth;\n          break;\n\n        case 'topRight':\n        case 'bottomRight':\n          placementInfo.offset[0] = arrowOffset.dropdownArrowOffset + halfArrowWidth;\n          break;\n\n        case 'leftTop':\n        case 'rightTop':\n          placementInfo.offset[1] = -arrowOffset.dropdownArrowOffset - halfArrowWidth;\n          break;\n\n        case 'leftBottom':\n        case 'rightBottom':\n          placementInfo.offset[1] = arrowOffset.dropdownArrowOffset + halfArrowWidth;\n          break;\n      }\n    } // Overflow\n\n\n    placementInfo.overflow = getOverflowOptions(key, arrowOffset, arrowWidth, autoAdjustOverflow);\n  });\n  return placementMap;\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/_util/placements.js"],"names":["getArrowOffset","getOverflowOptions","placement","arrowOffset","arrowWidth","autoAdjustOverflow","adjustX","adjustY","overflow","baseOverflow","shiftX","dropdownArrowOffset","shiftY","dropdownArrowOffsetVertical","mergedOverflow","Object","assign","PlacementAlignMap","left","points","right","top","bottom","topLeft","leftTop","topRight","rightTop","bottomRight","rightBottom","bottomLeft","leftBottom","ArrowCenterPlacementAlignMap","DisableAutoArrowList","Set","getPlacements","config","arrowPointAtCenter","offset","borderRadius","halfArrowWidth","placementMap","keys","forEach","key","template","placementInfo","has","autoArrow","contentRadius","limitVerticalRadius"],"mappings":"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","sourcesContent":["import { getArrowOffset } from '../style/placementArrow';\nexport function getOverflowOptions(placement, arrowOffset, arrowWidth, autoAdjustOverflow) {\n  if (autoAdjustOverflow === false) {\n    return {\n      adjustX: false,\n      adjustY: false\n    };\n  }\n  const overflow = autoAdjustOverflow && typeof autoAdjustOverflow === 'object' ? autoAdjustOverflow : {};\n  const baseOverflow = {};\n  switch (placement) {\n    case 'top':\n    case 'bottom':\n      baseOverflow.shiftX = arrowOffset.dropdownArrowOffset * 2 + arrowWidth;\n      break;\n    case 'left':\n    case 'right':\n      baseOverflow.shiftY = arrowOffset.dropdownArrowOffsetVertical * 2 + arrowWidth;\n      break;\n  }\n  const mergedOverflow = Object.assign(Object.assign({}, baseOverflow), overflow);\n  // Support auto shift\n  if (!mergedOverflow.shiftX) {\n    mergedOverflow.adjustX = true;\n  }\n  if (!mergedOverflow.shiftY) {\n    mergedOverflow.adjustY = true;\n  }\n  return mergedOverflow;\n}\nconst PlacementAlignMap = {\n  left: {\n    points: ['cr', 'cl']\n  },\n  right: {\n    points: ['cl', 'cr']\n  },\n  top: {\n    points: ['bc', 'tc']\n  },\n  bottom: {\n    points: ['tc', 'bc']\n  },\n  topLeft: {\n    points: ['bl', 'tl']\n  },\n  leftTop: {\n    points: ['tr', 'tl']\n  },\n  topRight: {\n    points: ['br', 'tr']\n  },\n  rightTop: {\n    points: ['tl', 'tr']\n  },\n  bottomRight: {\n    points: ['tr', 'br']\n  },\n  rightBottom: {\n    points: ['bl', 'br']\n  },\n  bottomLeft: {\n    points: ['tl', 'bl']\n  },\n  leftBottom: {\n    points: ['br', 'bl']\n  }\n};\nconst ArrowCenterPlacementAlignMap = {\n  topLeft: {\n    points: ['bl', 'tc']\n  },\n  leftTop: {\n    points: ['tr', 'cl']\n  },\n  topRight: {\n    points: ['br', 'tc']\n  },\n  rightTop: {\n    points: ['tl', 'cr']\n  },\n  bottomRight: {\n    points: ['tr', 'bc']\n  },\n  rightBottom: {\n    points: ['bl', 'cr']\n  },\n  bottomLeft: {\n    points: ['tl', 'bc']\n  },\n  leftBottom: {\n    points: ['br', 'cl']\n  }\n};\nconst DisableAutoArrowList = new Set(['topLeft', 'topRight', 'bottomLeft', 'bottomRight', 'leftTop', 'leftBottom', 'rightTop', 'rightBottom']);\nexport default function getPlacements(config) {\n  const {\n    arrowWidth,\n    autoAdjustOverflow,\n    arrowPointAtCenter,\n    offset,\n    borderRadius\n  } = config;\n  const halfArrowWidth = arrowWidth / 2;\n  const placementMap = {};\n  Object.keys(PlacementAlignMap).forEach(key => {\n    const template = arrowPointAtCenter && ArrowCenterPlacementAlignMap[key] || PlacementAlignMap[key];\n    const placementInfo = Object.assign(Object.assign({}, template), {\n      offset: [0, 0]\n    });\n    placementMap[key] = placementInfo;\n    // Disable autoArrow since design is fixed position\n    if (DisableAutoArrowList.has(key)) {\n      placementInfo.autoArrow = false;\n    }\n    // Static offset\n    switch (key) {\n      case 'top':\n      case 'topLeft':\n      case 'topRight':\n        placementInfo.offset[1] = -halfArrowWidth - offset;\n        break;\n      case 'bottom':\n      case 'bottomLeft':\n      case 'bottomRight':\n        placementInfo.offset[1] = halfArrowWidth + offset;\n        break;\n      case 'left':\n      case 'leftTop':\n      case 'leftBottom':\n        placementInfo.offset[0] = -halfArrowWidth - offset;\n        break;\n      case 'right':\n      case 'rightTop':\n      case 'rightBottom':\n        placementInfo.offset[0] = halfArrowWidth + offset;\n        break;\n    }\n    // Dynamic offset\n    const arrowOffset = getArrowOffset({\n      contentRadius: borderRadius,\n      limitVerticalRadius: true\n    });\n    if (arrowPointAtCenter) {\n      switch (key) {\n        case 'topLeft':\n        case 'bottomLeft':\n          placementInfo.offset[0] = -arrowOffset.dropdownArrowOffset - halfArrowWidth;\n          break;\n        case 'topRight':\n        case 'bottomRight':\n          placementInfo.offset[0] = arrowOffset.dropdownArrowOffset + halfArrowWidth;\n          break;\n        case 'leftTop':\n        case 'rightTop':\n          placementInfo.offset[1] = -arrowOffset.dropdownArrowOffset - halfArrowWidth;\n          break;\n        case 'leftBottom':\n        case 'rightBottom':\n          placementInfo.offset[1] = arrowOffset.dropdownArrowOffset + halfArrowWidth;\n          break;\n      }\n    }\n    // Overflow\n    placementInfo.overflow = getOverflowOptions(key, arrowOffset, arrowWidth, autoAdjustOverflow);\n  });\n  return placementMap;\n}"]},"metadata":{},"sourceType":"module"}