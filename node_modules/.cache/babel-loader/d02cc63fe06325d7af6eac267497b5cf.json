{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport useFlexGapSupport from '../_util/hooks/useFlexGapSupport';\nimport useResponsiveObserver, { responsiveArray } from '../_util/responsiveObserver';\nimport RowContext from './RowContext';\nimport { useRowStyle } from './style';\nconst RowAligns = ['top', 'middle', 'bottom', 'stretch'];\nconst RowJustify = ['start', 'end', 'center', 'space-around', 'space-between', 'space-evenly'];\n\nfunction useMergePropByScreen(oriProp, screen) {\n  const [prop, setProp] = React.useState(typeof oriProp === 'string' ? oriProp : '');\n\n  const calcMergeAlignOrJustify = () => {\n    if (typeof oriProp === 'string') {\n      setProp(oriProp);\n    }\n\n    if (typeof oriProp !== 'object') {\n      return;\n    }\n\n    for (let i = 0; i < responsiveArray.length; i++) {\n      const breakpoint = responsiveArray[i]; // if do not match, do nothing\n\n      if (!screen[breakpoint]) continue;\n      const curVal = oriProp[breakpoint];\n\n      if (curVal !== undefined) {\n        setProp(curVal);\n        return;\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    calcMergeAlignOrJustify();\n  }, [JSON.stringify(oriProp), screen]);\n  return prop;\n}\n\nconst Row = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    prefixCls: customizePrefixCls,\n    justify,\n    align,\n    className,\n    style,\n    children,\n    gutter = 0,\n    wrap\n  } = props,\n        others = __rest(props, [\"prefixCls\", \"justify\", \"align\", \"className\", \"style\", \"children\", \"gutter\", \"wrap\"]);\n\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const [screens, setScreens] = React.useState({\n    xs: true,\n    sm: true,\n    md: true,\n    lg: true,\n    xl: true,\n    xxl: true\n  }); // to save screens info when responsiveObserve callback had been call\n\n  const [curScreens, setCurScreens] = React.useState({\n    xs: false,\n    sm: false,\n    md: false,\n    lg: false,\n    xl: false,\n    xxl: false\n  }); // ================================== calc responsive data ==================================\n\n  const mergeAlign = useMergePropByScreen(align, curScreens);\n  const mergeJustify = useMergePropByScreen(justify, curScreens);\n  const supportFlexGap = useFlexGapSupport();\n  const gutterRef = React.useRef(gutter);\n  const responsiveObserver = useResponsiveObserver(); // ================================== Effect ==================================\n\n  React.useEffect(() => {\n    const token = responsiveObserver.subscribe(screen => {\n      setCurScreens(screen);\n      const currentGutter = gutterRef.current || 0;\n\n      if (!Array.isArray(currentGutter) && typeof currentGutter === 'object' || Array.isArray(currentGutter) && (typeof currentGutter[0] === 'object' || typeof currentGutter[1] === 'object')) {\n        setScreens(screen);\n      }\n    });\n    return () => responsiveObserver.unsubscribe(token);\n  }, []); // ================================== Render ==================================\n\n  const getGutter = () => {\n    const results = [undefined, undefined];\n    const normalizedGutter = Array.isArray(gutter) ? gutter : [gutter, undefined];\n    normalizedGutter.forEach((g, index) => {\n      if (typeof g === 'object') {\n        for (let i = 0; i < responsiveArray.length; i++) {\n          const breakpoint = responsiveArray[i];\n\n          if (screens[breakpoint] && g[breakpoint] !== undefined) {\n            results[index] = g[breakpoint];\n            break;\n          }\n        }\n      } else {\n        results[index] = g;\n      }\n    });\n    return results;\n  };\n\n  const prefixCls = getPrefixCls('row', customizePrefixCls);\n  const [wrapSSR, hashId] = useRowStyle(prefixCls);\n  const gutters = getGutter();\n  const classes = classNames(prefixCls, {\n    [`${prefixCls}-no-wrap`]: wrap === false,\n    [`${prefixCls}-${mergeJustify}`]: mergeJustify,\n    [`${prefixCls}-${mergeAlign}`]: mergeAlign,\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  }, className, hashId); // Add gutter related style\n\n  const rowStyle = {};\n  const horizontalGutter = gutters[0] != null && gutters[0] > 0 ? gutters[0] / -2 : undefined;\n  const verticalGutter = gutters[1] != null && gutters[1] > 0 ? gutters[1] / -2 : undefined;\n\n  if (horizontalGutter) {\n    rowStyle.marginLeft = horizontalGutter;\n    rowStyle.marginRight = horizontalGutter;\n  }\n\n  if (supportFlexGap) {\n    // Set gap direct if flex gap support\n    [, rowStyle.rowGap] = gutters;\n  } else if (verticalGutter) {\n    rowStyle.marginTop = verticalGutter;\n    rowStyle.marginBottom = verticalGutter;\n  } // \"gutters\" is a new array in each rendering phase, it'll make 'React.useMemo' effectless.\n  // So we deconstruct \"gutters\" variable here.\n\n\n  const [gutterH, gutterV] = gutters;\n  const rowContext = React.useMemo(() => ({\n    gutter: [gutterH, gutterV],\n    wrap,\n    supportFlexGap\n  }), [gutterH, gutterV, wrap, supportFlexGap]);\n  return wrapSSR( /*#__PURE__*/React.createElement(RowContext.Provider, {\n    value: rowContext\n  }, /*#__PURE__*/React.createElement(\"div\", Object.assign({}, others, {\n    className: classes,\n    style: Object.assign(Object.assign({}, rowStyle), style),\n    ref: ref\n  }), children)));\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  Row.displayName = 'Row';\n}\n\nexport default Row;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/grid/row.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","classNames","React","ConfigContext","useFlexGapSupport","useResponsiveObserver","responsiveArray","RowContext","useRowStyle","RowAligns","RowJustify","useMergePropByScreen","oriProp","screen","prop","setProp","useState","calcMergeAlignOrJustify","breakpoint","curVal","undefined","useEffect","JSON","stringify","Row","forwardRef","props","ref","prefixCls","customizePrefixCls","justify","align","className","style","children","gutter","wrap","others","getPrefixCls","direction","useContext","screens","setScreens","xs","sm","md","lg","xl","xxl","curScreens","setCurScreens","mergeAlign","mergeJustify","supportFlexGap","gutterRef","useRef","responsiveObserver","token","subscribe","currentGutter","current","Array","isArray","unsubscribe","getGutter","results","normalizedGutter","forEach","g","index","wrapSSR","hashId","gutters","classes","rowStyle","horizontalGutter","verticalGutter","marginLeft","marginRight","rowGap","marginTop","marginBottom","gutterH","gutterV","rowContext","useMemo","createElement","Provider","value","assign","process","env","NODE_ENV","displayName"],"mappings":"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","sourcesContent":["var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport useFlexGapSupport from '../_util/hooks/useFlexGapSupport';\nimport useResponsiveObserver, { responsiveArray } from '../_util/responsiveObserver';\nimport RowContext from './RowContext';\nimport { useRowStyle } from './style';\nconst RowAligns = ['top', 'middle', 'bottom', 'stretch'];\nconst RowJustify = ['start', 'end', 'center', 'space-around', 'space-between', 'space-evenly'];\nfunction useMergePropByScreen(oriProp, screen) {\n  const [prop, setProp] = React.useState(typeof oriProp === 'string' ? oriProp : '');\n  const calcMergeAlignOrJustify = () => {\n    if (typeof oriProp === 'string') {\n      setProp(oriProp);\n    }\n    if (typeof oriProp !== 'object') {\n      return;\n    }\n    for (let i = 0; i < responsiveArray.length; i++) {\n      const breakpoint = responsiveArray[i];\n      // if do not match, do nothing\n      if (!screen[breakpoint]) continue;\n      const curVal = oriProp[breakpoint];\n      if (curVal !== undefined) {\n        setProp(curVal);\n        return;\n      }\n    }\n  };\n  React.useEffect(() => {\n    calcMergeAlignOrJustify();\n  }, [JSON.stringify(oriProp), screen]);\n  return prop;\n}\nconst Row = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n      prefixCls: customizePrefixCls,\n      justify,\n      align,\n      className,\n      style,\n      children,\n      gutter = 0,\n      wrap\n    } = props,\n    others = __rest(props, [\"prefixCls\", \"justify\", \"align\", \"className\", \"style\", \"children\", \"gutter\", \"wrap\"]);\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const [screens, setScreens] = React.useState({\n    xs: true,\n    sm: true,\n    md: true,\n    lg: true,\n    xl: true,\n    xxl: true\n  });\n  // to save screens info when responsiveObserve callback had been call\n  const [curScreens, setCurScreens] = React.useState({\n    xs: false,\n    sm: false,\n    md: false,\n    lg: false,\n    xl: false,\n    xxl: false\n  });\n  // ================================== calc responsive data ==================================\n  const mergeAlign = useMergePropByScreen(align, curScreens);\n  const mergeJustify = useMergePropByScreen(justify, curScreens);\n  const supportFlexGap = useFlexGapSupport();\n  const gutterRef = React.useRef(gutter);\n  const responsiveObserver = useResponsiveObserver();\n  // ================================== Effect ==================================\n  React.useEffect(() => {\n    const token = responsiveObserver.subscribe(screen => {\n      setCurScreens(screen);\n      const currentGutter = gutterRef.current || 0;\n      if (!Array.isArray(currentGutter) && typeof currentGutter === 'object' || Array.isArray(currentGutter) && (typeof currentGutter[0] === 'object' || typeof currentGutter[1] === 'object')) {\n        setScreens(screen);\n      }\n    });\n    return () => responsiveObserver.unsubscribe(token);\n  }, []);\n  // ================================== Render ==================================\n  const getGutter = () => {\n    const results = [undefined, undefined];\n    const normalizedGutter = Array.isArray(gutter) ? gutter : [gutter, undefined];\n    normalizedGutter.forEach((g, index) => {\n      if (typeof g === 'object') {\n        for (let i = 0; i < responsiveArray.length; i++) {\n          const breakpoint = responsiveArray[i];\n          if (screens[breakpoint] && g[breakpoint] !== undefined) {\n            results[index] = g[breakpoint];\n            break;\n          }\n        }\n      } else {\n        results[index] = g;\n      }\n    });\n    return results;\n  };\n  const prefixCls = getPrefixCls('row', customizePrefixCls);\n  const [wrapSSR, hashId] = useRowStyle(prefixCls);\n  const gutters = getGutter();\n  const classes = classNames(prefixCls, {\n    [`${prefixCls}-no-wrap`]: wrap === false,\n    [`${prefixCls}-${mergeJustify}`]: mergeJustify,\n    [`${prefixCls}-${mergeAlign}`]: mergeAlign,\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  }, className, hashId);\n  // Add gutter related style\n  const rowStyle = {};\n  const horizontalGutter = gutters[0] != null && gutters[0] > 0 ? gutters[0] / -2 : undefined;\n  const verticalGutter = gutters[1] != null && gutters[1] > 0 ? gutters[1] / -2 : undefined;\n  if (horizontalGutter) {\n    rowStyle.marginLeft = horizontalGutter;\n    rowStyle.marginRight = horizontalGutter;\n  }\n  if (supportFlexGap) {\n    // Set gap direct if flex gap support\n    [, rowStyle.rowGap] = gutters;\n  } else if (verticalGutter) {\n    rowStyle.marginTop = verticalGutter;\n    rowStyle.marginBottom = verticalGutter;\n  }\n  // \"gutters\" is a new array in each rendering phase, it'll make 'React.useMemo' effectless.\n  // So we deconstruct \"gutters\" variable here.\n  const [gutterH, gutterV] = gutters;\n  const rowContext = React.useMemo(() => ({\n    gutter: [gutterH, gutterV],\n    wrap,\n    supportFlexGap\n  }), [gutterH, gutterV, wrap, supportFlexGap]);\n  return wrapSSR( /*#__PURE__*/React.createElement(RowContext.Provider, {\n    value: rowContext\n  }, /*#__PURE__*/React.createElement(\"div\", Object.assign({}, others, {\n    className: classes,\n    style: Object.assign(Object.assign({}, rowStyle), style),\n    ref: ref\n  }), children)));\n});\nif (process.env.NODE_ENV !== 'production') {\n  Row.displayName = 'Row';\n}\nexport default Row;"]},"metadata":{},"sourceType":"module"}