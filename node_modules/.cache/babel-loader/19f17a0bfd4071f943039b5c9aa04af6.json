{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { useImmutableMark } from '@rc-component/context';\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport isEqual from \"rc-util/es/isEqual\";\nimport getValue from \"rc-util/es/utils/get\";\nimport warning from \"rc-util/es/warning\";\nimport * as React from 'react';\nimport PerfContext from \"../context/PerfContext\";\nimport { validateValue } from \"../utils/valueUtil\";\n\nfunction isRenderCell(data) {\n  return data && _typeof(data) === 'object' && !Array.isArray(data) && ! /*#__PURE__*/React.isValidElement(data);\n}\n\nexport default function useCellRender(record, dataIndex, renderIndex, children, render, shouldCellUpdate) {\n  // TODO: Remove this after next major version\n  var perfRecord = React.useContext(PerfContext);\n  var mark = useImmutableMark(); // ======================== Render ========================\n\n  var retData = useMemo(function () {\n    if (validateValue(children)) {\n      return [children];\n    }\n\n    var path = dataIndex === null || dataIndex === undefined || dataIndex === '' ? [] : Array.isArray(dataIndex) ? dataIndex : [dataIndex];\n    var value = getValue(record, path); // Customize render node\n\n    var returnChildNode = value;\n    var returnCellProps = undefined;\n\n    if (render) {\n      var renderData = render(value, record, renderIndex);\n\n      if (isRenderCell(renderData)) {\n        if (process.env.NODE_ENV !== 'production') {\n          warning(false, '`columns.render` return cell props is deprecated with perf issue, please use `onCell` instead.');\n        }\n\n        returnChildNode = renderData.children;\n        returnCellProps = renderData.props;\n        perfRecord.renderWithProps = true;\n      } else {\n        returnChildNode = renderData;\n      }\n    }\n\n    return [returnChildNode, returnCellProps];\n  }, [// Force update deps\n  mark, // Normal deps\n  record, children, dataIndex, render, renderIndex], function (prev, next) {\n    if (shouldCellUpdate) {\n      var _prev = _slicedToArray(prev, 2),\n          prevRecord = _prev[1];\n\n      var _next = _slicedToArray(next, 2),\n          nextRecord = _next[1];\n\n      return shouldCellUpdate(nextRecord, prevRecord);\n    } // Legacy mode should always update\n\n\n    if (perfRecord.renderWithProps) {\n      return true;\n    }\n\n    return !isEqual(prev, next, true);\n  });\n  return retData;\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/rc-table/es/Cell/useCellRender.js"],"names":["_slicedToArray","_typeof","useImmutableMark","useMemo","isEqual","getValue","warning","React","PerfContext","validateValue","isRenderCell","data","Array","isArray","isValidElement","useCellRender","record","dataIndex","renderIndex","children","render","shouldCellUpdate","perfRecord","useContext","mark","retData","path","undefined","value","returnChildNode","returnCellProps","renderData","process","env","NODE_ENV","props","renderWithProps","prev","next","_prev","prevRecord","_next","nextRecord"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { useImmutableMark } from '@rc-component/context';\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport isEqual from \"rc-util/es/isEqual\";\nimport getValue from \"rc-util/es/utils/get\";\nimport warning from \"rc-util/es/warning\";\nimport * as React from 'react';\nimport PerfContext from \"../context/PerfContext\";\nimport { validateValue } from \"../utils/valueUtil\";\nfunction isRenderCell(data) {\n  return data && _typeof(data) === 'object' && !Array.isArray(data) && ! /*#__PURE__*/React.isValidElement(data);\n}\nexport default function useCellRender(record, dataIndex, renderIndex, children, render, shouldCellUpdate) {\n  // TODO: Remove this after next major version\n  var perfRecord = React.useContext(PerfContext);\n  var mark = useImmutableMark();\n\n  // ======================== Render ========================\n  var retData = useMemo(function () {\n    if (validateValue(children)) {\n      return [children];\n    }\n    var path = dataIndex === null || dataIndex === undefined || dataIndex === '' ? [] : Array.isArray(dataIndex) ? dataIndex : [dataIndex];\n    var value = getValue(record, path);\n\n    // Customize render node\n    var returnChildNode = value;\n    var returnCellProps = undefined;\n    if (render) {\n      var renderData = render(value, record, renderIndex);\n      if (isRenderCell(renderData)) {\n        if (process.env.NODE_ENV !== 'production') {\n          warning(false, '`columns.render` return cell props is deprecated with perf issue, please use `onCell` instead.');\n        }\n        returnChildNode = renderData.children;\n        returnCellProps = renderData.props;\n        perfRecord.renderWithProps = true;\n      } else {\n        returnChildNode = renderData;\n      }\n    }\n    return [returnChildNode, returnCellProps];\n  }, [\n  // Force update deps\n  mark,\n  // Normal deps\n  record, children, dataIndex, render, renderIndex], function (prev, next) {\n    if (shouldCellUpdate) {\n      var _prev = _slicedToArray(prev, 2),\n        prevRecord = _prev[1];\n      var _next = _slicedToArray(next, 2),\n        nextRecord = _next[1];\n      return shouldCellUpdate(nextRecord, prevRecord);\n    }\n\n    // Legacy mode should always update\n    if (perfRecord.renderWithProps) {\n      return true;\n    }\n    return !isEqual(prev, next, true);\n  });\n  return retData;\n}"]},"metadata":{},"sourceType":"module"}