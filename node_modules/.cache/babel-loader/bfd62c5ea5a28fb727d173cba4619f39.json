{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useRef, useCallback } from 'react';\nimport warning from \"rc-util/es/warning\";\nimport { nextSlice } from \"../utils/timeUtil\";\nvar PATH_SPLIT = '__RC_UTIL_PATH_SPLIT__';\n\nvar getPathStr = function getPathStr(keyPath) {\n  return keyPath.join(PATH_SPLIT);\n};\n\nvar getPathKeys = function getPathKeys(keyPathStr) {\n  return keyPathStr.split(PATH_SPLIT);\n};\n\nexport var OVERFLOW_KEY = 'rc-menu-more';\nexport default function useKeyRecords() {\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      internalForceUpdate = _React$useState2[1];\n\n  var key2pathRef = useRef(new Map());\n  var path2keyRef = useRef(new Map());\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      overflowKeys = _React$useState4[0],\n      setOverflowKeys = _React$useState4[1];\n\n  var updateRef = useRef(0);\n  var destroyRef = useRef(false);\n\n  var forceUpdate = function forceUpdate() {\n    if (!destroyRef.current) {\n      internalForceUpdate({});\n    }\n  };\n\n  var registerPath = useCallback(function (key, keyPath) {\n    // Warning for invalidate or duplicated `key`\n    if (process.env.NODE_ENV !== 'production') {\n      warning(!key2pathRef.current.has(key), \"Duplicated key '\".concat(key, \"' used in Menu by path [\").concat(keyPath.join(' > '), \"]\"));\n    } // Fill map\n\n\n    var connectedPath = getPathStr(keyPath);\n    path2keyRef.current.set(connectedPath, key);\n    key2pathRef.current.set(key, connectedPath);\n    updateRef.current += 1;\n    var id = updateRef.current;\n    nextSlice(function () {\n      if (id === updateRef.current) {\n        forceUpdate();\n      }\n    });\n  }, []);\n  var unregisterPath = useCallback(function (key, keyPath) {\n    var connectedPath = getPathStr(keyPath);\n    path2keyRef.current.delete(connectedPath);\n    key2pathRef.current.delete(key);\n  }, []);\n  var refreshOverflowKeys = useCallback(function (keys) {\n    setOverflowKeys(keys);\n  }, []);\n  var getKeyPath = useCallback(function (eventKey, includeOverflow) {\n    var fullPath = key2pathRef.current.get(eventKey) || '';\n    var keys = getPathKeys(fullPath);\n\n    if (includeOverflow && overflowKeys.includes(keys[0])) {\n      keys.unshift(OVERFLOW_KEY);\n    }\n\n    return keys;\n  }, [overflowKeys]);\n  var isSubPathKey = useCallback(function (pathKeys, eventKey) {\n    return pathKeys.some(function (pathKey) {\n      var pathKeyList = getKeyPath(pathKey, true);\n      return pathKeyList.includes(eventKey);\n    });\n  }, [getKeyPath]);\n\n  var getKeys = function getKeys() {\n    var keys = _toConsumableArray(key2pathRef.current.keys());\n\n    if (overflowKeys.length) {\n      keys.push(OVERFLOW_KEY);\n    }\n\n    return keys;\n  };\n  /**\n   * Find current key related child path keys\n   */\n\n\n  var getSubPathKeys = useCallback(function (key) {\n    var connectedPath = \"\".concat(key2pathRef.current.get(key)).concat(PATH_SPLIT);\n    var pathKeys = new Set();\n\n    _toConsumableArray(path2keyRef.current.keys()).forEach(function (pathKey) {\n      if (pathKey.startsWith(connectedPath)) {\n        pathKeys.add(path2keyRef.current.get(pathKey));\n      }\n    });\n\n    return pathKeys;\n  }, []);\n  React.useEffect(function () {\n    return function () {\n      destroyRef.current = true;\n    };\n  }, []);\n  return {\n    // Register\n    registerPath: registerPath,\n    unregisterPath: unregisterPath,\n    refreshOverflowKeys: refreshOverflowKeys,\n    // Util\n    isSubPathKey: isSubPathKey,\n    getKeyPath: getKeyPath,\n    getKeys: getKeys,\n    getSubPathKeys: getSubPathKeys\n  };\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/rc-menu/es/hooks/useKeyRecords.js"],"names":["_toConsumableArray","_slicedToArray","React","useRef","useCallback","warning","nextSlice","PATH_SPLIT","getPathStr","keyPath","join","getPathKeys","keyPathStr","split","OVERFLOW_KEY","useKeyRecords","_React$useState","useState","_React$useState2","internalForceUpdate","key2pathRef","Map","path2keyRef","_React$useState3","_React$useState4","overflowKeys","setOverflowKeys","updateRef","destroyRef","forceUpdate","current","registerPath","key","process","env","NODE_ENV","has","concat","connectedPath","set","id","unregisterPath","delete","refreshOverflowKeys","keys","getKeyPath","eventKey","includeOverflow","fullPath","get","includes","unshift","isSubPathKey","pathKeys","some","pathKey","pathKeyList","getKeys","length","push","getSubPathKeys","Set","forEach","startsWith","add","useEffect"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useRef, useCallback } from 'react';\nimport warning from \"rc-util/es/warning\";\nimport { nextSlice } from \"../utils/timeUtil\";\nvar PATH_SPLIT = '__RC_UTIL_PATH_SPLIT__';\nvar getPathStr = function getPathStr(keyPath) {\n  return keyPath.join(PATH_SPLIT);\n};\nvar getPathKeys = function getPathKeys(keyPathStr) {\n  return keyPathStr.split(PATH_SPLIT);\n};\nexport var OVERFLOW_KEY = 'rc-menu-more';\nexport default function useKeyRecords() {\n  var _React$useState = React.useState({}),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    internalForceUpdate = _React$useState2[1];\n  var key2pathRef = useRef(new Map());\n  var path2keyRef = useRef(new Map());\n  var _React$useState3 = React.useState([]),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    overflowKeys = _React$useState4[0],\n    setOverflowKeys = _React$useState4[1];\n  var updateRef = useRef(0);\n  var destroyRef = useRef(false);\n  var forceUpdate = function forceUpdate() {\n    if (!destroyRef.current) {\n      internalForceUpdate({});\n    }\n  };\n  var registerPath = useCallback(function (key, keyPath) {\n    // Warning for invalidate or duplicated `key`\n    if (process.env.NODE_ENV !== 'production') {\n      warning(!key2pathRef.current.has(key), \"Duplicated key '\".concat(key, \"' used in Menu by path [\").concat(keyPath.join(' > '), \"]\"));\n    }\n\n    // Fill map\n    var connectedPath = getPathStr(keyPath);\n    path2keyRef.current.set(connectedPath, key);\n    key2pathRef.current.set(key, connectedPath);\n    updateRef.current += 1;\n    var id = updateRef.current;\n    nextSlice(function () {\n      if (id === updateRef.current) {\n        forceUpdate();\n      }\n    });\n  }, []);\n  var unregisterPath = useCallback(function (key, keyPath) {\n    var connectedPath = getPathStr(keyPath);\n    path2keyRef.current.delete(connectedPath);\n    key2pathRef.current.delete(key);\n  }, []);\n  var refreshOverflowKeys = useCallback(function (keys) {\n    setOverflowKeys(keys);\n  }, []);\n  var getKeyPath = useCallback(function (eventKey, includeOverflow) {\n    var fullPath = key2pathRef.current.get(eventKey) || '';\n    var keys = getPathKeys(fullPath);\n    if (includeOverflow && overflowKeys.includes(keys[0])) {\n      keys.unshift(OVERFLOW_KEY);\n    }\n    return keys;\n  }, [overflowKeys]);\n  var isSubPathKey = useCallback(function (pathKeys, eventKey) {\n    return pathKeys.some(function (pathKey) {\n      var pathKeyList = getKeyPath(pathKey, true);\n      return pathKeyList.includes(eventKey);\n    });\n  }, [getKeyPath]);\n  var getKeys = function getKeys() {\n    var keys = _toConsumableArray(key2pathRef.current.keys());\n    if (overflowKeys.length) {\n      keys.push(OVERFLOW_KEY);\n    }\n    return keys;\n  };\n\n  /**\n   * Find current key related child path keys\n   */\n  var getSubPathKeys = useCallback(function (key) {\n    var connectedPath = \"\".concat(key2pathRef.current.get(key)).concat(PATH_SPLIT);\n    var pathKeys = new Set();\n    _toConsumableArray(path2keyRef.current.keys()).forEach(function (pathKey) {\n      if (pathKey.startsWith(connectedPath)) {\n        pathKeys.add(path2keyRef.current.get(pathKey));\n      }\n    });\n    return pathKeys;\n  }, []);\n  React.useEffect(function () {\n    return function () {\n      destroyRef.current = true;\n    };\n  }, []);\n  return {\n    // Register\n    registerPath: registerPath,\n    unregisterPath: unregisterPath,\n    refreshOverflowKeys: refreshOverflowKeys,\n    // Util\n    isSubPathKey: isSubPathKey,\n    getKeyPath: getKeyPath,\n    getKeys: getKeys,\n    getSubPathKeys: getSubPathKeys\n  };\n}"]},"metadata":{},"sourceType":"module"}