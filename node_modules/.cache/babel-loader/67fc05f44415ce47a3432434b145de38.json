{"ast":null,"code":"import _slicedToArray from \"/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport toArray from \"rc-util/es/Children/toArray\";\nimport useIsomorphicLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport * as React from 'react';\n\nfunction cuttable(node) {\n  var type = typeof node;\n  return type === 'string' || type === 'number';\n}\n\nfunction getNodesLen(nodeList) {\n  var totalLen = 0;\n  nodeList.forEach(function (node) {\n    if (cuttable(node)) {\n      totalLen += String(node).length;\n    } else {\n      totalLen += 1;\n    }\n  });\n  return totalLen;\n}\n\nfunction sliceNodes(nodeList, len) {\n  var currLen = 0;\n  var currentNodeList = [];\n\n  for (var i = 0; i < nodeList.length; i += 1) {\n    // Match to return\n    if (currLen === len) {\n      return currentNodeList;\n    }\n\n    var node = nodeList[i];\n    var canCut = cuttable(node);\n    var nodeLen = canCut ? String(node).length : 1;\n    var nextLen = currLen + nodeLen; // Exceed but current not which means we need cut this\n    // This will not happen on validate ReactElement\n\n    if (nextLen > len) {\n      var restLen = len - currLen;\n      currentNodeList.push(String(node).slice(0, restLen));\n      return currentNodeList;\n    }\n\n    currentNodeList.push(node);\n    currLen = nextLen;\n  }\n\n  return nodeList;\n}\n\nvar NONE = 0;\nvar PREPARE = 1;\nvar WALKING = 2;\nvar DONE_WITH_ELLIPSIS = 3;\nvar DONE_WITHOUT_ELLIPSIS = 4;\n\nvar Ellipsis = function Ellipsis(_ref) {\n  var enabledMeasure = _ref.enabledMeasure,\n      children = _ref.children,\n      text = _ref.text,\n      width = _ref.width,\n      fontSize = _ref.fontSize,\n      rows = _ref.rows,\n      onEllipsis = _ref.onEllipsis;\n\n  var _React$useState = React.useState([0, 0, 0]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      _React$useState2$ = _slicedToArray(_React$useState2[0], 3),\n      startLen = _React$useState2$[0],\n      midLen = _React$useState2$[1],\n      endLen = _React$useState2$[2],\n      setCutLength = _React$useState2[1];\n\n  var _React$useState3 = React.useState(NONE),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      walkingState = _React$useState4[0],\n      setWalkingState = _React$useState4[1];\n\n  var _React$useState5 = React.useState(0),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      singleRowHeight = _React$useState6[0],\n      setSingleRowHeight = _React$useState6[1];\n\n  var singleRowRef = React.useRef(null);\n  var midRowRef = React.useRef(null);\n  var nodeList = React.useMemo(function () {\n    return toArray(text);\n  }, [text]);\n  var totalLen = React.useMemo(function () {\n    return getNodesLen(nodeList);\n  }, [nodeList]);\n  var mergedChildren = React.useMemo(function () {\n    if (!enabledMeasure || walkingState !== DONE_WITH_ELLIPSIS) {\n      return children(nodeList, false);\n    }\n\n    return children(sliceNodes(nodeList, midLen), midLen < totalLen);\n  }, [enabledMeasure, walkingState, children, nodeList, midLen, totalLen]); // ======================== Walk ========================\n\n  useIsomorphicLayoutEffect(function () {\n    if (enabledMeasure && width && fontSize && totalLen) {\n      setWalkingState(PREPARE);\n      setCutLength([0, Math.ceil(totalLen / 2), totalLen]);\n    }\n  }, [enabledMeasure, width, fontSize, text, totalLen, rows]);\n  useIsomorphicLayoutEffect(function () {\n    var _a;\n\n    if (walkingState === PREPARE) {\n      setSingleRowHeight(((_a = singleRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0);\n    }\n  }, [walkingState]);\n  useIsomorphicLayoutEffect(function () {\n    var _a, _b;\n\n    if (singleRowHeight) {\n      if (walkingState === PREPARE) {\n        // Ignore if position is enough\n        var midHeight = ((_a = midRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0;\n        var maxHeight = rows * singleRowHeight;\n\n        if (midHeight <= maxHeight) {\n          setWalkingState(DONE_WITHOUT_ELLIPSIS);\n          onEllipsis(false);\n        } else {\n          setWalkingState(WALKING);\n        }\n      } else if (walkingState === WALKING) {\n        if (startLen !== endLen) {\n          var _midHeight = ((_b = midRowRef.current) === null || _b === void 0 ? void 0 : _b.offsetHeight) || 0;\n\n          var _maxHeight = rows * singleRowHeight;\n\n          var nextStartLen = startLen;\n          var nextEndLen = endLen; // We reach the last round\n\n          if (startLen === endLen - 1) {\n            nextEndLen = startLen;\n          } else if (_midHeight <= _maxHeight) {\n            nextStartLen = midLen;\n          } else {\n            nextEndLen = midLen;\n          }\n\n          var nextMidLen = Math.ceil((nextStartLen + nextEndLen) / 2);\n          setCutLength([nextStartLen, nextMidLen, nextEndLen]);\n        } else {\n          setWalkingState(DONE_WITH_ELLIPSIS);\n          onEllipsis(true);\n        }\n      }\n    }\n  }, [walkingState, startLen, endLen, rows, singleRowHeight]); // ======================= Render =======================\n\n  var measureStyle = {\n    width: width,\n    whiteSpace: 'normal',\n    margin: 0,\n    padding: 0\n  };\n\n  var renderMeasure = function renderMeasure(content, ref, style) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      \"aria-hidden\": true,\n      ref: ref,\n      style: Object.assign({\n        position: 'fixed',\n        display: 'block',\n        left: 0,\n        top: 0,\n        zIndex: -9999,\n        visibility: 'hidden',\n        pointerEvents: 'none',\n        fontSize: Math.floor(fontSize / 2) * 2\n      }, style)\n    }, content);\n  };\n\n  var renderMeasureSlice = function renderMeasureSlice(len, ref) {\n    var sliceNodeList = sliceNodes(nodeList, len);\n    return renderMeasure(children(sliceNodeList, true), ref, measureStyle);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, mergedChildren, enabledMeasure && walkingState !== DONE_WITH_ELLIPSIS && walkingState !== DONE_WITHOUT_ELLIPSIS && /*#__PURE__*/React.createElement(React.Fragment, null, renderMeasure('lg', singleRowRef, {\n    wordBreak: 'keep-all',\n    whiteSpace: 'nowrap'\n  }), walkingState === PREPARE ? renderMeasure(children(nodeList, false), midRowRef, measureStyle) : renderMeasureSlice(midLen, midRowRef)));\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  Ellipsis.displayName = 'Ellipsis';\n}\n\nexport default Ellipsis;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/typography/Base/Ellipsis.js"],"names":["toArray","useIsomorphicLayoutEffect","React","cuttable","node","type","getNodesLen","nodeList","totalLen","forEach","String","length","sliceNodes","len","currLen","currentNodeList","i","canCut","nodeLen","nextLen","restLen","push","slice","NONE","PREPARE","WALKING","DONE_WITH_ELLIPSIS","DONE_WITHOUT_ELLIPSIS","Ellipsis","_ref","enabledMeasure","children","text","width","fontSize","rows","onEllipsis","useState","startLen","midLen","endLen","setCutLength","walkingState","setWalkingState","singleRowHeight","setSingleRowHeight","singleRowRef","useRef","midRowRef","useMemo","mergedChildren","Math","ceil","_a","current","offsetHeight","_b","midHeight","maxHeight","nextStartLen","nextEndLen","nextMidLen","measureStyle","whiteSpace","margin","padding","renderMeasure","content","ref","style","createElement","Object","assign","position","display","left","top","zIndex","visibility","pointerEvents","floor","renderMeasureSlice","sliceNodeList","Fragment","wordBreak","process","env","NODE_ENV","displayName"],"mappings":"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","sourcesContent":["import toArray from \"rc-util/es/Children/toArray\";\nimport useIsomorphicLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport * as React from 'react';\nfunction cuttable(node) {\n  const type = typeof node;\n  return type === 'string' || type === 'number';\n}\nfunction getNodesLen(nodeList) {\n  let totalLen = 0;\n  nodeList.forEach(node => {\n    if (cuttable(node)) {\n      totalLen += String(node).length;\n    } else {\n      totalLen += 1;\n    }\n  });\n  return totalLen;\n}\nfunction sliceNodes(nodeList, len) {\n  let currLen = 0;\n  const currentNodeList = [];\n  for (let i = 0; i < nodeList.length; i += 1) {\n    // Match to return\n    if (currLen === len) {\n      return currentNodeList;\n    }\n    const node = nodeList[i];\n    const canCut = cuttable(node);\n    const nodeLen = canCut ? String(node).length : 1;\n    const nextLen = currLen + nodeLen;\n    // Exceed but current not which means we need cut this\n    // This will not happen on validate ReactElement\n    if (nextLen > len) {\n      const restLen = len - currLen;\n      currentNodeList.push(String(node).slice(0, restLen));\n      return currentNodeList;\n    }\n    currentNodeList.push(node);\n    currLen = nextLen;\n  }\n  return nodeList;\n}\nconst NONE = 0;\nconst PREPARE = 1;\nconst WALKING = 2;\nconst DONE_WITH_ELLIPSIS = 3;\nconst DONE_WITHOUT_ELLIPSIS = 4;\nconst Ellipsis = _ref => {\n  let {\n    enabledMeasure,\n    children,\n    text,\n    width,\n    fontSize,\n    rows,\n    onEllipsis\n  } = _ref;\n  const [[startLen, midLen, endLen], setCutLength] = React.useState([0, 0, 0]);\n  const [walkingState, setWalkingState] = React.useState(NONE);\n  const [singleRowHeight, setSingleRowHeight] = React.useState(0);\n  const singleRowRef = React.useRef(null);\n  const midRowRef = React.useRef(null);\n  const nodeList = React.useMemo(() => toArray(text), [text]);\n  const totalLen = React.useMemo(() => getNodesLen(nodeList), [nodeList]);\n  const mergedChildren = React.useMemo(() => {\n    if (!enabledMeasure || walkingState !== DONE_WITH_ELLIPSIS) {\n      return children(nodeList, false);\n    }\n    return children(sliceNodes(nodeList, midLen), midLen < totalLen);\n  }, [enabledMeasure, walkingState, children, nodeList, midLen, totalLen]);\n  // ======================== Walk ========================\n  useIsomorphicLayoutEffect(() => {\n    if (enabledMeasure && width && fontSize && totalLen) {\n      setWalkingState(PREPARE);\n      setCutLength([0, Math.ceil(totalLen / 2), totalLen]);\n    }\n  }, [enabledMeasure, width, fontSize, text, totalLen, rows]);\n  useIsomorphicLayoutEffect(() => {\n    var _a;\n    if (walkingState === PREPARE) {\n      setSingleRowHeight(((_a = singleRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0);\n    }\n  }, [walkingState]);\n  useIsomorphicLayoutEffect(() => {\n    var _a, _b;\n    if (singleRowHeight) {\n      if (walkingState === PREPARE) {\n        // Ignore if position is enough\n        const midHeight = ((_a = midRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0;\n        const maxHeight = rows * singleRowHeight;\n        if (midHeight <= maxHeight) {\n          setWalkingState(DONE_WITHOUT_ELLIPSIS);\n          onEllipsis(false);\n        } else {\n          setWalkingState(WALKING);\n        }\n      } else if (walkingState === WALKING) {\n        if (startLen !== endLen) {\n          const midHeight = ((_b = midRowRef.current) === null || _b === void 0 ? void 0 : _b.offsetHeight) || 0;\n          const maxHeight = rows * singleRowHeight;\n          let nextStartLen = startLen;\n          let nextEndLen = endLen;\n          // We reach the last round\n          if (startLen === endLen - 1) {\n            nextEndLen = startLen;\n          } else if (midHeight <= maxHeight) {\n            nextStartLen = midLen;\n          } else {\n            nextEndLen = midLen;\n          }\n          const nextMidLen = Math.ceil((nextStartLen + nextEndLen) / 2);\n          setCutLength([nextStartLen, nextMidLen, nextEndLen]);\n        } else {\n          setWalkingState(DONE_WITH_ELLIPSIS);\n          onEllipsis(true);\n        }\n      }\n    }\n  }, [walkingState, startLen, endLen, rows, singleRowHeight]);\n  // ======================= Render =======================\n  const measureStyle = {\n    width,\n    whiteSpace: 'normal',\n    margin: 0,\n    padding: 0\n  };\n  const renderMeasure = (content, ref, style) => /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    ref: ref,\n    style: Object.assign({\n      position: 'fixed',\n      display: 'block',\n      left: 0,\n      top: 0,\n      zIndex: -9999,\n      visibility: 'hidden',\n      pointerEvents: 'none',\n      fontSize: Math.floor(fontSize / 2) * 2\n    }, style)\n  }, content);\n  const renderMeasureSlice = (len, ref) => {\n    const sliceNodeList = sliceNodes(nodeList, len);\n    return renderMeasure(children(sliceNodeList, true), ref, measureStyle);\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, mergedChildren, enabledMeasure && walkingState !== DONE_WITH_ELLIPSIS && walkingState !== DONE_WITHOUT_ELLIPSIS && /*#__PURE__*/React.createElement(React.Fragment, null, renderMeasure('lg', singleRowRef, {\n    wordBreak: 'keep-all',\n    whiteSpace: 'nowrap'\n  }), walkingState === PREPARE ? renderMeasure(children(nodeList, false), midRowRef, measureStyle) : renderMeasureSlice(midLen, midRowRef)));\n};\nif (process.env.NODE_ENV !== 'production') {\n  Ellipsis.displayName = 'Ellipsis';\n}\nexport default Ellipsis;"]},"metadata":{},"sourceType":"module"}