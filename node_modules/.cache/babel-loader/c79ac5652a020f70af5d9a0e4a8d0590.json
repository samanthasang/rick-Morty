{"ast":null,"code":"// Thanks to https://github.com/andreypopp/react-textarea-autosize/\n\n/**\n * calculateNodeHeight(uiTextNode, useCache = false)\n */\nvar HIDDEN_TEXTAREA_STYLE = \"\\n  min-height:0 !important;\\n  max-height:none !important;\\n  height:0 !important;\\n  visibility:hidden !important;\\n  overflow:hidden !important;\\n  position:absolute !important;\\n  z-index:-1000 !important;\\n  top:0 !important;\\n  right:0 !important;\\n  pointer-events: none !important;\\n\";\nvar SIZING_STYLE = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'font-variant', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-left', 'padding-right', 'border-width', 'box-sizing', 'word-break', 'white-space'];\nvar computedStyleCache = {};\nvar hiddenTextarea;\nexport function calculateNodeStyling(node) {\n  var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var nodeRef = node.getAttribute('id') || node.getAttribute('data-reactid') || node.getAttribute('name');\n\n  if (useCache && computedStyleCache[nodeRef]) {\n    return computedStyleCache[nodeRef];\n  }\n\n  var style = window.getComputedStyle(node);\n  var boxSizing = style.getPropertyValue('box-sizing') || style.getPropertyValue('-moz-box-sizing') || style.getPropertyValue('-webkit-box-sizing');\n  var paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) + parseFloat(style.getPropertyValue('padding-top'));\n  var borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) + parseFloat(style.getPropertyValue('border-top-width'));\n  var sizingStyle = SIZING_STYLE.map(function (name) {\n    return \"\".concat(name, \":\").concat(style.getPropertyValue(name));\n  }).join(';');\n  var nodeInfo = {\n    sizingStyle: sizingStyle,\n    paddingSize: paddingSize,\n    borderSize: borderSize,\n    boxSizing: boxSizing\n  };\n\n  if (useCache && nodeRef) {\n    computedStyleCache[nodeRef] = nodeInfo;\n  }\n\n  return nodeInfo;\n}\nexport default function calculateAutoSizeStyle(uiTextNode) {\n  var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var minRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var maxRows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea');\n    hiddenTextarea.setAttribute('tab-index', '-1');\n    hiddenTextarea.setAttribute('aria-hidden', 'true');\n    document.body.appendChild(hiddenTextarea);\n  } // Fix wrap=\"off\" issue\n  // https://github.com/ant-design/ant-design/issues/6577\n\n\n  if (uiTextNode.getAttribute('wrap')) {\n    hiddenTextarea.setAttribute('wrap', uiTextNode.getAttribute('wrap'));\n  } else {\n    hiddenTextarea.removeAttribute('wrap');\n  } // Copy all CSS properties that have an impact on the height of the content in\n  // the textbox\n\n\n  var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache),\n      paddingSize = _calculateNodeStyling.paddingSize,\n      borderSize = _calculateNodeStyling.borderSize,\n      boxSizing = _calculateNodeStyling.boxSizing,\n      sizingStyle = _calculateNodeStyling.sizingStyle; // Need to have the overflow attribute to hide the scrollbar otherwise\n  // text-lines will not calculated properly as the shadow will technically be\n  // narrower for content\n\n\n  hiddenTextarea.setAttribute('style', \"\".concat(sizingStyle, \";\").concat(HIDDEN_TEXTAREA_STYLE));\n  hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';\n  var minHeight = undefined;\n  var maxHeight = undefined;\n  var overflowY;\n  var height = hiddenTextarea.scrollHeight;\n\n  if (boxSizing === 'border-box') {\n    // border-box: add border, since height = content + padding + border\n    height += borderSize;\n  } else if (boxSizing === 'content-box') {\n    // remove padding, since height = content\n    height -= paddingSize;\n  }\n\n  if (minRows !== null || maxRows !== null) {\n    // measure height of a textarea with a single row\n    hiddenTextarea.value = ' ';\n    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n\n    if (minRows !== null) {\n      minHeight = singleRowHeight * minRows;\n\n      if (boxSizing === 'border-box') {\n        minHeight = minHeight + paddingSize + borderSize;\n      }\n\n      height = Math.max(minHeight, height);\n    }\n\n    if (maxRows !== null) {\n      maxHeight = singleRowHeight * maxRows;\n\n      if (boxSizing === 'border-box') {\n        maxHeight = maxHeight + paddingSize + borderSize;\n      }\n\n      overflowY = height > maxHeight ? '' : 'hidden';\n      height = Math.min(maxHeight, height);\n    }\n  }\n\n  var style = {\n    height: height,\n    overflowY: overflowY,\n    resize: 'none'\n  };\n\n  if (minHeight) {\n    style.minHeight = minHeight;\n  }\n\n  if (maxHeight) {\n    style.maxHeight = maxHeight;\n  }\n\n  return style;\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/rc-textarea/es/calculateNodeHeight.js"],"names":["HIDDEN_TEXTAREA_STYLE","SIZING_STYLE","computedStyleCache","hiddenTextarea","calculateNodeStyling","node","useCache","arguments","length","undefined","nodeRef","getAttribute","style","window","getComputedStyle","boxSizing","getPropertyValue","paddingSize","parseFloat","borderSize","sizingStyle","map","name","concat","join","nodeInfo","calculateAutoSizeStyle","uiTextNode","minRows","maxRows","document","createElement","setAttribute","body","appendChild","removeAttribute","_calculateNodeStyling","value","placeholder","minHeight","maxHeight","overflowY","height","scrollHeight","singleRowHeight","Math","max","min","resize"],"mappings":"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","sourcesContent":["// Thanks to https://github.com/andreypopp/react-textarea-autosize/\n\n/**\n * calculateNodeHeight(uiTextNode, useCache = false)\n */\n\nvar HIDDEN_TEXTAREA_STYLE = \"\\n  min-height:0 !important;\\n  max-height:none !important;\\n  height:0 !important;\\n  visibility:hidden !important;\\n  overflow:hidden !important;\\n  position:absolute !important;\\n  z-index:-1000 !important;\\n  top:0 !important;\\n  right:0 !important;\\n  pointer-events: none !important;\\n\";\nvar SIZING_STYLE = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'font-variant', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-left', 'padding-right', 'border-width', 'box-sizing', 'word-break', 'white-space'];\nvar computedStyleCache = {};\nvar hiddenTextarea;\nexport function calculateNodeStyling(node) {\n  var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var nodeRef = node.getAttribute('id') || node.getAttribute('data-reactid') || node.getAttribute('name');\n  if (useCache && computedStyleCache[nodeRef]) {\n    return computedStyleCache[nodeRef];\n  }\n  var style = window.getComputedStyle(node);\n  var boxSizing = style.getPropertyValue('box-sizing') || style.getPropertyValue('-moz-box-sizing') || style.getPropertyValue('-webkit-box-sizing');\n  var paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) + parseFloat(style.getPropertyValue('padding-top'));\n  var borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) + parseFloat(style.getPropertyValue('border-top-width'));\n  var sizingStyle = SIZING_STYLE.map(function (name) {\n    return \"\".concat(name, \":\").concat(style.getPropertyValue(name));\n  }).join(';');\n  var nodeInfo = {\n    sizingStyle: sizingStyle,\n    paddingSize: paddingSize,\n    borderSize: borderSize,\n    boxSizing: boxSizing\n  };\n  if (useCache && nodeRef) {\n    computedStyleCache[nodeRef] = nodeInfo;\n  }\n  return nodeInfo;\n}\nexport default function calculateAutoSizeStyle(uiTextNode) {\n  var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var minRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var maxRows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea');\n    hiddenTextarea.setAttribute('tab-index', '-1');\n    hiddenTextarea.setAttribute('aria-hidden', 'true');\n    document.body.appendChild(hiddenTextarea);\n  }\n\n  // Fix wrap=\"off\" issue\n  // https://github.com/ant-design/ant-design/issues/6577\n  if (uiTextNode.getAttribute('wrap')) {\n    hiddenTextarea.setAttribute('wrap', uiTextNode.getAttribute('wrap'));\n  } else {\n    hiddenTextarea.removeAttribute('wrap');\n  }\n\n  // Copy all CSS properties that have an impact on the height of the content in\n  // the textbox\n  var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache),\n    paddingSize = _calculateNodeStyling.paddingSize,\n    borderSize = _calculateNodeStyling.borderSize,\n    boxSizing = _calculateNodeStyling.boxSizing,\n    sizingStyle = _calculateNodeStyling.sizingStyle;\n\n  // Need to have the overflow attribute to hide the scrollbar otherwise\n  // text-lines will not calculated properly as the shadow will technically be\n  // narrower for content\n  hiddenTextarea.setAttribute('style', \"\".concat(sizingStyle, \";\").concat(HIDDEN_TEXTAREA_STYLE));\n  hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';\n  var minHeight = undefined;\n  var maxHeight = undefined;\n  var overflowY;\n  var height = hiddenTextarea.scrollHeight;\n  if (boxSizing === 'border-box') {\n    // border-box: add border, since height = content + padding + border\n    height += borderSize;\n  } else if (boxSizing === 'content-box') {\n    // remove padding, since height = content\n    height -= paddingSize;\n  }\n  if (minRows !== null || maxRows !== null) {\n    // measure height of a textarea with a single row\n    hiddenTextarea.value = ' ';\n    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n    if (minRows !== null) {\n      minHeight = singleRowHeight * minRows;\n      if (boxSizing === 'border-box') {\n        minHeight = minHeight + paddingSize + borderSize;\n      }\n      height = Math.max(minHeight, height);\n    }\n    if (maxRows !== null) {\n      maxHeight = singleRowHeight * maxRows;\n      if (boxSizing === 'border-box') {\n        maxHeight = maxHeight + paddingSize + borderSize;\n      }\n      overflowY = height > maxHeight ? '' : 'hidden';\n      height = Math.min(maxHeight, height);\n    }\n  }\n  var style = {\n    height: height,\n    overflowY: overflowY,\n    resize: 'none'\n  };\n  if (minHeight) {\n    style.minHeight = minHeight;\n  }\n  if (maxHeight) {\n    style.maxHeight = maxHeight;\n  }\n  return style;\n}"]},"metadata":{},"sourceType":"module"}