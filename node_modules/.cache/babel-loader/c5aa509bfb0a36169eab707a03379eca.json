{"ast":null,"code":"import EnterOutlined from \"@ant-design/icons/es/icons/EnterOutlined\";\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport * as React from 'react';\nimport TextArea from '../input/TextArea';\nimport { cloneElement } from '../_util/reactNode';\nimport useStyle from './style';\n\nconst Editable = _ref => {\n  let {\n    prefixCls,\n    'aria-label': ariaLabel,\n    className,\n    style,\n    direction,\n    maxLength,\n    autoSize = true,\n    value,\n    onSave,\n    onCancel,\n    onEnd,\n    component,\n    enterIcon = /*#__PURE__*/React.createElement(EnterOutlined, null)\n  } = _ref;\n  const ref = React.useRef(null);\n  const inComposition = React.useRef(false);\n  const lastKeyCode = React.useRef();\n  const [current, setCurrent] = React.useState(value);\n  React.useEffect(() => {\n    setCurrent(value);\n  }, [value]);\n  React.useEffect(() => {\n    if (ref.current && ref.current.resizableTextArea) {\n      const {\n        textArea\n      } = ref.current.resizableTextArea;\n      textArea.focus();\n      const {\n        length\n      } = textArea.value;\n      textArea.setSelectionRange(length, length);\n    }\n  }, []);\n\n  const onChange = _ref2 => {\n    let {\n      target\n    } = _ref2;\n    setCurrent(target.value.replace(/[\\n\\r]/g, ''));\n  };\n\n  const onCompositionStart = () => {\n    inComposition.current = true;\n  };\n\n  const onCompositionEnd = () => {\n    inComposition.current = false;\n  };\n\n  const onKeyDown = _ref3 => {\n    let {\n      keyCode\n    } = _ref3; // We don't record keyCode when IME is using\n\n    if (inComposition.current) return;\n    lastKeyCode.current = keyCode;\n  };\n\n  const confirmChange = () => {\n    onSave(current.trim());\n  };\n\n  const onKeyUp = _ref4 => {\n    let {\n      keyCode,\n      ctrlKey,\n      altKey,\n      metaKey,\n      shiftKey\n    } = _ref4; // Check if it's a real key\n\n    if (lastKeyCode.current === keyCode && !inComposition.current && !ctrlKey && !altKey && !metaKey && !shiftKey) {\n      if (keyCode === KeyCode.ENTER) {\n        confirmChange();\n        onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n      } else if (keyCode === KeyCode.ESC) {\n        onCancel();\n      }\n    }\n  };\n\n  const onBlur = () => {\n    confirmChange();\n  };\n\n  const textClassName = component ? `${prefixCls}-${component}` : '';\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const textAreaClassName = classNames(prefixCls, `${prefixCls}-edit-content`, {\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  }, className, textClassName, hashId);\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n    className: textAreaClassName,\n    style: style\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    ref: ref,\n    maxLength: maxLength,\n    value: current,\n    onChange: onChange,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd,\n    onBlur: onBlur,\n    \"aria-label\": ariaLabel,\n    rows: 1,\n    autoSize: autoSize\n  }), enterIcon !== null ? cloneElement(enterIcon, {\n    className: `${prefixCls}-edit-content-confirm`\n  }) : null));\n};\n\nexport default Editable;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/typography/Editable.js"],"names":["EnterOutlined","classNames","KeyCode","React","TextArea","cloneElement","useStyle","Editable","_ref","prefixCls","ariaLabel","className","style","direction","maxLength","autoSize","value","onSave","onCancel","onEnd","component","enterIcon","createElement","ref","useRef","inComposition","lastKeyCode","current","setCurrent","useState","useEffect","resizableTextArea","textArea","focus","length","setSelectionRange","onChange","_ref2","target","replace","onCompositionStart","onCompositionEnd","onKeyDown","_ref3","keyCode","confirmChange","trim","onKeyUp","_ref4","ctrlKey","altKey","metaKey","shiftKey","ENTER","ESC","onBlur","textClassName","wrapSSR","hashId","textAreaClassName","rows"],"mappings":"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","sourcesContent":["import EnterOutlined from \"@ant-design/icons/es/icons/EnterOutlined\";\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport * as React from 'react';\nimport TextArea from '../input/TextArea';\nimport { cloneElement } from '../_util/reactNode';\nimport useStyle from './style';\nconst Editable = _ref => {\n  let {\n    prefixCls,\n    'aria-label': ariaLabel,\n    className,\n    style,\n    direction,\n    maxLength,\n    autoSize = true,\n    value,\n    onSave,\n    onCancel,\n    onEnd,\n    component,\n    enterIcon = /*#__PURE__*/React.createElement(EnterOutlined, null)\n  } = _ref;\n  const ref = React.useRef(null);\n  const inComposition = React.useRef(false);\n  const lastKeyCode = React.useRef();\n  const [current, setCurrent] = React.useState(value);\n  React.useEffect(() => {\n    setCurrent(value);\n  }, [value]);\n  React.useEffect(() => {\n    if (ref.current && ref.current.resizableTextArea) {\n      const {\n        textArea\n      } = ref.current.resizableTextArea;\n      textArea.focus();\n      const {\n        length\n      } = textArea.value;\n      textArea.setSelectionRange(length, length);\n    }\n  }, []);\n  const onChange = _ref2 => {\n    let {\n      target\n    } = _ref2;\n    setCurrent(target.value.replace(/[\\n\\r]/g, ''));\n  };\n  const onCompositionStart = () => {\n    inComposition.current = true;\n  };\n  const onCompositionEnd = () => {\n    inComposition.current = false;\n  };\n  const onKeyDown = _ref3 => {\n    let {\n      keyCode\n    } = _ref3;\n    // We don't record keyCode when IME is using\n    if (inComposition.current) return;\n    lastKeyCode.current = keyCode;\n  };\n  const confirmChange = () => {\n    onSave(current.trim());\n  };\n  const onKeyUp = _ref4 => {\n    let {\n      keyCode,\n      ctrlKey,\n      altKey,\n      metaKey,\n      shiftKey\n    } = _ref4;\n    // Check if it's a real key\n    if (lastKeyCode.current === keyCode && !inComposition.current && !ctrlKey && !altKey && !metaKey && !shiftKey) {\n      if (keyCode === KeyCode.ENTER) {\n        confirmChange();\n        onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n      } else if (keyCode === KeyCode.ESC) {\n        onCancel();\n      }\n    }\n  };\n  const onBlur = () => {\n    confirmChange();\n  };\n  const textClassName = component ? `${prefixCls}-${component}` : '';\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const textAreaClassName = classNames(prefixCls, `${prefixCls}-edit-content`, {\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  }, className, textClassName, hashId);\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n    className: textAreaClassName,\n    style: style\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    ref: ref,\n    maxLength: maxLength,\n    value: current,\n    onChange: onChange,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd,\n    onBlur: onBlur,\n    \"aria-label\": ariaLabel,\n    rows: 1,\n    autoSize: autoSize\n  }), enterIcon !== null ? cloneElement(enterIcon, {\n    className: `${prefixCls}-edit-content-confirm`\n  }) : null));\n};\nexport default Editable;"]},"metadata":{},"sourceType":"module"}