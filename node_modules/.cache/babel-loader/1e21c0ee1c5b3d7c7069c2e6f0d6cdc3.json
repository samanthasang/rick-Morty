{"ast":null,"code":"import { TinyColor } from '@ctrl/tinycolor';\nexport default function genColorMapToken(seed, _ref) {\n  var generateColorPalettes = _ref.generateColorPalettes,\n      generateNeutralColorPalettes = _ref.generateNeutralColorPalettes;\n  var colorSuccessBase = seed.colorSuccess,\n      colorWarningBase = seed.colorWarning,\n      colorErrorBase = seed.colorError,\n      colorInfoBase = seed.colorInfo,\n      colorPrimaryBase = seed.colorPrimary,\n      colorBgBase = seed.colorBgBase,\n      colorTextBase = seed.colorTextBase;\n  var primaryColors = generateColorPalettes(colorPrimaryBase);\n  var successColors = generateColorPalettes(colorSuccessBase);\n  var warningColors = generateColorPalettes(colorWarningBase);\n  var errorColors = generateColorPalettes(colorErrorBase);\n  var infoColors = generateColorPalettes(colorInfoBase);\n  var neutralColors = generateNeutralColorPalettes(colorBgBase, colorTextBase);\n  return Object.assign(Object.assign({}, neutralColors), {\n    colorPrimaryBg: primaryColors[1],\n    colorPrimaryBgHover: primaryColors[2],\n    colorPrimaryBorder: primaryColors[3],\n    colorPrimaryBorderHover: primaryColors[4],\n    colorPrimaryHover: primaryColors[5],\n    colorPrimary: primaryColors[6],\n    colorPrimaryActive: primaryColors[7],\n    colorPrimaryTextHover: primaryColors[8],\n    colorPrimaryText: primaryColors[9],\n    colorPrimaryTextActive: primaryColors[10],\n    colorSuccessBg: successColors[1],\n    colorSuccessBgHover: successColors[2],\n    colorSuccessBorder: successColors[3],\n    colorSuccessBorderHover: successColors[4],\n    colorSuccessHover: successColors[4],\n    colorSuccess: successColors[6],\n    colorSuccessActive: successColors[7],\n    colorSuccessTextHover: successColors[8],\n    colorSuccessText: successColors[9],\n    colorSuccessTextActive: successColors[10],\n    colorErrorBg: errorColors[1],\n    colorErrorBgHover: errorColors[2],\n    colorErrorBorder: errorColors[3],\n    colorErrorBorderHover: errorColors[4],\n    colorErrorHover: errorColors[5],\n    colorError: errorColors[6],\n    colorErrorActive: errorColors[7],\n    colorErrorTextHover: errorColors[8],\n    colorErrorText: errorColors[9],\n    colorErrorTextActive: errorColors[10],\n    colorWarningBg: warningColors[1],\n    colorWarningBgHover: warningColors[2],\n    colorWarningBorder: warningColors[3],\n    colorWarningBorderHover: warningColors[4],\n    colorWarningHover: warningColors[4],\n    colorWarning: warningColors[6],\n    colorWarningActive: warningColors[7],\n    colorWarningTextHover: warningColors[8],\n    colorWarningText: warningColors[9],\n    colorWarningTextActive: warningColors[10],\n    colorInfoBg: infoColors[1],\n    colorInfoBgHover: infoColors[2],\n    colorInfoBorder: infoColors[3],\n    colorInfoBorderHover: infoColors[4],\n    colorInfoHover: infoColors[4],\n    colorInfo: infoColors[6],\n    colorInfoActive: infoColors[7],\n    colorInfoTextHover: infoColors[8],\n    colorInfoText: infoColors[9],\n    colorInfoTextActive: infoColors[10],\n    colorBgMask: new TinyColor('#000').setAlpha(0.45).toRgbString(),\n    colorWhite: '#fff'\n  });\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/theme/themes/shared/genColorMapToken.js"],"names":["TinyColor","genColorMapToken","seed","_ref","generateColorPalettes","generateNeutralColorPalettes","colorSuccessBase","colorSuccess","colorWarningBase","colorWarning","colorErrorBase","colorError","colorInfoBase","colorInfo","colorPrimaryBase","colorPrimary","colorBgBase","colorTextBase","primaryColors","successColors","warningColors","errorColors","infoColors","neutralColors","Object","assign","colorPrimaryBg","colorPrimaryBgHover","colorPrimaryBorder","colorPrimaryBorderHover","colorPrimaryHover","colorPrimaryActive","colorPrimaryTextHover","colorPrimaryText","colorPrimaryTextActive","colorSuccessBg","colorSuccessBgHover","colorSuccessBorder","colorSuccessBorderHover","colorSuccessHover","colorSuccessActive","colorSuccessTextHover","colorSuccessText","colorSuccessTextActive","colorErrorBg","colorErrorBgHover","colorErrorBorder","colorErrorBorderHover","colorErrorHover","colorErrorActive","colorErrorTextHover","colorErrorText","colorErrorTextActive","colorWarningBg","colorWarningBgHover","colorWarningBorder","colorWarningBorderHover","colorWarningHover","colorWarningActive","colorWarningTextHover","colorWarningText","colorWarningTextActive","colorInfoBg","colorInfoBgHover","colorInfoBorder","colorInfoBorderHover","colorInfoHover","colorInfoActive","colorInfoTextHover","colorInfoText","colorInfoTextActive","colorBgMask","setAlpha","toRgbString","colorWhite"],"mappings":"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","sourcesContent":["import { TinyColor } from '@ctrl/tinycolor';\nexport default function genColorMapToken(seed, _ref) {\n  let {\n    generateColorPalettes,\n    generateNeutralColorPalettes\n  } = _ref;\n  const {\n    colorSuccess: colorSuccessBase,\n    colorWarning: colorWarningBase,\n    colorError: colorErrorBase,\n    colorInfo: colorInfoBase,\n    colorPrimary: colorPrimaryBase,\n    colorBgBase,\n    colorTextBase\n  } = seed;\n  const primaryColors = generateColorPalettes(colorPrimaryBase);\n  const successColors = generateColorPalettes(colorSuccessBase);\n  const warningColors = generateColorPalettes(colorWarningBase);\n  const errorColors = generateColorPalettes(colorErrorBase);\n  const infoColors = generateColorPalettes(colorInfoBase);\n  const neutralColors = generateNeutralColorPalettes(colorBgBase, colorTextBase);\n  return Object.assign(Object.assign({}, neutralColors), {\n    colorPrimaryBg: primaryColors[1],\n    colorPrimaryBgHover: primaryColors[2],\n    colorPrimaryBorder: primaryColors[3],\n    colorPrimaryBorderHover: primaryColors[4],\n    colorPrimaryHover: primaryColors[5],\n    colorPrimary: primaryColors[6],\n    colorPrimaryActive: primaryColors[7],\n    colorPrimaryTextHover: primaryColors[8],\n    colorPrimaryText: primaryColors[9],\n    colorPrimaryTextActive: primaryColors[10],\n    colorSuccessBg: successColors[1],\n    colorSuccessBgHover: successColors[2],\n    colorSuccessBorder: successColors[3],\n    colorSuccessBorderHover: successColors[4],\n    colorSuccessHover: successColors[4],\n    colorSuccess: successColors[6],\n    colorSuccessActive: successColors[7],\n    colorSuccessTextHover: successColors[8],\n    colorSuccessText: successColors[9],\n    colorSuccessTextActive: successColors[10],\n    colorErrorBg: errorColors[1],\n    colorErrorBgHover: errorColors[2],\n    colorErrorBorder: errorColors[3],\n    colorErrorBorderHover: errorColors[4],\n    colorErrorHover: errorColors[5],\n    colorError: errorColors[6],\n    colorErrorActive: errorColors[7],\n    colorErrorTextHover: errorColors[8],\n    colorErrorText: errorColors[9],\n    colorErrorTextActive: errorColors[10],\n    colorWarningBg: warningColors[1],\n    colorWarningBgHover: warningColors[2],\n    colorWarningBorder: warningColors[3],\n    colorWarningBorderHover: warningColors[4],\n    colorWarningHover: warningColors[4],\n    colorWarning: warningColors[6],\n    colorWarningActive: warningColors[7],\n    colorWarningTextHover: warningColors[8],\n    colorWarningText: warningColors[9],\n    colorWarningTextActive: warningColors[10],\n    colorInfoBg: infoColors[1],\n    colorInfoBgHover: infoColors[2],\n    colorInfoBorder: infoColors[3],\n    colorInfoBorderHover: infoColors[4],\n    colorInfoHover: infoColors[4],\n    colorInfo: infoColors[6],\n    colorInfoActive: infoColors[7],\n    colorInfoTextHover: infoColors[8],\n    colorInfoText: infoColors[9],\n    colorInfoTextActive: infoColors[10],\n    colorBgMask: new TinyColor('#000').setAlpha(0.45).toRgbString(),\n    colorWhite: '#fff'\n  });\n}"]},"metadata":{},"sourceType":"module"}