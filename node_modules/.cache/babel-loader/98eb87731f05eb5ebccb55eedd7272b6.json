{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport warning from '../../../_util/warning';\nimport { getColumnKey, getColumnPos, renderColumnTitle } from '../../util';\nimport FilterDropdown from './FilterDropdown';\n\nfunction collectFilterStates(columns, init, pos) {\n  let filterStates = [];\n  (columns || []).forEach((column, index) => {\n    var _a;\n\n    const columnPos = getColumnPos(index, pos);\n\n    if (column.filters || 'filterDropdown' in column || 'onFilter' in column) {\n      if ('filteredValue' in column) {\n        // Controlled\n        let filteredValues = column.filteredValue;\n\n        if (!('filterDropdown' in column)) {\n          filteredValues = (_a = filteredValues === null || filteredValues === void 0 ? void 0 : filteredValues.map(String)) !== null && _a !== void 0 ? _a : filteredValues;\n        }\n\n        filterStates.push({\n          column,\n          key: getColumnKey(column, columnPos),\n          filteredKeys: filteredValues,\n          forceFiltered: column.filtered\n        });\n      } else {\n        // Uncontrolled\n        filterStates.push({\n          column,\n          key: getColumnKey(column, columnPos),\n          filteredKeys: init && column.defaultFilteredValue ? column.defaultFilteredValue : undefined,\n          forceFiltered: column.filtered\n        });\n      }\n    }\n\n    if ('children' in column) {\n      filterStates = [].concat(_toConsumableArray(filterStates), _toConsumableArray(collectFilterStates(column.children, init, columnPos)));\n    }\n  });\n  return filterStates;\n}\n\nfunction injectFilter(prefixCls, dropdownPrefixCls, columns, filterStates, locale, triggerFilter, getPopupContainer, pos) {\n  return columns.map((column, index) => {\n    const columnPos = getColumnPos(index, pos);\n    const {\n      filterMultiple = true,\n      filterMode,\n      filterSearch\n    } = column;\n    let newColumn = column;\n\n    if (newColumn.filters || newColumn.filterDropdown) {\n      const columnKey = getColumnKey(newColumn, columnPos);\n      const filterState = filterStates.find(_ref => {\n        let {\n          key\n        } = _ref;\n        return columnKey === key;\n      });\n      newColumn = Object.assign(Object.assign({}, newColumn), {\n        title: renderProps => /*#__PURE__*/React.createElement(FilterDropdown, {\n          tablePrefixCls: prefixCls,\n          prefixCls: `${prefixCls}-filter`,\n          dropdownPrefixCls: dropdownPrefixCls,\n          column: newColumn,\n          columnKey: columnKey,\n          filterState: filterState,\n          filterMultiple: filterMultiple,\n          filterMode: filterMode,\n          filterSearch: filterSearch,\n          triggerFilter: triggerFilter,\n          locale: locale,\n          getPopupContainer: getPopupContainer\n        }, renderColumnTitle(column.title, renderProps))\n      });\n    }\n\n    if ('children' in newColumn) {\n      newColumn = Object.assign(Object.assign({}, newColumn), {\n        children: injectFilter(prefixCls, dropdownPrefixCls, newColumn.children, filterStates, locale, triggerFilter, getPopupContainer, columnPos)\n      });\n    }\n\n    return newColumn;\n  });\n}\n\nexport function flattenKeys(filters) {\n  let keys = [];\n  (filters || []).forEach(_ref2 => {\n    let {\n      value,\n      children\n    } = _ref2;\n    keys.push(value);\n\n    if (children) {\n      keys = [].concat(_toConsumableArray(keys), _toConsumableArray(flattenKeys(children)));\n    }\n  });\n  return keys;\n}\n\nfunction generateFilterInfo(filterStates) {\n  const currentFilters = {};\n  filterStates.forEach(_ref3 => {\n    let {\n      key,\n      filteredKeys,\n      column\n    } = _ref3;\n    const {\n      filters,\n      filterDropdown\n    } = column;\n\n    if (filterDropdown) {\n      currentFilters[key] = filteredKeys || null;\n    } else if (Array.isArray(filteredKeys)) {\n      const keys = flattenKeys(filters);\n      currentFilters[key] = keys.filter(originKey => filteredKeys.includes(String(originKey)));\n    } else {\n      currentFilters[key] = null;\n    }\n  });\n  return currentFilters;\n}\n\nexport function getFilterData(data, filterStates) {\n  return filterStates.reduce((currentData, filterState) => {\n    const {\n      column: {\n        onFilter,\n        filters\n      },\n      filteredKeys\n    } = filterState;\n\n    if (onFilter && filteredKeys && filteredKeys.length) {\n      return currentData.filter(record => filteredKeys.some(key => {\n        const keys = flattenKeys(filters);\n        const keyIndex = keys.findIndex(k => String(k) === String(key));\n        const realKey = keyIndex !== -1 ? keys[keyIndex] : key;\n        return onFilter(realKey, record);\n      }));\n    }\n\n    return currentData;\n  }, data);\n}\n\nconst getMergedColumns = rawMergedColumns => rawMergedColumns.flatMap(column => {\n  if ('children' in column) {\n    return [column].concat(_toConsumableArray(getMergedColumns(column.children || [])));\n  }\n\n  return [column];\n});\n\nfunction useFilter(_ref4) {\n  let {\n    prefixCls,\n    dropdownPrefixCls,\n    mergedColumns: rawMergedColumns,\n    onFilterChange,\n    getPopupContainer,\n    locale: tableLocale\n  } = _ref4;\n  const mergedColumns = React.useMemo(() => getMergedColumns(rawMergedColumns || []), [rawMergedColumns]);\n  const [filterStates, setFilterStates] = React.useState(() => collectFilterStates(mergedColumns, true));\n  const mergedFilterStates = React.useMemo(() => {\n    const collectedStates = collectFilterStates(mergedColumns, false);\n\n    if (collectedStates.length === 0) {\n      return collectedStates;\n    }\n\n    let filteredKeysIsAllNotControlled = true;\n    let filteredKeysIsAllControlled = true;\n    collectedStates.forEach(_ref5 => {\n      let {\n        filteredKeys\n      } = _ref5;\n\n      if (filteredKeys !== undefined) {\n        filteredKeysIsAllNotControlled = false;\n      } else {\n        filteredKeysIsAllControlled = false;\n      }\n    }); // Return if not controlled\n\n    if (filteredKeysIsAllNotControlled) {\n      // Filter column may have been removed\n      const keyList = (mergedColumns || []).map((column, index) => getColumnKey(column, getColumnPos(index)));\n      return filterStates.filter(_ref6 => {\n        let {\n          key\n        } = _ref6;\n        return keyList.includes(key);\n      }).map(item => {\n        const col = mergedColumns[keyList.findIndex(key => key === item.key)];\n        return Object.assign(Object.assign({}, item), {\n          column: Object.assign(Object.assign({}, item.column), col),\n          forceFiltered: col.filtered\n        });\n      });\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(filteredKeysIsAllControlled, 'Table', 'Columns should all contain `filteredValue` or not contain `filteredValue`.') : void 0;\n    return collectedStates;\n  }, [mergedColumns, filterStates]);\n  const filters = React.useMemo(() => generateFilterInfo(mergedFilterStates), [mergedFilterStates]);\n\n  const triggerFilter = filterState => {\n    const newFilterStates = mergedFilterStates.filter(_ref7 => {\n      let {\n        key\n      } = _ref7;\n      return key !== filterState.key;\n    });\n    newFilterStates.push(filterState);\n    setFilterStates(newFilterStates);\n    onFilterChange(generateFilterInfo(newFilterStates), newFilterStates);\n  };\n\n  const transformColumns = innerColumns => injectFilter(prefixCls, dropdownPrefixCls, innerColumns, mergedFilterStates, tableLocale, triggerFilter, getPopupContainer);\n\n  return [transformColumns, mergedFilterStates, filters];\n}\n\nexport default useFilter;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/table/hooks/useFilter/index.js"],"names":["_toConsumableArray","React","warning","getColumnKey","getColumnPos","renderColumnTitle","FilterDropdown","collectFilterStates","columns","init","pos","filterStates","forEach","column","index","_a","columnPos","filters","filteredValues","filteredValue","map","String","push","key","filteredKeys","forceFiltered","filtered","defaultFilteredValue","undefined","concat","children","injectFilter","prefixCls","dropdownPrefixCls","locale","triggerFilter","getPopupContainer","filterMultiple","filterMode","filterSearch","newColumn","filterDropdown","columnKey","filterState","find","_ref","Object","assign","title","renderProps","createElement","tablePrefixCls","flattenKeys","keys","_ref2","value","generateFilterInfo","currentFilters","_ref3","Array","isArray","filter","originKey","includes","getFilterData","data","reduce","currentData","onFilter","length","record","some","keyIndex","findIndex","k","realKey","getMergedColumns","rawMergedColumns","flatMap","useFilter","_ref4","mergedColumns","onFilterChange","tableLocale","useMemo","setFilterStates","useState","mergedFilterStates","collectedStates","filteredKeysIsAllNotControlled","filteredKeysIsAllControlled","_ref5","keyList","_ref6","item","col","process","env","NODE_ENV","newFilterStates","_ref7","transformColumns","innerColumns"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport warning from '../../../_util/warning';\nimport { getColumnKey, getColumnPos, renderColumnTitle } from '../../util';\nimport FilterDropdown from './FilterDropdown';\nfunction collectFilterStates(columns, init, pos) {\n  let filterStates = [];\n  (columns || []).forEach((column, index) => {\n    var _a;\n    const columnPos = getColumnPos(index, pos);\n    if (column.filters || 'filterDropdown' in column || 'onFilter' in column) {\n      if ('filteredValue' in column) {\n        // Controlled\n        let filteredValues = column.filteredValue;\n        if (!('filterDropdown' in column)) {\n          filteredValues = (_a = filteredValues === null || filteredValues === void 0 ? void 0 : filteredValues.map(String)) !== null && _a !== void 0 ? _a : filteredValues;\n        }\n        filterStates.push({\n          column,\n          key: getColumnKey(column, columnPos),\n          filteredKeys: filteredValues,\n          forceFiltered: column.filtered\n        });\n      } else {\n        // Uncontrolled\n        filterStates.push({\n          column,\n          key: getColumnKey(column, columnPos),\n          filteredKeys: init && column.defaultFilteredValue ? column.defaultFilteredValue : undefined,\n          forceFiltered: column.filtered\n        });\n      }\n    }\n    if ('children' in column) {\n      filterStates = [].concat(_toConsumableArray(filterStates), _toConsumableArray(collectFilterStates(column.children, init, columnPos)));\n    }\n  });\n  return filterStates;\n}\nfunction injectFilter(prefixCls, dropdownPrefixCls, columns, filterStates, locale, triggerFilter, getPopupContainer, pos) {\n  return columns.map((column, index) => {\n    const columnPos = getColumnPos(index, pos);\n    const {\n      filterMultiple = true,\n      filterMode,\n      filterSearch\n    } = column;\n    let newColumn = column;\n    if (newColumn.filters || newColumn.filterDropdown) {\n      const columnKey = getColumnKey(newColumn, columnPos);\n      const filterState = filterStates.find(_ref => {\n        let {\n          key\n        } = _ref;\n        return columnKey === key;\n      });\n      newColumn = Object.assign(Object.assign({}, newColumn), {\n        title: renderProps => /*#__PURE__*/React.createElement(FilterDropdown, {\n          tablePrefixCls: prefixCls,\n          prefixCls: `${prefixCls}-filter`,\n          dropdownPrefixCls: dropdownPrefixCls,\n          column: newColumn,\n          columnKey: columnKey,\n          filterState: filterState,\n          filterMultiple: filterMultiple,\n          filterMode: filterMode,\n          filterSearch: filterSearch,\n          triggerFilter: triggerFilter,\n          locale: locale,\n          getPopupContainer: getPopupContainer\n        }, renderColumnTitle(column.title, renderProps))\n      });\n    }\n    if ('children' in newColumn) {\n      newColumn = Object.assign(Object.assign({}, newColumn), {\n        children: injectFilter(prefixCls, dropdownPrefixCls, newColumn.children, filterStates, locale, triggerFilter, getPopupContainer, columnPos)\n      });\n    }\n    return newColumn;\n  });\n}\nexport function flattenKeys(filters) {\n  let keys = [];\n  (filters || []).forEach(_ref2 => {\n    let {\n      value,\n      children\n    } = _ref2;\n    keys.push(value);\n    if (children) {\n      keys = [].concat(_toConsumableArray(keys), _toConsumableArray(flattenKeys(children)));\n    }\n  });\n  return keys;\n}\nfunction generateFilterInfo(filterStates) {\n  const currentFilters = {};\n  filterStates.forEach(_ref3 => {\n    let {\n      key,\n      filteredKeys,\n      column\n    } = _ref3;\n    const {\n      filters,\n      filterDropdown\n    } = column;\n    if (filterDropdown) {\n      currentFilters[key] = filteredKeys || null;\n    } else if (Array.isArray(filteredKeys)) {\n      const keys = flattenKeys(filters);\n      currentFilters[key] = keys.filter(originKey => filteredKeys.includes(String(originKey)));\n    } else {\n      currentFilters[key] = null;\n    }\n  });\n  return currentFilters;\n}\nexport function getFilterData(data, filterStates) {\n  return filterStates.reduce((currentData, filterState) => {\n    const {\n      column: {\n        onFilter,\n        filters\n      },\n      filteredKeys\n    } = filterState;\n    if (onFilter && filteredKeys && filteredKeys.length) {\n      return currentData.filter(record => filteredKeys.some(key => {\n        const keys = flattenKeys(filters);\n        const keyIndex = keys.findIndex(k => String(k) === String(key));\n        const realKey = keyIndex !== -1 ? keys[keyIndex] : key;\n        return onFilter(realKey, record);\n      }));\n    }\n    return currentData;\n  }, data);\n}\nconst getMergedColumns = rawMergedColumns => rawMergedColumns.flatMap(column => {\n  if ('children' in column) {\n    return [column].concat(_toConsumableArray(getMergedColumns(column.children || [])));\n  }\n  return [column];\n});\nfunction useFilter(_ref4) {\n  let {\n    prefixCls,\n    dropdownPrefixCls,\n    mergedColumns: rawMergedColumns,\n    onFilterChange,\n    getPopupContainer,\n    locale: tableLocale\n  } = _ref4;\n  const mergedColumns = React.useMemo(() => getMergedColumns(rawMergedColumns || []), [rawMergedColumns]);\n  const [filterStates, setFilterStates] = React.useState(() => collectFilterStates(mergedColumns, true));\n  const mergedFilterStates = React.useMemo(() => {\n    const collectedStates = collectFilterStates(mergedColumns, false);\n    if (collectedStates.length === 0) {\n      return collectedStates;\n    }\n    let filteredKeysIsAllNotControlled = true;\n    let filteredKeysIsAllControlled = true;\n    collectedStates.forEach(_ref5 => {\n      let {\n        filteredKeys\n      } = _ref5;\n      if (filteredKeys !== undefined) {\n        filteredKeysIsAllNotControlled = false;\n      } else {\n        filteredKeysIsAllControlled = false;\n      }\n    });\n    // Return if not controlled\n    if (filteredKeysIsAllNotControlled) {\n      // Filter column may have been removed\n      const keyList = (mergedColumns || []).map((column, index) => getColumnKey(column, getColumnPos(index)));\n      return filterStates.filter(_ref6 => {\n        let {\n          key\n        } = _ref6;\n        return keyList.includes(key);\n      }).map(item => {\n        const col = mergedColumns[keyList.findIndex(key => key === item.key)];\n        return Object.assign(Object.assign({}, item), {\n          column: Object.assign(Object.assign({}, item.column), col),\n          forceFiltered: col.filtered\n        });\n      });\n    }\n    process.env.NODE_ENV !== \"production\" ? warning(filteredKeysIsAllControlled, 'Table', 'Columns should all contain `filteredValue` or not contain `filteredValue`.') : void 0;\n    return collectedStates;\n  }, [mergedColumns, filterStates]);\n  const filters = React.useMemo(() => generateFilterInfo(mergedFilterStates), [mergedFilterStates]);\n  const triggerFilter = filterState => {\n    const newFilterStates = mergedFilterStates.filter(_ref7 => {\n      let {\n        key\n      } = _ref7;\n      return key !== filterState.key;\n    });\n    newFilterStates.push(filterState);\n    setFilterStates(newFilterStates);\n    onFilterChange(generateFilterInfo(newFilterStates), newFilterStates);\n  };\n  const transformColumns = innerColumns => injectFilter(prefixCls, dropdownPrefixCls, innerColumns, mergedFilterStates, tableLocale, triggerFilter, getPopupContainer);\n  return [transformColumns, mergedFilterStates, filters];\n}\nexport default useFilter;"]},"metadata":{},"sourceType":"module"}