{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { compute as e } from \"compute-scroll-into-view\";\n\nvar o = function o(e) {\n  return !1 === e ? {\n    block: \"end\",\n    inline: \"nearest\"\n  } : function (e) {\n    return e === Object(e) && 0 !== Object.keys(e).length;\n  }(e) ? e : {\n    block: \"start\",\n    inline: \"nearest\"\n  };\n};\n\nfunction t(t, n) {\n  if (!t.isConnected || !function (e) {\n    var o = e;\n\n    for (; o && o.parentNode;) {\n      if (o.parentNode === document) return !0;\n      o = o.parentNode instanceof ShadowRoot ? o.parentNode.host : o.parentNode;\n    }\n\n    return !1;\n  }(t)) return;\n  if (function (e) {\n    return \"object\" == typeof e && \"function\" == typeof e.behavior;\n  }(n)) return n.behavior(e(t, n));\n  var r = \"boolean\" == typeof n || null == n ? void 0 : n.behavior;\n\n  var _iterator = _createForOfIteratorHelper(e(t, o(n))),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _step.value,\n          i = _step$value.el,\n          a = _step$value.top,\n          l = _step$value.left;\n      i.scroll({\n        top: a,\n        left: l,\n        behavior: r\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nexport { t as default };","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/scroll-into-view-if-needed/src/index.ts"],"names":["options","Object","keys","length","behavior","getOptions","block","inline","element","currentElement","parentNode","document","ShadowRoot","host","scrollIntoView","target","isConnected","compute","el","top","left","scroll"],"mappings":";;;AAgDA,IAUMK,CAAAA,GAAcL,SAAdK,CAAcL,CAAAA,CAAAA;AAAAA,SAAAA,CAEF,CAFEA,KAEdA,CAFcA,GAGT;AAAEM,IAAAA,KAAAA,EAAO,KAAT;AAAgBC,IAAAA,MAAAA,EAAQ;AAAxB,GAHSP,GATlBA,UAAAA,CAAAA;AAAAA,WAEAA,CAAAA,KAAYC,MAAAA,CAAOD,CAAPC,CAAZD,IAA+D,MAAhCC,MAAAA,CAAOC,IAAPD,CAAYD,CAAZC,EAAqBE,MAFpDH;AAAAA,GAAAA,CAe6BA,CAf7BA,IAiBSA,CAjBTA,GAqBO;AAAEM,IAAAA,KAAAA,EAAO,OAAT;AAAkBC,IAAAA,MAAAA,EAAQ;AAA1B,GAZWP;AAAAA,CAVpB;;AAwEA,SAASc,CAAT,CACEC,CADF,EAEEf,CAFF,EAEEA;AAGA,MAAA,CAAKe,CAAAA,CAAOC,WAAZ,IAAYA,CAjDQR,UAAAA,CAAAA,EAAAA;AACpB,QAAIC,CAAAA,GAAiBD,CAArB;;AACO,WAAA,CAAA,IAAkBC,CAAAA,CAAeC,UAAjC,GAA6C;AAC9C,UAAA,CAAA,CAAeA,UAAf,KAA8BC,QAA9B,EACK,OAAA,CAAA,CAAA;AAEPF,MAAAA,CAAAA,GADSA,CAAAA,CAAeC,UAAfD,YAAqCG,UAArCH,GACSA,CAAAA,CAAeC,UAAfD,CAAyCI,IADlDJ,GAGQA,CAAAA,CAAeC,UAFhCD;AAKG;;AAAA,WAAA,CAAA,CAAA;AAAA,GAXaD,CAiDqBO,CAjDrBP,CAiDpB,EACE;AAGE,MA3EJR,UAAAA,CAAAA;AAAAA,WAEmB,YAAA,OAAZA,CAAY,IAAuC,cAAA,OAArBA,CAAAA,CAAQI,QAF7CJ;AAAAA,GAAAA,CA2E8BA,CA3E9BA,CA2EI,EACF,OAAOA,CAAAA,CAAQI,QAARJ,CAAiBiB,CAAAA,CAAQF,CAARE,EAAgBjB,CAAhBiB,CAAjBjB,CAAP;AAGF,MAAMI,CAAAA,GAA8B,aAAA,OAAZJ,CAAY,IAAiC,QAATA,CAAxB,GAAwBA,KAAZ,CAAZ,GAAiC,CAAA,CAAA,QAArE;;AAXAA,6CAagCiB,CAAAA,CAAQF,CAARE,EAAgBZ,CAAAA,CAAWL,CAAXK,CAAhBY,CAbhCjB;AAAAA;;AAAAA;AAaW;AAAA;AAAA,UAAEkB,CAAF,eAAA,EAAA;AAAA,UAAMC,CAAN,eAAMA,GAAN;AAAA,UAAWC,CAAX,eAAMD,IAAN;AACTD,MAAAA,CAAAA,CAAGG,MAAHH,CAAU;AAAEC,QAAAA,GAAAA,EAAAA,CAAF;AAAOC,QAAAA,IAAAA,EAAAA,CAAP;AAAahB,QAAAA,QAAAA,EAAAA;AAAb,OAAVc;AADS;AAbXlB;AAAAA;AAAAA;AAAAA;AAAAA;AAgBF;;AAAA,SAAA,CAAA,IAAA,OAAA","sourcesContent":["import { compute } from 'compute-scroll-into-view'\nimport type {\n  Options as BaseOptions,\n  ScrollAction,\n} from 'compute-scroll-into-view'\n\n/** @public */\nexport type Options<T = unknown> =\n  | StandardBehaviorOptions\n  | CustomBehaviorOptions<T>\n\n/**\n * Only scrolls if the `node` is partially out of view:\n * ```ts\n * scrollIntoView(node, { scrollMode: 'if-needed' })\n * ```\n * Skips scrolling `overflow: hidden` elements:\n * ```ts\n * scrollIntoView(node, { skipOverflowHiddenElements: true })\n * ```\n * When scrolling is needed do the least and smoothest scrolling possible:\n * ```ts\n * scrollIntoView(node, {\n *   behavior: 'smooth',\n *   scrollMode: 'if-needed',\n *   block: 'nearest',\n *   inline: 'nearest',\n * })\n * ```\n * @public\n */\nexport interface StandardBehaviorOptions extends BaseOptions {\n  /**\n   * @defaultValue 'auto\n   */\n  behavior?: ScrollBehavior\n}\n\n/** @public */\nexport interface CustomBehaviorOptions<T = unknown> extends BaseOptions {\n  behavior: CustomScrollBehaviorCallback<T>\n}\n\n/** @public */\nexport type CustomScrollBehaviorCallback<T = unknown> = (\n  actions: ScrollAction[]\n) => T\n\nconst isStandardScrollBehavior = (\n  options: any\n): options is StandardBehaviorOptions =>\n  options === Object(options) && Object.keys(options).length !== 0\n\nconst isCustomScrollBehavior = <T = unknown>(\n  options: any\n): options is CustomBehaviorOptions<T> =>\n  typeof options === 'object' ? typeof options.behavior === 'function' : false\n\nconst getOptions = (options: any): StandardBehaviorOptions => {\n  // Handle alignToTop for legacy reasons, to be compatible with the spec\n  if (options === false) {\n    return { block: 'end', inline: 'nearest' }\n  }\n\n  if (isStandardScrollBehavior(options)) {\n    // compute.ts ensures the defaults are block: 'center' and inline: 'nearest', to conform to the spec\n    return options\n  }\n\n  // if options = {}, options = true or options = null, based on w3c web platform test\n  return { block: 'start', inline: 'nearest' }\n}\n\n// Determine if the element is part of the document (including shadow dom)\n// Derived from code of Andy Desmarais\n// https://terodox.tech/how-to-tell-if-an-element-is-in-the-dom-including-the-shadow-dom/\nconst isInDocument = (element: Node) => {\n  let currentElement = element\n  while (currentElement && currentElement.parentNode) {\n    if (currentElement.parentNode === document) {\n      return true\n    } else if (currentElement.parentNode instanceof ShadowRoot) {\n      currentElement = (currentElement.parentNode as ShadowRoot).host\n    } else {\n      currentElement = currentElement.parentNode\n    }\n  }\n  return false\n}\n\n/**\n * Scrolls the given element into view, with options for when, and how.\n * Supports the same `options` as [`Element.prototype.scrollIntoView`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView) with additions such as `scrollMode`, `behavior: Function` and `skipOverflowHiddenElements`.\n * @public\n */\nfunction scrollIntoView(\n  target: Element,\n  options?: StandardBehaviorOptions | boolean\n): void\n/**\n * Scrolls the given element into view, with options for when, and how.\n * Supports the same `options` as [`Element.prototype.scrollIntoView`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView) with additions such as `scrollMode`, `behavior: Function` and `skipOverflowHiddenElements`.\n *\n * You can set the expected return type for `behavior: Function`:\n * ```ts\n * await scrollIntoView<Promise<boolean[]>>(node, {\n *   behavior: async actions => {\n *     return Promise.all(actions.map(\n *       // animate() resolves to `true` if anything was animated, `false` if the element already were in the end state\n *       ({ el, left, top }) => animate(el, {scroll: {left, top}})\n *     ))\n *   }\n * })\n * ```\n * @public\n */\nfunction scrollIntoView<T>(\n  target: Element,\n  options: CustomBehaviorOptions<T>\n): T\nfunction scrollIntoView<T = unknown>(\n  target: Element,\n  options?: StandardBehaviorOptions | CustomBehaviorOptions<T> | boolean\n): T | void {\n  // Browsers treats targets that aren't in the dom as a no-op and so should we\n  if (!target.isConnected || !isInDocument(target)) {\n    return\n  }\n\n  if (isCustomScrollBehavior<T>(options)) {\n    return options.behavior(compute(target, options))\n  }\n\n  const behavior = typeof options === 'boolean' ? undefined : options?.behavior\n\n  for (const { el, top, left } of compute(target, getOptions(options))) {\n    el.scroll({ top, left, behavior })\n  }\n}\n\nexport default scrollIntoView\n"]},"metadata":{},"sourceType":"module"}