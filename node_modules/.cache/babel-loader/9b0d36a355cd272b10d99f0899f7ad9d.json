{"ast":null,"code":"import { responseImmutable, useContext } from '@rc-component/context';\nimport * as React from 'react';\nimport TableContext from \"../context/TableContext\";\nimport devRenderTimes from \"../hooks/useRenderTimes\";\nimport HeaderRow from \"./HeaderRow\";\n\nfunction parseHeaderRows(rootColumns) {\n  var rows = [];\n\n  function fillRowCells(columns, colIndex) {\n    var rowIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0; // Init rows\n\n    rows[rowIndex] = rows[rowIndex] || [];\n    var currentColIndex = colIndex;\n    var colSpans = columns.filter(Boolean).map(function (column) {\n      var cell = {\n        key: column.key,\n        className: column.className || '',\n        children: column.title,\n        column: column,\n        colStart: currentColIndex\n      };\n      var colSpan = 1;\n      var subColumns = column.children;\n\n      if (subColumns && subColumns.length > 0) {\n        colSpan = fillRowCells(subColumns, currentColIndex, rowIndex + 1).reduce(function (total, count) {\n          return total + count;\n        }, 0);\n        cell.hasSubColumns = true;\n      }\n\n      if ('colSpan' in column) {\n        colSpan = column.colSpan;\n      }\n\n      if ('rowSpan' in column) {\n        cell.rowSpan = column.rowSpan;\n      }\n\n      cell.colSpan = colSpan;\n      cell.colEnd = cell.colStart + colSpan - 1;\n      rows[rowIndex].push(cell);\n      currentColIndex += colSpan;\n      return colSpan;\n    });\n    return colSpans;\n  } // Generate `rows` cell data\n\n\n  fillRowCells(rootColumns, 0); // Handle `rowSpan`\n\n  var rowCount = rows.length;\n\n  var _loop = function _loop(rowIndex) {\n    rows[rowIndex].forEach(function (cell) {\n      if (!('rowSpan' in cell) && !cell.hasSubColumns) {\n        // eslint-disable-next-line no-param-reassign\n        cell.rowSpan = rowCount - rowIndex;\n      }\n    });\n  };\n\n  for (var rowIndex = 0; rowIndex < rowCount; rowIndex += 1) {\n    _loop(rowIndex);\n  }\n\n  return rows;\n}\n\nfunction Header(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    devRenderTimes(props);\n  }\n\n  var stickyOffsets = props.stickyOffsets,\n      columns = props.columns,\n      flattenColumns = props.flattenColumns,\n      onHeaderRow = props.onHeaderRow;\n\n  var _useContext = useContext(TableContext, ['prefixCls', 'getComponent']),\n      prefixCls = _useContext.prefixCls,\n      getComponent = _useContext.getComponent;\n\n  var rows = React.useMemo(function () {\n    return parseHeaderRows(columns);\n  }, [columns]);\n  var WrapperComponent = getComponent(['header', 'wrapper'], 'thead');\n  var trComponent = getComponent(['header', 'row'], 'tr');\n  var thComponent = getComponent(['header', 'cell'], 'th');\n  var tdComponent = getComponent(['header', 'cell'], 'td');\n  return /*#__PURE__*/React.createElement(WrapperComponent, {\n    className: \"\".concat(prefixCls, \"-thead\")\n  }, rows.map(function (row, rowIndex) {\n    var rowNode = /*#__PURE__*/React.createElement(HeaderRow, {\n      key: rowIndex,\n      flattenColumns: flattenColumns,\n      cells: row,\n      stickyOffsets: stickyOffsets,\n      rowComponent: trComponent,\n      cellComponent: thComponent,\n      tdCellComponent: tdComponent,\n      onHeaderRow: onHeaderRow,\n      index: rowIndex\n    });\n    return rowNode;\n  }));\n}\n\nexport default responseImmutable(Header);","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/rc-table/es/Header/Header.js"],"names":["responseImmutable","useContext","React","TableContext","devRenderTimes","HeaderRow","parseHeaderRows","rootColumns","rows","fillRowCells","columns","colIndex","rowIndex","arguments","length","undefined","currentColIndex","colSpans","filter","Boolean","map","column","cell","key","className","children","title","colStart","colSpan","subColumns","reduce","total","count","hasSubColumns","rowSpan","colEnd","push","rowCount","_loop","forEach","Header","props","process","env","NODE_ENV","stickyOffsets","flattenColumns","onHeaderRow","_useContext","prefixCls","getComponent","useMemo","WrapperComponent","trComponent","thComponent","tdComponent","createElement","concat","row","rowNode","cells","rowComponent","cellComponent","tdCellComponent","index"],"mappings":"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","sourcesContent":["import { responseImmutable, useContext } from '@rc-component/context';\nimport * as React from 'react';\nimport TableContext from \"../context/TableContext\";\nimport devRenderTimes from \"../hooks/useRenderTimes\";\nimport HeaderRow from \"./HeaderRow\";\nfunction parseHeaderRows(rootColumns) {\n  var rows = [];\n  function fillRowCells(columns, colIndex) {\n    var rowIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    // Init rows\n    rows[rowIndex] = rows[rowIndex] || [];\n    var currentColIndex = colIndex;\n    var colSpans = columns.filter(Boolean).map(function (column) {\n      var cell = {\n        key: column.key,\n        className: column.className || '',\n        children: column.title,\n        column: column,\n        colStart: currentColIndex\n      };\n      var colSpan = 1;\n      var subColumns = column.children;\n      if (subColumns && subColumns.length > 0) {\n        colSpan = fillRowCells(subColumns, currentColIndex, rowIndex + 1).reduce(function (total, count) {\n          return total + count;\n        }, 0);\n        cell.hasSubColumns = true;\n      }\n      if ('colSpan' in column) {\n        colSpan = column.colSpan;\n      }\n      if ('rowSpan' in column) {\n        cell.rowSpan = column.rowSpan;\n      }\n      cell.colSpan = colSpan;\n      cell.colEnd = cell.colStart + colSpan - 1;\n      rows[rowIndex].push(cell);\n      currentColIndex += colSpan;\n      return colSpan;\n    });\n    return colSpans;\n  }\n\n  // Generate `rows` cell data\n  fillRowCells(rootColumns, 0);\n\n  // Handle `rowSpan`\n  var rowCount = rows.length;\n  var _loop = function _loop(rowIndex) {\n    rows[rowIndex].forEach(function (cell) {\n      if (!('rowSpan' in cell) && !cell.hasSubColumns) {\n        // eslint-disable-next-line no-param-reassign\n        cell.rowSpan = rowCount - rowIndex;\n      }\n    });\n  };\n  for (var rowIndex = 0; rowIndex < rowCount; rowIndex += 1) {\n    _loop(rowIndex);\n  }\n  return rows;\n}\nfunction Header(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    devRenderTimes(props);\n  }\n  var stickyOffsets = props.stickyOffsets,\n    columns = props.columns,\n    flattenColumns = props.flattenColumns,\n    onHeaderRow = props.onHeaderRow;\n  var _useContext = useContext(TableContext, ['prefixCls', 'getComponent']),\n    prefixCls = _useContext.prefixCls,\n    getComponent = _useContext.getComponent;\n  var rows = React.useMemo(function () {\n    return parseHeaderRows(columns);\n  }, [columns]);\n  var WrapperComponent = getComponent(['header', 'wrapper'], 'thead');\n  var trComponent = getComponent(['header', 'row'], 'tr');\n  var thComponent = getComponent(['header', 'cell'], 'th');\n  var tdComponent = getComponent(['header', 'cell'], 'td');\n  return /*#__PURE__*/React.createElement(WrapperComponent, {\n    className: \"\".concat(prefixCls, \"-thead\")\n  }, rows.map(function (row, rowIndex) {\n    var rowNode = /*#__PURE__*/React.createElement(HeaderRow, {\n      key: rowIndex,\n      flattenColumns: flattenColumns,\n      cells: row,\n      stickyOffsets: stickyOffsets,\n      rowComponent: trComponent,\n      cellComponent: thComponent,\n      tdCellComponent: tdComponent,\n      onHeaderRow: onHeaderRow,\n      index: rowIndex\n    });\n    return rowNode;\n  }));\n}\nexport default responseImmutable(Header);"]},"metadata":{},"sourceType":"module"}