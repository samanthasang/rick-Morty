{"ast":null,"code":"import addEventListener from \"rc-util/es/Dom/addEventListener\";\nexport function getTargetRect(target) {\n  return target !== window ? target.getBoundingClientRect() : {\n    top: 0,\n    bottom: window.innerHeight\n  };\n}\nexport function getFixedTop(placeholderRect, targetRect, offsetTop) {\n  if (offsetTop !== undefined && targetRect.top > placeholderRect.top - offsetTop) {\n    return offsetTop + targetRect.top;\n  }\n\n  return undefined;\n}\nexport function getFixedBottom(placeholderRect, targetRect, offsetBottom) {\n  if (offsetBottom !== undefined && targetRect.bottom < placeholderRect.bottom + offsetBottom) {\n    const targetBottomOffset = window.innerHeight - targetRect.bottom;\n    return offsetBottom + targetBottomOffset;\n  }\n\n  return undefined;\n} // ======================== Observer ========================\n\nconst TRIGGER_EVENTS = ['resize', 'scroll', 'touchstart', 'touchmove', 'touchend', 'pageshow', 'load'];\nlet observerEntities = [];\nexport function getObserverEntities() {\n  // Only used in test env. Can be removed if refactor.\n  return observerEntities;\n}\nexport function addObserveTarget(target, affix) {\n  if (!target) {\n    return;\n  }\n\n  let entity = observerEntities.find(item => item.target === target);\n\n  if (entity) {\n    entity.affixList.push(affix);\n  } else {\n    entity = {\n      target,\n      affixList: [affix],\n      eventHandlers: {}\n    };\n    observerEntities.push(entity); // Add listener\n\n    TRIGGER_EVENTS.forEach(eventName => {\n      entity.eventHandlers[eventName] = addEventListener(target, eventName, () => {\n        entity.affixList.forEach(targetAffix => {\n          targetAffix.lazyUpdatePosition();\n        });\n      });\n    });\n  }\n}\nexport function removeObserveTarget(affix) {\n  const observerEntity = observerEntities.find(oriObserverEntity => {\n    const hasAffix = oriObserverEntity.affixList.some(item => item === affix);\n\n    if (hasAffix) {\n      oriObserverEntity.affixList = oriObserverEntity.affixList.filter(item => item !== affix);\n    }\n\n    return hasAffix;\n  });\n\n  if (observerEntity && observerEntity.affixList.length === 0) {\n    observerEntities = observerEntities.filter(item => item !== observerEntity); // Remove listener\n\n    TRIGGER_EVENTS.forEach(eventName => {\n      const handler = observerEntity.eventHandlers[eventName];\n\n      if (handler && handler.remove) {\n        handler.remove();\n      }\n    });\n  }\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/affix/utils.js"],"names":["addEventListener","getTargetRect","target","window","getBoundingClientRect","top","bottom","innerHeight","getFixedTop","placeholderRect","targetRect","offsetTop","undefined","getFixedBottom","offsetBottom","targetBottomOffset","TRIGGER_EVENTS","observerEntities","getObserverEntities","addObserveTarget","affix","entity","find","item","affixList","push","eventHandlers","forEach","eventName","targetAffix","lazyUpdatePosition","removeObserveTarget","observerEntity","oriObserverEntity","hasAffix","some","filter","length","handler","remove"],"mappings":"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","sourcesContent":["import addEventListener from \"rc-util/es/Dom/addEventListener\";\nexport function getTargetRect(target) {\n  return target !== window ? target.getBoundingClientRect() : {\n    top: 0,\n    bottom: window.innerHeight\n  };\n}\nexport function getFixedTop(placeholderRect, targetRect, offsetTop) {\n  if (offsetTop !== undefined && targetRect.top > placeholderRect.top - offsetTop) {\n    return offsetTop + targetRect.top;\n  }\n  return undefined;\n}\nexport function getFixedBottom(placeholderRect, targetRect, offsetBottom) {\n  if (offsetBottom !== undefined && targetRect.bottom < placeholderRect.bottom + offsetBottom) {\n    const targetBottomOffset = window.innerHeight - targetRect.bottom;\n    return offsetBottom + targetBottomOffset;\n  }\n  return undefined;\n}\n// ======================== Observer ========================\nconst TRIGGER_EVENTS = ['resize', 'scroll', 'touchstart', 'touchmove', 'touchend', 'pageshow', 'load'];\nlet observerEntities = [];\nexport function getObserverEntities() {\n  // Only used in test env. Can be removed if refactor.\n  return observerEntities;\n}\nexport function addObserveTarget(target, affix) {\n  if (!target) {\n    return;\n  }\n  let entity = observerEntities.find(item => item.target === target);\n  if (entity) {\n    entity.affixList.push(affix);\n  } else {\n    entity = {\n      target,\n      affixList: [affix],\n      eventHandlers: {}\n    };\n    observerEntities.push(entity);\n    // Add listener\n    TRIGGER_EVENTS.forEach(eventName => {\n      entity.eventHandlers[eventName] = addEventListener(target, eventName, () => {\n        entity.affixList.forEach(targetAffix => {\n          targetAffix.lazyUpdatePosition();\n        });\n      });\n    });\n  }\n}\nexport function removeObserveTarget(affix) {\n  const observerEntity = observerEntities.find(oriObserverEntity => {\n    const hasAffix = oriObserverEntity.affixList.some(item => item === affix);\n    if (hasAffix) {\n      oriObserverEntity.affixList = oriObserverEntity.affixList.filter(item => item !== affix);\n    }\n    return hasAffix;\n  });\n  if (observerEntity && observerEntity.affixList.length === 0) {\n    observerEntities = observerEntities.filter(item => item !== observerEntity);\n    // Remove listener\n    TRIGGER_EVENTS.forEach(eventName => {\n      const handler = observerEntity.eventHandlers[eventName];\n      if (handler && handler.remove) {\n        handler.remove();\n      }\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}