{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport useEvent from \"./useEvent\";\nimport { useLayoutUpdateEffect } from \"./useLayoutEffect\";\nimport useState from \"./useState\";\n/** We only think `undefined` is empty */\n\nfunction hasValue(value) {\n  return value !== undefined;\n}\n/**\n * Similar to `useState` but will use props value if provided.\n * Note that internal use rc-util `useState` hook.\n */\n\n\nexport default function useMergedState(defaultStateValue, option) {\n  var _ref = option || {},\n      defaultValue = _ref.defaultValue,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      postState = _ref.postState; // ======================= Init =======================\n\n\n  var _useState = useState(function () {\n    if (hasValue(value)) {\n      return value;\n    } else if (hasValue(defaultValue)) {\n      return typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n    } else {\n      return typeof defaultStateValue === 'function' ? defaultStateValue() : defaultStateValue;\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      innerValue = _useState2[0],\n      setInnerValue = _useState2[1];\n\n  var mergedValue = value !== undefined ? value : innerValue;\n  var postMergedValue = postState ? postState(mergedValue) : mergedValue; // ====================== Change ======================\n\n  var onChangeFn = useEvent(onChange);\n\n  var _useState3 = useState([mergedValue]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      prevValue = _useState4[0],\n      setPrevValue = _useState4[1];\n\n  useLayoutUpdateEffect(function () {\n    var prev = prevValue[0];\n\n    if (innerValue !== prev) {\n      onChangeFn(innerValue, prev);\n    }\n  }, [prevValue]); // Sync value back to `undefined` when it from control to un-control\n\n  useLayoutUpdateEffect(function () {\n    if (!hasValue(value)) {\n      setInnerValue(value);\n    }\n  }, [value]); // ====================== Update ======================\n\n  var triggerChange = useEvent(function (updater, ignoreDestroy) {\n    setInnerValue(updater, ignoreDestroy);\n    setPrevValue([mergedValue], ignoreDestroy);\n  });\n  return [postMergedValue, triggerChange];\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/rc-util/es/hooks/useMergedState.js"],"names":["_slicedToArray","useEvent","useLayoutUpdateEffect","useState","hasValue","value","undefined","useMergedState","defaultStateValue","option","_ref","defaultValue","onChange","postState","_useState","_useState2","innerValue","setInnerValue","mergedValue","postMergedValue","onChangeFn","_useState3","_useState4","prevValue","setPrevValue","prev","triggerChange","updater","ignoreDestroy"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,qBAAT,QAAsC,mBAAtC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,SAAOA,KAAK,KAAKC,SAAjB;AACD;AAED;AACA;AACA;AACA;;;AACA,eAAe,SAASC,cAAT,CAAwBC,iBAAxB,EAA2CC,MAA3C,EAAmD;AAChE,MAAIC,IAAI,GAAGD,MAAM,IAAI,EAArB;AAAA,MACEE,YAAY,GAAGD,IAAI,CAACC,YADtB;AAAA,MAEEN,KAAK,GAAGK,IAAI,CAACL,KAFf;AAAA,MAGEO,QAAQ,GAAGF,IAAI,CAACE,QAHlB;AAAA,MAIEC,SAAS,GAAGH,IAAI,CAACG,SAJnB,CADgE,CAOhE;;;AACA,MAAIC,SAAS,GAAGX,QAAQ,CAAC,YAAY;AACjC,QAAIC,QAAQ,CAACC,KAAD,CAAZ,EAAqB;AACnB,aAAOA,KAAP;AACD,KAFD,MAEO,IAAID,QAAQ,CAACO,YAAD,CAAZ,EAA4B;AACjC,aAAO,OAAOA,YAAP,KAAwB,UAAxB,GAAqCA,YAAY,EAAjD,GAAsDA,YAA7D;AACD,KAFM,MAEA;AACL,aAAO,OAAOH,iBAAP,KAA6B,UAA7B,GAA0CA,iBAAiB,EAA3D,GAAgEA,iBAAvE;AACD;AACF,GARqB,CAAxB;AAAA,MASEO,UAAU,GAAGf,cAAc,CAACc,SAAD,EAAY,CAAZ,CAT7B;AAAA,MAUEE,UAAU,GAAGD,UAAU,CAAC,CAAD,CAVzB;AAAA,MAWEE,aAAa,GAAGF,UAAU,CAAC,CAAD,CAX5B;;AAYA,MAAIG,WAAW,GAAGb,KAAK,KAAKC,SAAV,GAAsBD,KAAtB,GAA8BW,UAAhD;AACA,MAAIG,eAAe,GAAGN,SAAS,GAAGA,SAAS,CAACK,WAAD,CAAZ,GAA4BA,WAA3D,CArBgE,CAuBhE;;AACA,MAAIE,UAAU,GAAGnB,QAAQ,CAACW,QAAD,CAAzB;;AACA,MAAIS,UAAU,GAAGlB,QAAQ,CAAC,CAACe,WAAD,CAAD,CAAzB;AAAA,MACEI,UAAU,GAAGtB,cAAc,CAACqB,UAAD,EAAa,CAAb,CAD7B;AAAA,MAEEE,SAAS,GAAGD,UAAU,CAAC,CAAD,CAFxB;AAAA,MAGEE,YAAY,GAAGF,UAAU,CAAC,CAAD,CAH3B;;AAIApB,EAAAA,qBAAqB,CAAC,YAAY;AAChC,QAAIuB,IAAI,GAAGF,SAAS,CAAC,CAAD,CAApB;;AACA,QAAIP,UAAU,KAAKS,IAAnB,EAAyB;AACvBL,MAAAA,UAAU,CAACJ,UAAD,EAAaS,IAAb,CAAV;AACD;AACF,GALoB,EAKlB,CAACF,SAAD,CALkB,CAArB,CA7BgE,CAoChE;;AACArB,EAAAA,qBAAqB,CAAC,YAAY;AAChC,QAAI,CAACE,QAAQ,CAACC,KAAD,CAAb,EAAsB;AACpBY,MAAAA,aAAa,CAACZ,KAAD,CAAb;AACD;AACF,GAJoB,EAIlB,CAACA,KAAD,CAJkB,CAArB,CArCgE,CA2ChE;;AACA,MAAIqB,aAAa,GAAGzB,QAAQ,CAAC,UAAU0B,OAAV,EAAmBC,aAAnB,EAAkC;AAC7DX,IAAAA,aAAa,CAACU,OAAD,EAAUC,aAAV,CAAb;AACAJ,IAAAA,YAAY,CAAC,CAACN,WAAD,CAAD,EAAgBU,aAAhB,CAAZ;AACD,GAH2B,CAA5B;AAIA,SAAO,CAACT,eAAD,EAAkBO,aAAlB,CAAP;AACD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport useEvent from \"./useEvent\";\nimport { useLayoutUpdateEffect } from \"./useLayoutEffect\";\nimport useState from \"./useState\";\n/** We only think `undefined` is empty */\nfunction hasValue(value) {\n  return value !== undefined;\n}\n\n/**\n * Similar to `useState` but will use props value if provided.\n * Note that internal use rc-util `useState` hook.\n */\nexport default function useMergedState(defaultStateValue, option) {\n  var _ref = option || {},\n    defaultValue = _ref.defaultValue,\n    value = _ref.value,\n    onChange = _ref.onChange,\n    postState = _ref.postState;\n\n  // ======================= Init =======================\n  var _useState = useState(function () {\n      if (hasValue(value)) {\n        return value;\n      } else if (hasValue(defaultValue)) {\n        return typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n      } else {\n        return typeof defaultStateValue === 'function' ? defaultStateValue() : defaultStateValue;\n      }\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    innerValue = _useState2[0],\n    setInnerValue = _useState2[1];\n  var mergedValue = value !== undefined ? value : innerValue;\n  var postMergedValue = postState ? postState(mergedValue) : mergedValue;\n\n  // ====================== Change ======================\n  var onChangeFn = useEvent(onChange);\n  var _useState3 = useState([mergedValue]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    prevValue = _useState4[0],\n    setPrevValue = _useState4[1];\n  useLayoutUpdateEffect(function () {\n    var prev = prevValue[0];\n    if (innerValue !== prev) {\n      onChangeFn(innerValue, prev);\n    }\n  }, [prevValue]);\n\n  // Sync value back to `undefined` when it from control to un-control\n  useLayoutUpdateEffect(function () {\n    if (!hasValue(value)) {\n      setInnerValue(value);\n    }\n  }, [value]);\n\n  // ====================== Update ======================\n  var triggerChange = useEvent(function (updater, ignoreDestroy) {\n    setInnerValue(updater, ignoreDestroy);\n    setPrevValue([mergedValue], ignoreDestroy);\n  });\n  return [postMergedValue, triggerChange];\n}"]},"metadata":{},"sourceType":"module"}