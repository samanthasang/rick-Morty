{"ast":null,"code":"import _slicedToArray from \"/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useForm as useRcForm } from 'rc-field-form';\nimport * as React from 'react';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport { getFieldId, toArray } from '../util';\n\nfunction toNamePathStr(name) {\n  var namePath = toArray(name);\n  return namePath.join('_');\n}\n\nexport default function useForm(form) {\n  var _useRcForm = useRcForm(),\n      _useRcForm2 = _slicedToArray(_useRcForm, 1),\n      rcForm = _useRcForm2[0];\n\n  var itemsRef = React.useRef({});\n  var wrapForm = React.useMemo(function () {\n    return form !== null && form !== void 0 ? form : Object.assign(Object.assign({}, rcForm), {\n      __INTERNAL__: {\n        itemRef: function itemRef(name) {\n          return function (node) {\n            var namePathStr = toNamePathStr(name);\n\n            if (node) {\n              itemsRef.current[namePathStr] = node;\n            } else {\n              delete itemsRef.current[namePathStr];\n            }\n          };\n        }\n      },\n      scrollToField: function scrollToField(name) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var namePath = toArray(name);\n        var fieldId = getFieldId(namePath, wrapForm.__INTERNAL__.name);\n        var node = fieldId ? document.getElementById(fieldId) : null;\n\n        if (node) {\n          scrollIntoView(node, Object.assign({\n            scrollMode: 'if-needed',\n            block: 'nearest'\n          }, options));\n        }\n      },\n      getFieldInstance: function getFieldInstance(name) {\n        var namePathStr = toNamePathStr(name);\n        return itemsRef.current[namePathStr];\n      }\n    });\n  }, [form, rcForm]);\n  return [wrapForm];\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/form/hooks/useForm.js"],"names":["useForm","useRcForm","React","scrollIntoView","getFieldId","toArray","toNamePathStr","name","namePath","join","form","rcForm","itemsRef","useRef","wrapForm","useMemo","Object","assign","__INTERNAL__","itemRef","node","namePathStr","current","scrollToField","options","arguments","length","undefined","fieldId","document","getElementById","scrollMode","block","getFieldInstance"],"mappings":";AAAA,SAASA,OAAO,IAAIC,SAApB,QAAqC,eAArC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,SAApC;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,MAAMC,QAAQ,GAAGH,OAAO,CAACE,IAAD,CAAxB;AACA,SAAOC,QAAQ,CAACC,IAAT,CAAc,GAAd,CAAP;AACD;;AACD,eAAe,SAAST,OAAT,CAAiBU,IAAjB,EAAuB;AACpC,mBAAiBT,SAAS,EAA1B;AAAA;AAAA,MAAOU,MAAP;;AACA,MAAMC,QAAQ,GAAGV,KAAK,CAACW,MAAN,CAAa,EAAb,CAAjB;AACA,MAAMC,QAAQ,GAAGZ,KAAK,CAACa,OAAN,CAAc;AAAA,WAAML,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmCA,IAAnC,GAA0CM,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,MAAlB,CAAd,EAAyC;AACtHO,MAAAA,YAAY,EAAE;AACZC,QAAAA,OAAO,EAAE,iBAAAZ,IAAI;AAAA,iBAAI,UAAAa,IAAI,EAAI;AACvB,gBAAMC,WAAW,GAAGf,aAAa,CAACC,IAAD,CAAjC;;AACA,gBAAIa,IAAJ,EAAU;AACRR,cAAAA,QAAQ,CAACU,OAAT,CAAiBD,WAAjB,IAAgCD,IAAhC;AACD,aAFD,MAEO;AACL,qBAAOR,QAAQ,CAACU,OAAT,CAAiBD,WAAjB,CAAP;AACD;AACF,WAPY;AAAA;AADD,OADwG;AAWtHE,MAAAA,aAAa,EAAE,uBAAUhB,IAAV,EAAgB;AAC7B,YAAIiB,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACA,YAAMjB,QAAQ,GAAGH,OAAO,CAACE,IAAD,CAAxB;AACA,YAAMqB,OAAO,GAAGxB,UAAU,CAACI,QAAD,EAAWM,QAAQ,CAACI,YAAT,CAAsBX,IAAjC,CAA1B;AACA,YAAMa,IAAI,GAAGQ,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwBF,OAAxB,CAAH,GAAsC,IAA1D;;AACA,YAAIR,IAAJ,EAAU;AACRjB,UAAAA,cAAc,CAACiB,IAAD,EAAOJ,MAAM,CAACC,MAAP,CAAc;AACjCc,YAAAA,UAAU,EAAE,WADqB;AAEjCC,YAAAA,KAAK,EAAE;AAF0B,WAAd,EAGlBR,OAHkB,CAAP,CAAd;AAID;AACF,OAtBqH;AAuBtHS,MAAAA,gBAAgB,EAAE,0BAAA1B,IAAI,EAAI;AACxB,YAAMc,WAAW,GAAGf,aAAa,CAACC,IAAD,CAAjC;AACA,eAAOK,QAAQ,CAACU,OAAT,CAAiBD,WAAjB,CAAP;AACD;AA1BqH,KAAzC,CAAhD;AAAA,GAAd,EA2Bb,CAACX,IAAD,EAAOC,MAAP,CA3Ba,CAAjB;AA4BA,SAAO,CAACG,QAAD,CAAP;AACD","sourcesContent":["import { useForm as useRcForm } from 'rc-field-form';\nimport * as React from 'react';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport { getFieldId, toArray } from '../util';\nfunction toNamePathStr(name) {\n  const namePath = toArray(name);\n  return namePath.join('_');\n}\nexport default function useForm(form) {\n  const [rcForm] = useRcForm();\n  const itemsRef = React.useRef({});\n  const wrapForm = React.useMemo(() => form !== null && form !== void 0 ? form : Object.assign(Object.assign({}, rcForm), {\n    __INTERNAL__: {\n      itemRef: name => node => {\n        const namePathStr = toNamePathStr(name);\n        if (node) {\n          itemsRef.current[namePathStr] = node;\n        } else {\n          delete itemsRef.current[namePathStr];\n        }\n      }\n    },\n    scrollToField: function (name) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const namePath = toArray(name);\n      const fieldId = getFieldId(namePath, wrapForm.__INTERNAL__.name);\n      const node = fieldId ? document.getElementById(fieldId) : null;\n      if (node) {\n        scrollIntoView(node, Object.assign({\n          scrollMode: 'if-needed',\n          block: 'nearest'\n        }, options));\n      }\n    },\n    getFieldInstance: name => {\n      const namePathStr = toNamePathStr(name);\n      return itemsRef.current[namePathStr];\n    }\n  }), [form, rcForm]);\n  return [wrapForm];\n}"]},"metadata":{},"sourceType":"module"}