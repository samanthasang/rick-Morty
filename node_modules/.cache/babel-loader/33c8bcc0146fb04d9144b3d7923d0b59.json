{"ast":null,"code":"export const roundedArrow = (width, innerRadius, outerRadius, bgColor, boxShadow) => {\n  const unitWidth = width / 2;\n  const ax = 0;\n  const ay = unitWidth;\n  const bx = outerRadius * 1 / Math.sqrt(2);\n  const by = unitWidth - outerRadius * (1 - 1 / Math.sqrt(2));\n  const cx = unitWidth - innerRadius * (1 / Math.sqrt(2));\n  const cy = outerRadius * (Math.sqrt(2) - 1) + innerRadius * (1 / Math.sqrt(2));\n  const dx = 2 * unitWidth - cx;\n  const dy = cy;\n  const ex = 2 * unitWidth - bx;\n  const ey = by;\n  const fx = 2 * unitWidth - ax;\n  const fy = ay;\n  const shadowWidth = unitWidth * Math.sqrt(2) + outerRadius * (Math.sqrt(2) - 2);\n  return {\n    pointerEvents: 'none',\n    width,\n    height: width,\n    overflow: 'hidden',\n    '&::before': {\n      position: 'absolute',\n      bottom: 0,\n      insetInlineStart: 0,\n      width,\n      height: width / 2,\n      background: bgColor,\n      clipPath: `path('M ${ax} ${ay} A ${outerRadius} ${outerRadius} 0 0 0 ${bx} ${by} L ${cx} ${cy} A ${innerRadius} ${innerRadius} 0 0 1 ${dx} ${dy} L ${ex} ${ey} A ${outerRadius} ${outerRadius} 0 0 0 ${fx} ${fy} Z')`,\n      content: '\"\"'\n    },\n    '&::after': {\n      content: '\"\"',\n      position: 'absolute',\n      width: shadowWidth,\n      height: shadowWidth,\n      bottom: 0,\n      insetInline: 0,\n      margin: 'auto',\n      borderRadius: {\n        _skip_check_: true,\n        value: `0 0 ${innerRadius}px 0`\n      },\n      transform: 'translateY(50%) rotate(-135deg)',\n      boxShadow,\n      zIndex: 0,\n      background: 'transparent'\n    }\n  };\n};","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/style/roundedArrow.js"],"names":["roundedArrow","width","innerRadius","outerRadius","bgColor","boxShadow","unitWidth","ax","ay","bx","Math","sqrt","by","cx","cy","dx","dy","ex","ey","fx","fy","shadowWidth","pointerEvents","height","overflow","position","bottom","insetInlineStart","background","clipPath","content","insetInline","margin","borderRadius","_skip_check_","value","transform","zIndex"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG,CAACC,KAAD,EAAQC,WAAR,EAAqBC,WAArB,EAAkCC,OAAlC,EAA2CC,SAA3C,KAAyD;AACnF,QAAMC,SAAS,GAAGL,KAAK,GAAG,CAA1B;AACA,QAAMM,EAAE,GAAG,CAAX;AACA,QAAMC,EAAE,GAAGF,SAAX;AACA,QAAMG,EAAE,GAAGN,WAAW,GAAG,CAAd,GAAkBO,IAAI,CAACC,IAAL,CAAU,CAAV,CAA7B;AACA,QAAMC,EAAE,GAAGN,SAAS,GAAGH,WAAW,IAAI,IAAI,IAAIO,IAAI,CAACC,IAAL,CAAU,CAAV,CAAZ,CAAlC;AACA,QAAME,EAAE,GAAGP,SAAS,GAAGJ,WAAW,IAAI,IAAIQ,IAAI,CAACC,IAAL,CAAU,CAAV,CAAR,CAAlC;AACA,QAAMG,EAAE,GAAGX,WAAW,IAAIO,IAAI,CAACC,IAAL,CAAU,CAAV,IAAe,CAAnB,CAAX,GAAmCT,WAAW,IAAI,IAAIQ,IAAI,CAACC,IAAL,CAAU,CAAV,CAAR,CAAzD;AACA,QAAMI,EAAE,GAAG,IAAIT,SAAJ,GAAgBO,EAA3B;AACA,QAAMG,EAAE,GAAGF,EAAX;AACA,QAAMG,EAAE,GAAG,IAAIX,SAAJ,GAAgBG,EAA3B;AACA,QAAMS,EAAE,GAAGN,EAAX;AACA,QAAMO,EAAE,GAAG,IAAIb,SAAJ,GAAgBC,EAA3B;AACA,QAAMa,EAAE,GAAGZ,EAAX;AACA,QAAMa,WAAW,GAAGf,SAAS,GAAGI,IAAI,CAACC,IAAL,CAAU,CAAV,CAAZ,GAA2BR,WAAW,IAAIO,IAAI,CAACC,IAAL,CAAU,CAAV,IAAe,CAAnB,CAA1D;AACA,SAAO;AACLW,IAAAA,aAAa,EAAE,MADV;AAELrB,IAAAA,KAFK;AAGLsB,IAAAA,MAAM,EAAEtB,KAHH;AAILuB,IAAAA,QAAQ,EAAE,QAJL;AAKL,iBAAa;AACXC,MAAAA,QAAQ,EAAE,UADC;AAEXC,MAAAA,MAAM,EAAE,CAFG;AAGXC,MAAAA,gBAAgB,EAAE,CAHP;AAIX1B,MAAAA,KAJW;AAKXsB,MAAAA,MAAM,EAAEtB,KAAK,GAAG,CALL;AAMX2B,MAAAA,UAAU,EAAExB,OAND;AAOXyB,MAAAA,QAAQ,EAAG,WAAUtB,EAAG,IAAGC,EAAG,MAAKL,WAAY,IAAGA,WAAY,UAASM,EAAG,IAAGG,EAAG,MAAKC,EAAG,IAAGC,EAAG,MAAKZ,WAAY,IAAGA,WAAY,UAASa,EAAG,IAAGC,EAAG,MAAKC,EAAG,IAAGC,EAAG,MAAKf,WAAY,IAAGA,WAAY,UAASgB,EAAG,IAAGC,EAAG,MAPrM;AAQXU,MAAAA,OAAO,EAAE;AARE,KALR;AAeL,gBAAY;AACVA,MAAAA,OAAO,EAAE,IADC;AAEVL,MAAAA,QAAQ,EAAE,UAFA;AAGVxB,MAAAA,KAAK,EAAEoB,WAHG;AAIVE,MAAAA,MAAM,EAAEF,WAJE;AAKVK,MAAAA,MAAM,EAAE,CALE;AAMVK,MAAAA,WAAW,EAAE,CANH;AAOVC,MAAAA,MAAM,EAAE,MAPE;AAQVC,MAAAA,YAAY,EAAE;AACZC,QAAAA,YAAY,EAAE,IADF;AAEZC,QAAAA,KAAK,EAAG,OAAMjC,WAAY;AAFd,OARJ;AAYVkC,MAAAA,SAAS,EAAE,iCAZD;AAaV/B,MAAAA,SAbU;AAcVgC,MAAAA,MAAM,EAAE,CAdE;AAeVT,MAAAA,UAAU,EAAE;AAfF;AAfP,GAAP;AAiCD,CAhDM","sourcesContent":["export const roundedArrow = (width, innerRadius, outerRadius, bgColor, boxShadow) => {\n  const unitWidth = width / 2;\n  const ax = 0;\n  const ay = unitWidth;\n  const bx = outerRadius * 1 / Math.sqrt(2);\n  const by = unitWidth - outerRadius * (1 - 1 / Math.sqrt(2));\n  const cx = unitWidth - innerRadius * (1 / Math.sqrt(2));\n  const cy = outerRadius * (Math.sqrt(2) - 1) + innerRadius * (1 / Math.sqrt(2));\n  const dx = 2 * unitWidth - cx;\n  const dy = cy;\n  const ex = 2 * unitWidth - bx;\n  const ey = by;\n  const fx = 2 * unitWidth - ax;\n  const fy = ay;\n  const shadowWidth = unitWidth * Math.sqrt(2) + outerRadius * (Math.sqrt(2) - 2);\n  return {\n    pointerEvents: 'none',\n    width,\n    height: width,\n    overflow: 'hidden',\n    '&::before': {\n      position: 'absolute',\n      bottom: 0,\n      insetInlineStart: 0,\n      width,\n      height: width / 2,\n      background: bgColor,\n      clipPath: `path('M ${ax} ${ay} A ${outerRadius} ${outerRadius} 0 0 0 ${bx} ${by} L ${cx} ${cy} A ${innerRadius} ${innerRadius} 0 0 1 ${dx} ${dy} L ${ex} ${ey} A ${outerRadius} ${outerRadius} 0 0 0 ${fx} ${fy} Z')`,\n      content: '\"\"'\n    },\n    '&::after': {\n      content: '\"\"',\n      position: 'absolute',\n      width: shadowWidth,\n      height: shadowWidth,\n      bottom: 0,\n      insetInline: 0,\n      margin: 'auto',\n      borderRadius: {\n        _skip_check_: true,\n        value: `0 0 ${innerRadius}px 0`\n      },\n      transform: 'translateY(50%) rotate(-135deg)',\n      boxShadow,\n      zIndex: 0,\n      background: 'transparent'\n    }\n  };\n};"]},"metadata":{},"sourceType":"module"}