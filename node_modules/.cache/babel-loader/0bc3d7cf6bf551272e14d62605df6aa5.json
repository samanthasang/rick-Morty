{"ast":null,"code":"import { useForm as useRcForm } from 'rc-field-form';\nimport * as React from 'react';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport { getFieldId, toArray } from '../util';\n\nfunction toNamePathStr(name) {\n  const namePath = toArray(name);\n  return namePath.join('_');\n}\n\nexport default function useForm(form) {\n  const [rcForm] = useRcForm();\n  const itemsRef = React.useRef({});\n  const wrapForm = React.useMemo(() => form !== null && form !== void 0 ? form : Object.assign(Object.assign({}, rcForm), {\n    __INTERNAL__: {\n      itemRef: name => node => {\n        const namePathStr = toNamePathStr(name);\n\n        if (node) {\n          itemsRef.current[namePathStr] = node;\n        } else {\n          delete itemsRef.current[namePathStr];\n        }\n      }\n    },\n    scrollToField: function (name) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const namePath = toArray(name);\n      const fieldId = getFieldId(namePath, wrapForm.__INTERNAL__.name);\n      const node = fieldId ? document.getElementById(fieldId) : null;\n\n      if (node) {\n        scrollIntoView(node, Object.assign({\n          scrollMode: 'if-needed',\n          block: 'nearest'\n        }, options));\n      }\n    },\n    getFieldInstance: name => {\n      const namePathStr = toNamePathStr(name);\n      return itemsRef.current[namePathStr];\n    }\n  }), [form, rcForm]);\n  return [wrapForm];\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/form/hooks/useForm.js"],"names":["useForm","useRcForm","React","scrollIntoView","getFieldId","toArray","toNamePathStr","name","namePath","join","form","rcForm","itemsRef","useRef","wrapForm","useMemo","Object","assign","__INTERNAL__","itemRef","node","namePathStr","current","scrollToField","options","arguments","length","undefined","fieldId","document","getElementById","scrollMode","block","getFieldInstance"],"mappings":"AAAA,SAASA,OAAO,IAAIC,SAApB,QAAqC,eAArC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,SAApC;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,QAAMC,QAAQ,GAAGH,OAAO,CAACE,IAAD,CAAxB;AACA,SAAOC,QAAQ,CAACC,IAAT,CAAc,GAAd,CAAP;AACD;;AACD,eAAe,SAAST,OAAT,CAAiBU,IAAjB,EAAuB;AACpC,QAAM,CAACC,MAAD,IAAWV,SAAS,EAA1B;AACA,QAAMW,QAAQ,GAAGV,KAAK,CAACW,MAAN,CAAa,EAAb,CAAjB;AACA,QAAMC,QAAQ,GAAGZ,KAAK,CAACa,OAAN,CAAc,MAAML,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmCA,IAAnC,GAA0CM,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,MAAlB,CAAd,EAAyC;AACtHO,IAAAA,YAAY,EAAE;AACZC,MAAAA,OAAO,EAAEZ,IAAI,IAAIa,IAAI,IAAI;AACvB,cAAMC,WAAW,GAAGf,aAAa,CAACC,IAAD,CAAjC;;AACA,YAAIa,IAAJ,EAAU;AACRR,UAAAA,QAAQ,CAACU,OAAT,CAAiBD,WAAjB,IAAgCD,IAAhC;AACD,SAFD,MAEO;AACL,iBAAOR,QAAQ,CAACU,OAAT,CAAiBD,WAAjB,CAAP;AACD;AACF;AARW,KADwG;AAWtHE,IAAAA,aAAa,EAAE,UAAUhB,IAAV,EAAgB;AAC7B,UAAIiB,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACA,YAAMjB,QAAQ,GAAGH,OAAO,CAACE,IAAD,CAAxB;AACA,YAAMqB,OAAO,GAAGxB,UAAU,CAACI,QAAD,EAAWM,QAAQ,CAACI,YAAT,CAAsBX,IAAjC,CAA1B;AACA,YAAMa,IAAI,GAAGQ,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwBF,OAAxB,CAAH,GAAsC,IAA1D;;AACA,UAAIR,IAAJ,EAAU;AACRjB,QAAAA,cAAc,CAACiB,IAAD,EAAOJ,MAAM,CAACC,MAAP,CAAc;AACjCc,UAAAA,UAAU,EAAE,WADqB;AAEjCC,UAAAA,KAAK,EAAE;AAF0B,SAAd,EAGlBR,OAHkB,CAAP,CAAd;AAID;AACF,KAtBqH;AAuBtHS,IAAAA,gBAAgB,EAAE1B,IAAI,IAAI;AACxB,YAAMc,WAAW,GAAGf,aAAa,CAACC,IAAD,CAAjC;AACA,aAAOK,QAAQ,CAACU,OAAT,CAAiBD,WAAjB,CAAP;AACD;AA1BqH,GAAzC,CAA9D,EA2Bb,CAACX,IAAD,EAAOC,MAAP,CA3Ba,CAAjB;AA4BA,SAAO,CAACG,QAAD,CAAP;AACD","sourcesContent":["import { useForm as useRcForm } from 'rc-field-form';\nimport * as React from 'react';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport { getFieldId, toArray } from '../util';\nfunction toNamePathStr(name) {\n  const namePath = toArray(name);\n  return namePath.join('_');\n}\nexport default function useForm(form) {\n  const [rcForm] = useRcForm();\n  const itemsRef = React.useRef({});\n  const wrapForm = React.useMemo(() => form !== null && form !== void 0 ? form : Object.assign(Object.assign({}, rcForm), {\n    __INTERNAL__: {\n      itemRef: name => node => {\n        const namePathStr = toNamePathStr(name);\n        if (node) {\n          itemsRef.current[namePathStr] = node;\n        } else {\n          delete itemsRef.current[namePathStr];\n        }\n      }\n    },\n    scrollToField: function (name) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const namePath = toArray(name);\n      const fieldId = getFieldId(namePath, wrapForm.__INTERNAL__.name);\n      const node = fieldId ? document.getElementById(fieldId) : null;\n      if (node) {\n        scrollIntoView(node, Object.assign({\n          scrollMode: 'if-needed',\n          block: 'nearest'\n        }, options));\n      }\n    },\n    getFieldInstance: name => {\n      const namePathStr = toNamePathStr(name);\n      return itemsRef.current[namePathStr];\n    }\n  }), [form, rcForm]);\n  return [wrapForm];\n}"]},"metadata":{},"sourceType":"module"}