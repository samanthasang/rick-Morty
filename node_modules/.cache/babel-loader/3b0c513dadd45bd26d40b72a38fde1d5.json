{"ast":null,"code":"import classNames from 'classnames';\nimport { Circle as RCCircle } from 'rc-progress';\nimport * as React from 'react';\nimport Tooltip from '../tooltip';\nimport { getPercentage, getSize, getStrokeColor } from './utils';\nconst CIRCLE_MIN_STROKE_WIDTH = 3;\n\nconst getMinPercent = width => CIRCLE_MIN_STROKE_WIDTH / width * 100;\n\nconst Circle = props => {\n  const {\n    prefixCls,\n    trailColor = null,\n    strokeLinecap = 'round',\n    gapPosition,\n    gapDegree,\n    width: originWidth = 120,\n    type,\n    children,\n    success,\n    size\n  } = props;\n  const mergedSize = size !== null && size !== void 0 ? size : [originWidth, originWidth];\n  const [width, height] = getSize(mergedSize, 'circle');\n  let {\n    strokeWidth\n  } = props;\n\n  if (strokeWidth === undefined) {\n    strokeWidth = Math.max(getMinPercent(width), 6);\n  }\n\n  const circleStyle = {\n    width,\n    height,\n    fontSize: width * 0.15 + 6\n  };\n  const realGapDegree = React.useMemo(() => {\n    // Support gapDeg = 0 when type = 'dashboard'\n    if (gapDegree || gapDegree === 0) {\n      return gapDegree;\n    }\n\n    if (type === 'dashboard') {\n      return 75;\n    }\n\n    return undefined;\n  }, [gapDegree, type]);\n  const gapPos = gapPosition || type === 'dashboard' && 'bottom' || undefined; // using className to style stroke color\n\n  const isGradient = Object.prototype.toString.call(props.strokeColor) === '[object Object]';\n  const strokeColor = getStrokeColor({\n    success,\n    strokeColor: props.strokeColor\n  });\n  const wrapperClassName = classNames(`${prefixCls}-inner`, {\n    [`${prefixCls}-circle-gradient`]: isGradient\n  });\n  const circleContent = /*#__PURE__*/React.createElement(RCCircle, {\n    percent: getPercentage(props),\n    strokeWidth: strokeWidth,\n    trailWidth: strokeWidth,\n    strokeColor: strokeColor,\n    strokeLinecap: strokeLinecap,\n    trailColor: trailColor,\n    prefixCls: prefixCls,\n    gapDegree: realGapDegree,\n    gapPosition: gapPos\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClassName,\n    style: circleStyle\n  }, width <= 20 ? /*#__PURE__*/React.createElement(Tooltip, {\n    title: children\n  }, /*#__PURE__*/React.createElement(\"span\", null, circleContent)) : /*#__PURE__*/React.createElement(React.Fragment, null, circleContent, children));\n};\n\nexport default Circle;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/progress/Circle.js"],"names":["classNames","Circle","RCCircle","React","Tooltip","getPercentage","getSize","getStrokeColor","CIRCLE_MIN_STROKE_WIDTH","getMinPercent","width","props","prefixCls","trailColor","strokeLinecap","gapPosition","gapDegree","originWidth","type","children","success","size","mergedSize","height","strokeWidth","undefined","Math","max","circleStyle","fontSize","realGapDegree","useMemo","gapPos","isGradient","Object","prototype","toString","call","strokeColor","wrapperClassName","circleContent","createElement","percent","trailWidth","className","style","title","Fragment"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,MAAM,IAAIC,QAAnB,QAAmC,aAAnC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,aAAT,EAAwBC,OAAxB,EAAiCC,cAAjC,QAAuD,SAAvD;AACA,MAAMC,uBAAuB,GAAG,CAAhC;;AACA,MAAMC,aAAa,GAAGC,KAAK,IAAIF,uBAAuB,GAAGE,KAA1B,GAAkC,GAAjE;;AACA,MAAMT,MAAM,GAAGU,KAAK,IAAI;AACtB,QAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,UAAU,GAAG,IAFT;AAGJC,IAAAA,aAAa,GAAG,OAHZ;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,SALI;AAMJN,IAAAA,KAAK,EAAEO,WAAW,GAAG,GANjB;AAOJC,IAAAA,IAPI;AAQJC,IAAAA,QARI;AASJC,IAAAA,OATI;AAUJC,IAAAA;AAVI,MAWFV,KAXJ;AAYA,QAAMW,UAAU,GAAGD,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmCA,IAAnC,GAA0C,CAACJ,WAAD,EAAcA,WAAd,CAA7D;AACA,QAAM,CAACP,KAAD,EAAQa,MAAR,IAAkBjB,OAAO,CAACgB,UAAD,EAAa,QAAb,CAA/B;AACA,MAAI;AACFE,IAAAA;AADE,MAEAb,KAFJ;;AAGA,MAAIa,WAAW,KAAKC,SAApB,EAA+B;AAC7BD,IAAAA,WAAW,GAAGE,IAAI,CAACC,GAAL,CAASlB,aAAa,CAACC,KAAD,CAAtB,EAA+B,CAA/B,CAAd;AACD;;AACD,QAAMkB,WAAW,GAAG;AAClBlB,IAAAA,KADkB;AAElBa,IAAAA,MAFkB;AAGlBM,IAAAA,QAAQ,EAAEnB,KAAK,GAAG,IAAR,GAAe;AAHP,GAApB;AAKA,QAAMoB,aAAa,GAAG3B,KAAK,CAAC4B,OAAN,CAAc,MAAM;AACxC;AACA,QAAIf,SAAS,IAAIA,SAAS,KAAK,CAA/B,EAAkC;AAChC,aAAOA,SAAP;AACD;;AACD,QAAIE,IAAI,KAAK,WAAb,EAA0B;AACxB,aAAO,EAAP;AACD;;AACD,WAAOO,SAAP;AACD,GATqB,EASnB,CAACT,SAAD,EAAYE,IAAZ,CATmB,CAAtB;AAUA,QAAMc,MAAM,GAAGjB,WAAW,IAAIG,IAAI,KAAK,WAAT,IAAwB,QAAvC,IAAmDO,SAAlE,CApCsB,CAqCtB;;AACA,QAAMQ,UAAU,GAAGC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+B1B,KAAK,CAAC2B,WAArC,MAAsD,iBAAzE;AACA,QAAMA,WAAW,GAAG/B,cAAc,CAAC;AACjCa,IAAAA,OADiC;AAEjCkB,IAAAA,WAAW,EAAE3B,KAAK,CAAC2B;AAFc,GAAD,CAAlC;AAIA,QAAMC,gBAAgB,GAAGvC,UAAU,CAAE,GAAEY,SAAU,QAAd,EAAuB;AACxD,KAAE,GAAEA,SAAU,kBAAd,GAAkCqB;AADsB,GAAvB,CAAnC;AAGA,QAAMO,aAAa,GAAG,aAAarC,KAAK,CAACsC,aAAN,CAAoBvC,QAApB,EAA8B;AAC/DwC,IAAAA,OAAO,EAAErC,aAAa,CAACM,KAAD,CADyC;AAE/Da,IAAAA,WAAW,EAAEA,WAFkD;AAG/DmB,IAAAA,UAAU,EAAEnB,WAHmD;AAI/Dc,IAAAA,WAAW,EAAEA,WAJkD;AAK/DxB,IAAAA,aAAa,EAAEA,aALgD;AAM/DD,IAAAA,UAAU,EAAEA,UANmD;AAO/DD,IAAAA,SAAS,EAAEA,SAPoD;AAQ/DI,IAAAA,SAAS,EAAEc,aARoD;AAS/Df,IAAAA,WAAW,EAAEiB;AATkD,GAA9B,CAAnC;AAWA,SAAO,aAAa7B,KAAK,CAACsC,aAAN,CAAoB,KAApB,EAA2B;AAC7CG,IAAAA,SAAS,EAAEL,gBADkC;AAE7CM,IAAAA,KAAK,EAAEjB;AAFsC,GAA3B,EAGjBlB,KAAK,IAAI,EAAT,GAAc,aAAaP,KAAK,CAACsC,aAAN,CAAoBrC,OAApB,EAA6B;AACzD0C,IAAAA,KAAK,EAAE3B;AADkD,GAA7B,EAE3B,aAAahB,KAAK,CAACsC,aAAN,CAAoB,MAApB,EAA4B,IAA5B,EAAkCD,aAAlC,CAFc,CAA3B,GAEiE,aAAarC,KAAK,CAACsC,aAAN,CAAoBtC,KAAK,CAAC4C,QAA1B,EAAoC,IAApC,EAA0CP,aAA1C,EAAyDrB,QAAzD,CAL7D,CAApB;AAMD,CA/DD;;AAgEA,eAAelB,MAAf","sourcesContent":["import classNames from 'classnames';\nimport { Circle as RCCircle } from 'rc-progress';\nimport * as React from 'react';\nimport Tooltip from '../tooltip';\nimport { getPercentage, getSize, getStrokeColor } from './utils';\nconst CIRCLE_MIN_STROKE_WIDTH = 3;\nconst getMinPercent = width => CIRCLE_MIN_STROKE_WIDTH / width * 100;\nconst Circle = props => {\n  const {\n    prefixCls,\n    trailColor = null,\n    strokeLinecap = 'round',\n    gapPosition,\n    gapDegree,\n    width: originWidth = 120,\n    type,\n    children,\n    success,\n    size\n  } = props;\n  const mergedSize = size !== null && size !== void 0 ? size : [originWidth, originWidth];\n  const [width, height] = getSize(mergedSize, 'circle');\n  let {\n    strokeWidth\n  } = props;\n  if (strokeWidth === undefined) {\n    strokeWidth = Math.max(getMinPercent(width), 6);\n  }\n  const circleStyle = {\n    width,\n    height,\n    fontSize: width * 0.15 + 6\n  };\n  const realGapDegree = React.useMemo(() => {\n    // Support gapDeg = 0 when type = 'dashboard'\n    if (gapDegree || gapDegree === 0) {\n      return gapDegree;\n    }\n    if (type === 'dashboard') {\n      return 75;\n    }\n    return undefined;\n  }, [gapDegree, type]);\n  const gapPos = gapPosition || type === 'dashboard' && 'bottom' || undefined;\n  // using className to style stroke color\n  const isGradient = Object.prototype.toString.call(props.strokeColor) === '[object Object]';\n  const strokeColor = getStrokeColor({\n    success,\n    strokeColor: props.strokeColor\n  });\n  const wrapperClassName = classNames(`${prefixCls}-inner`, {\n    [`${prefixCls}-circle-gradient`]: isGradient\n  });\n  const circleContent = /*#__PURE__*/React.createElement(RCCircle, {\n    percent: getPercentage(props),\n    strokeWidth: strokeWidth,\n    trailWidth: strokeWidth,\n    strokeColor: strokeColor,\n    strokeLinecap: strokeLinecap,\n    trailColor: trailColor,\n    prefixCls: prefixCls,\n    gapDegree: realGapDegree,\n    gapPosition: gapPos\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClassName,\n    style: circleStyle\n  }, width <= 20 ? /*#__PURE__*/React.createElement(Tooltip, {\n    title: children\n  }, /*#__PURE__*/React.createElement(\"span\", null, circleContent)) : /*#__PURE__*/React.createElement(React.Fragment, null, circleContent, children));\n};\nexport default Circle;"]},"metadata":{},"sourceType":"module"}