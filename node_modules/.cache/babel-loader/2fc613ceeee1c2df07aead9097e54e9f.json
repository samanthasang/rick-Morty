{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"prefixCls\", \"className\", \"style\", \"min\", \"max\", \"step\", \"defaultValue\", \"value\", \"disabled\", \"readOnly\", \"upHandler\", \"downHandler\", \"keyboard\", \"controls\", \"stringMode\", \"parser\", \"formatter\", \"precision\", \"decimalSeparator\", \"onChange\", \"onInput\", \"onPressEnter\", \"onStep\"];\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { useLayoutUpdateEffect } from \"rc-util/es/hooks/useLayoutEffect\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport getMiniDecimal, { toFixed, getNumberPrecision, num2str, validateNumber } from '@rc-component/mini-decimal';\nimport StepHandler from \"./StepHandler\";\nimport { getDecupleSteps } from \"./utils/numberUtil\";\nimport useCursor from \"./hooks/useCursor\";\nimport useFrame from \"./hooks/useFrame\";\n/**\n * We support `stringMode` which need handle correct type when user call in onChange\n * format max or min value\n * 1. if isInvalid return null\n * 2. if precision is undefined, return decimal\n * 3. format with precision\n *    I. if max > 0, round down with precision. Example: max= 3.5, precision=0  afterFormat: 3\n *    II. if max < 0, round up with precision. Example: max= -3.5, precision=0  afterFormat: -4\n *    III. if min > 0, round up with precision. Example: min= 3.5, precision=0  afterFormat: 4\n *    IV. if min < 0, round down with precision. Example: max= -3.5, precision=0  afterFormat: -3\n */\n\nvar getDecimalValue = function getDecimalValue(stringMode, decimalValue) {\n  if (stringMode || decimalValue.isEmpty()) {\n    return decimalValue.toString();\n  }\n\n  return decimalValue.toNumber();\n};\n\nvar getDecimalIfValidate = function getDecimalIfValidate(value) {\n  var decimal = getMiniDecimal(value);\n  return decimal.isInvalidate() ? null : decimal;\n};\n\nvar InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _classNames;\n\n  var _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-input-number' : _props$prefixCls,\n      className = props.className,\n      style = props.style,\n      min = props.min,\n      max = props.max,\n      _props$step = props.step,\n      step = _props$step === void 0 ? 1 : _props$step,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      disabled = props.disabled,\n      readOnly = props.readOnly,\n      upHandler = props.upHandler,\n      downHandler = props.downHandler,\n      keyboard = props.keyboard,\n      _props$controls = props.controls,\n      controls = _props$controls === void 0 ? true : _props$controls,\n      stringMode = props.stringMode,\n      parser = props.parser,\n      formatter = props.formatter,\n      precision = props.precision,\n      decimalSeparator = props.decimalSeparator,\n      onChange = props.onChange,\n      onInput = props.onInput,\n      onPressEnter = props.onPressEnter,\n      onStep = props.onStep,\n      inputProps = _objectWithoutProperties(props, _excluded);\n\n  var inputClassName = \"\".concat(prefixCls, \"-input\");\n  var inputRef = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focus = _React$useState2[0],\n      setFocus = _React$useState2[1];\n\n  var userTypingRef = React.useRef(false);\n  var compositionRef = React.useRef(false);\n  var shiftKeyRef = React.useRef(false); // ============================ Value =============================\n  // Real value control\n\n  var _React$useState3 = React.useState(function () {\n    return getMiniDecimal(value !== null && value !== void 0 ? value : defaultValue);\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      decimalValue = _React$useState4[0],\n      setDecimalValue = _React$useState4[1];\n\n  function setUncontrolledDecimalValue(newDecimal) {\n    if (value === undefined) {\n      setDecimalValue(newDecimal);\n    }\n  } // ====================== Parser & Formatter ======================\n\n  /**\n   * `precision` is used for formatter & onChange.\n   * It will auto generate by `value` & `step`.\n   * But it will not block user typing.\n   *\n   * Note: Auto generate `precision` is used for legacy logic.\n   * We should remove this since we already support high precision with BigInt.\n   *\n   * @param number  Provide which number should calculate precision\n   * @param userTyping  Change by user typing\n   */\n\n\n  var getPrecision = React.useCallback(function (numStr, userTyping) {\n    if (userTyping) {\n      return undefined;\n    }\n\n    if (precision >= 0) {\n      return precision;\n    }\n\n    return Math.max(getNumberPrecision(numStr), getNumberPrecision(step));\n  }, [precision, step]); // >>> Parser\n\n  var mergedParser = React.useCallback(function (num) {\n    var numStr = String(num);\n\n    if (parser) {\n      return parser(numStr);\n    }\n\n    var parsedStr = numStr;\n\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace(decimalSeparator, '.');\n    } // [Legacy] We still support auto convert `$ 123,456` to `123456`\n\n\n    return parsedStr.replace(/[^\\w.-]+/g, '');\n  }, [parser, decimalSeparator]); // >>> Formatter\n\n  var inputValueRef = React.useRef('');\n  var mergedFormatter = React.useCallback(function (number, userTyping) {\n    if (formatter) {\n      return formatter(number, {\n        userTyping: userTyping,\n        input: String(inputValueRef.current)\n      });\n    }\n\n    var str = typeof number === 'number' ? num2str(number) : number; // User typing will not auto format with precision directly\n\n    if (!userTyping) {\n      var mergedPrecision = getPrecision(str, userTyping);\n\n      if (validateNumber(str) && (decimalSeparator || mergedPrecision >= 0)) {\n        // Separator\n        var separatorStr = decimalSeparator || '.';\n        str = toFixed(str, separatorStr, mergedPrecision);\n      }\n    }\n\n    return str;\n  }, [formatter, getPrecision, decimalSeparator]); // ========================== InputValue ==========================\n\n  /**\n   * Input text value control\n   *\n   * User can not update input content directly. It update with follow rules by priority:\n   *  1. controlled `value` changed\n   *    * [SPECIAL] Typing like `1.` should not immediately convert to `1`\n   *  2. User typing with format (not precision)\n   *  3. Blur or Enter trigger revalidate\n   */\n\n  var _React$useState5 = React.useState(function () {\n    var initValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : value;\n\n    if (decimalValue.isInvalidate() && ['string', 'number'].includes(_typeof(initValue))) {\n      return Number.isNaN(initValue) ? '' : initValue;\n    }\n\n    return mergedFormatter(decimalValue.toString(), false);\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      inputValue = _React$useState6[0],\n      setInternalInputValue = _React$useState6[1];\n\n  inputValueRef.current = inputValue; // Should always be string\n\n  function setInputValue(newValue, userTyping) {\n    setInternalInputValue(mergedFormatter( // Invalidate number is sometime passed by external control, we should let it go\n    // Otherwise is controlled by internal interactive logic which check by userTyping\n    // You can ref 'show limited value when input is not focused' test for more info.\n    newValue.isInvalidate() ? newValue.toString(false) : newValue.toString(!userTyping), userTyping));\n  } // >>> Max & Min limit\n\n\n  var maxDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(max);\n  }, [max, precision]);\n  var minDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(min);\n  }, [min, precision]);\n  var upDisabled = React.useMemo(function () {\n    if (!maxDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return maxDecimal.lessEquals(decimalValue);\n  }, [maxDecimal, decimalValue]);\n  var downDisabled = React.useMemo(function () {\n    if (!minDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return decimalValue.lessEquals(minDecimal);\n  }, [minDecimal, decimalValue]); // Cursor controller\n\n  var _useCursor = useCursor(inputRef.current, focus),\n      _useCursor2 = _slicedToArray(_useCursor, 2),\n      recordCursor = _useCursor2[0],\n      restoreCursor = _useCursor2[1]; // ============================= Data =============================\n\n  /**\n   * Find target value closet within range.\n   * e.g. [11, 28]:\n   *    3  => 11\n   *    23 => 23\n   *    99 => 28\n   */\n\n\n  var getRangeValue = function getRangeValue(target) {\n    // target > max\n    if (maxDecimal && !target.lessEquals(maxDecimal)) {\n      return maxDecimal;\n    } // target < min\n\n\n    if (minDecimal && !minDecimal.lessEquals(target)) {\n      return minDecimal;\n    }\n\n    return null;\n  };\n  /**\n   * Check value is in [min, max] range\n   */\n\n\n  var isInRange = function isInRange(target) {\n    return !getRangeValue(target);\n  };\n  /**\n   * Trigger `onChange` if value validated and not equals of origin.\n   * Return the value that re-align in range.\n   */\n\n\n  var triggerValueUpdate = function triggerValueUpdate(newValue, userTyping) {\n    var updateValue = newValue;\n    var isRangeValidate = isInRange(updateValue) || updateValue.isEmpty(); // Skip align value when trigger value is empty.\n    // We just trigger onChange(null)\n    // This should not block user typing\n\n    if (!updateValue.isEmpty() && !userTyping) {\n      // Revert value in range if needed\n      updateValue = getRangeValue(updateValue) || updateValue;\n      isRangeValidate = true;\n    }\n\n    if (!readOnly && !disabled && isRangeValidate) {\n      var numStr = updateValue.toString();\n      var mergedPrecision = getPrecision(numStr, userTyping);\n\n      if (mergedPrecision >= 0) {\n        updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision)); // When to fixed. The value may out of min & max range.\n        // 4 in [0, 3.8] => 3.8 => 4 (toFixed)\n\n        if (!isInRange(updateValue)) {\n          updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision, true));\n        }\n      } // Trigger event\n\n\n      if (!updateValue.equals(decimalValue)) {\n        setUncontrolledDecimalValue(updateValue);\n        onChange === null || onChange === void 0 ? void 0 : onChange(updateValue.isEmpty() ? null : getDecimalValue(stringMode, updateValue)); // Reformat input if value is not controlled\n\n        if (value === undefined) {\n          setInputValue(updateValue, userTyping);\n        }\n      }\n\n      return updateValue;\n    }\n\n    return decimalValue;\n  }; // ========================== User Input ==========================\n\n\n  var onNextPromise = useFrame(); // >>> Collect input value\n\n  var collectInputValue = function collectInputValue(inputStr) {\n    recordCursor(); // Update inputValue incase input can not parse as number\n\n    setInternalInputValue(inputStr); // Parse number\n\n    if (!compositionRef.current) {\n      var finalValue = mergedParser(inputStr);\n      var finalDecimal = getMiniDecimal(finalValue);\n\n      if (!finalDecimal.isNaN()) {\n        triggerValueUpdate(finalDecimal, true);\n      }\n    } // Trigger onInput later to let user customize value if they want do handle something after onChange\n\n\n    onInput === null || onInput === void 0 ? void 0 : onInput(inputStr); // optimize for chinese input experience\n    // https://github.com/ant-design/ant-design/issues/8196\n\n    onNextPromise(function () {\n      var nextInputStr = inputStr;\n\n      if (!parser) {\n        nextInputStr = inputStr.replace(/。/g, '.');\n      }\n\n      if (nextInputStr !== inputStr) {\n        collectInputValue(nextInputStr);\n      }\n    });\n  }; // >>> Composition\n\n\n  var onCompositionStart = function onCompositionStart() {\n    compositionRef.current = true;\n  };\n\n  var onCompositionEnd = function onCompositionEnd() {\n    compositionRef.current = false;\n    collectInputValue(inputRef.current.value);\n  }; // >>> Input\n\n\n  var onInternalInput = function onInternalInput(e) {\n    collectInputValue(e.target.value);\n  }; // ============================= Step =============================\n\n\n  var onInternalStep = function onInternalStep(up) {\n    var _inputRef$current; // Ignore step since out of range\n\n\n    if (up && upDisabled || !up && downDisabled) {\n      return;\n    } // Clear typing status since it may caused by up & down key.\n    // We should sync with input value.\n\n\n    userTypingRef.current = false;\n    var stepDecimal = getMiniDecimal(shiftKeyRef.current ? getDecupleSteps(step) : step);\n\n    if (!up) {\n      stepDecimal = stepDecimal.negate();\n    }\n\n    var target = (decimalValue || getMiniDecimal(0)).add(stepDecimal.toString());\n    var updatedValue = triggerValueUpdate(target, false);\n    onStep === null || onStep === void 0 ? void 0 : onStep(getDecimalValue(stringMode, updatedValue), {\n      offset: shiftKeyRef.current ? getDecupleSteps(step) : step,\n      type: up ? 'up' : 'down'\n    });\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n  }; // ============================ Flush =============================\n\n  /**\n   * Flush current input content to trigger value change & re-formatter input if needed\n   */\n\n\n  var flushInputValue = function flushInputValue(userTyping) {\n    var parsedValue = getMiniDecimal(mergedParser(inputValue));\n    var formatValue = parsedValue;\n\n    if (!parsedValue.isNaN()) {\n      // Only validate value or empty value can be re-fill to inputValue\n      // Reassign the formatValue within ranged of trigger control\n      formatValue = triggerValueUpdate(parsedValue, userTyping);\n    } else {\n      formatValue = decimalValue;\n    }\n\n    if (value !== undefined) {\n      // Reset back with controlled value first\n      setInputValue(decimalValue, false);\n    } else if (!formatValue.isNaN()) {\n      // Reset input back since no validate value\n      setInputValue(formatValue, false);\n    }\n  }; // Solve the issue of the event triggering sequence when entering numbers in chinese input (Safari)\n\n\n  var onBeforeInput = function onBeforeInput() {\n    userTypingRef.current = true;\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    var which = event.which,\n        shiftKey = event.shiftKey;\n    userTypingRef.current = true;\n\n    if (shiftKey) {\n      shiftKeyRef.current = true;\n    } else {\n      shiftKeyRef.current = false;\n    }\n\n    if (which === KeyCode.ENTER) {\n      if (!compositionRef.current) {\n        userTypingRef.current = false;\n      }\n\n      flushInputValue(false);\n      onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter(event);\n    }\n\n    if (keyboard === false) {\n      return;\n    } // Do step\n\n\n    if (!compositionRef.current && [KeyCode.UP, KeyCode.DOWN].includes(which)) {\n      onInternalStep(KeyCode.UP === which);\n      event.preventDefault();\n    }\n  };\n\n  var onKeyUp = function onKeyUp() {\n    userTypingRef.current = false;\n    shiftKeyRef.current = false;\n  }; // >>> Focus & Blur\n\n\n  var onBlur = function onBlur() {\n    flushInputValue(false);\n    setFocus(false);\n    userTypingRef.current = false;\n  }; // ========================== Controlled ==========================\n  // Input by precision\n\n\n  useLayoutUpdateEffect(function () {\n    if (!decimalValue.isInvalidate()) {\n      setInputValue(decimalValue, false);\n    }\n  }, [precision]); // Input by value\n\n  useLayoutUpdateEffect(function () {\n    var newValue = getMiniDecimal(value);\n    setDecimalValue(newValue);\n    var currentParsedValue = getMiniDecimal(mergedParser(inputValue)); // When user typing from `1.2` to `1.`, we should not convert to `1` immediately.\n    // But let it go if user set `formatter`\n\n    if (!newValue.equals(currentParsedValue) || !userTypingRef.current || formatter) {\n      // Update value as effect\n      setInputValue(newValue, userTypingRef.current);\n    }\n  }, [value]); // ============================ Cursor ============================\n\n  useLayoutUpdateEffect(function () {\n    if (formatter) {\n      restoreCursor();\n    }\n  }, [inputValue]); // ============================ Render ============================\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-focused\"), focus), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-readonly\"), readOnly), _defineProperty(_classNames, \"\".concat(prefixCls, \"-not-a-number\"), decimalValue.isNaN()), _defineProperty(_classNames, \"\".concat(prefixCls, \"-out-of-range\"), !decimalValue.isInvalidate() && !isInRange(decimalValue)), _classNames)),\n    style: style,\n    onFocus: function onFocus() {\n      setFocus(true);\n    },\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd,\n    onBeforeInput: onBeforeInput\n  }, controls && /*#__PURE__*/React.createElement(StepHandler, {\n    prefixCls: prefixCls,\n    upNode: upHandler,\n    downNode: downHandler,\n    upDisabled: upDisabled,\n    downDisabled: downDisabled,\n    onStep: onInternalStep\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(inputClassName, \"-wrap\")\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({\n    autoComplete: \"off\",\n    role: \"spinbutton\",\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": decimalValue.isInvalidate() ? null : decimalValue.toString(),\n    step: step\n  }, inputProps, {\n    ref: composeRef(inputRef, ref),\n    className: inputClassName,\n    value: inputValue,\n    onChange: onInternalInput,\n    disabled: disabled,\n    readOnly: readOnly\n  }))));\n});\nInputNumber.displayName = 'InputNumber';\nexport default InputNumber;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/rc-input-number/es/InputNumber.js"],"names":["_extends","_defineProperty","_typeof","_slicedToArray","_objectWithoutProperties","_excluded","React","classNames","KeyCode","useLayoutUpdateEffect","composeRef","getMiniDecimal","toFixed","getNumberPrecision","num2str","validateNumber","StepHandler","getDecupleSteps","useCursor","useFrame","getDecimalValue","stringMode","decimalValue","isEmpty","toString","toNumber","getDecimalIfValidate","value","decimal","isInvalidate","InputNumber","forwardRef","props","ref","_classNames","_props$prefixCls","prefixCls","className","style","min","max","_props$step","step","defaultValue","disabled","readOnly","upHandler","downHandler","keyboard","_props$controls","controls","parser","formatter","precision","decimalSeparator","onChange","onInput","onPressEnter","onStep","inputProps","inputClassName","concat","inputRef","useRef","_React$useState","useState","_React$useState2","focus","setFocus","userTypingRef","compositionRef","shiftKeyRef","_React$useState3","_React$useState4","setDecimalValue","setUncontrolledDecimalValue","newDecimal","undefined","getPrecision","useCallback","numStr","userTyping","Math","mergedParser","num","String","parsedStr","replace","inputValueRef","mergedFormatter","number","input","current","str","mergedPrecision","separatorStr","_React$useState5","initValue","includes","Number","isNaN","_React$useState6","inputValue","setInternalInputValue","setInputValue","newValue","maxDecimal","useMemo","minDecimal","upDisabled","lessEquals","downDisabled","_useCursor","_useCursor2","recordCursor","restoreCursor","getRangeValue","target","isInRange","triggerValueUpdate","updateValue","isRangeValidate","equals","onNextPromise","collectInputValue","inputStr","finalValue","finalDecimal","nextInputStr","onCompositionStart","onCompositionEnd","onInternalInput","e","onInternalStep","up","_inputRef$current","stepDecimal","negate","add","updatedValue","offset","type","flushInputValue","parsedValue","formatValue","onBeforeInput","onKeyDown","event","which","shiftKey","ENTER","UP","DOWN","preventDefault","onKeyUp","onBlur","currentParsedValue","createElement","onFocus","upNode","downNode","autoComplete","role","displayName"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,eAAP,MAA4B,2CAA5B;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAOC,cAAP,MAA2B,0CAA3B;AACA,OAAOC,wBAAP,MAAqC,oDAArC;AACA,IAAIC,SAAS,GAAG,CAAC,WAAD,EAAc,WAAd,EAA2B,OAA3B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,MAAlD,EAA0D,cAA1D,EAA0E,OAA1E,EAAmF,UAAnF,EAA+F,UAA/F,EAA2G,WAA3G,EAAwH,aAAxH,EAAuI,UAAvI,EAAmJ,UAAnJ,EAA+J,YAA/J,EAA6K,QAA7K,EAAuL,WAAvL,EAAoM,WAApM,EAAiN,kBAAjN,EAAqO,UAArO,EAAiP,SAAjP,EAA4P,cAA5P,EAA4Q,QAA5Q,CAAhB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,qBAAT,QAAsC,kCAAtC;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,OAAOC,cAAP,IAAyBC,OAAzB,EAAkCC,kBAAlC,EAAsDC,OAAtD,EAA+DC,cAA/D,QAAqF,4BAArF;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,eAAe,GAAG,SAASA,eAAT,CAAyBC,UAAzB,EAAqCC,YAArC,EAAmD;AACvE,MAAID,UAAU,IAAIC,YAAY,CAACC,OAAb,EAAlB,EAA0C;AACxC,WAAOD,YAAY,CAACE,QAAb,EAAP;AACD;;AACD,SAAOF,YAAY,CAACG,QAAb,EAAP;AACD,CALD;;AAMA,IAAIC,oBAAoB,GAAG,SAASA,oBAAT,CAA8BC,KAA9B,EAAqC;AAC9D,MAAIC,OAAO,GAAGjB,cAAc,CAACgB,KAAD,CAA5B;AACA,SAAOC,OAAO,CAACC,YAAR,KAAyB,IAAzB,GAAgCD,OAAvC;AACD,CAHD;;AAIA,IAAIE,WAAW,GAAG,aAAaxB,KAAK,CAACyB,UAAN,CAAiB,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AACpE,MAAIC,WAAJ;;AACA,MAAIC,gBAAgB,GAAGH,KAAK,CAACI,SAA7B;AAAA,MACEA,SAAS,GAAGD,gBAAgB,KAAK,KAAK,CAA1B,GAA8B,iBAA9B,GAAkDA,gBADhE;AAAA,MAEEE,SAAS,GAAGL,KAAK,CAACK,SAFpB;AAAA,MAGEC,KAAK,GAAGN,KAAK,CAACM,KAHhB;AAAA,MAIEC,GAAG,GAAGP,KAAK,CAACO,GAJd;AAAA,MAKEC,GAAG,GAAGR,KAAK,CAACQ,GALd;AAAA,MAMEC,WAAW,GAAGT,KAAK,CAACU,IANtB;AAAA,MAOEA,IAAI,GAAGD,WAAW,KAAK,KAAK,CAArB,GAAyB,CAAzB,GAA6BA,WAPtC;AAAA,MAQEE,YAAY,GAAGX,KAAK,CAACW,YARvB;AAAA,MASEhB,KAAK,GAAGK,KAAK,CAACL,KAThB;AAAA,MAUEiB,QAAQ,GAAGZ,KAAK,CAACY,QAVnB;AAAA,MAWEC,QAAQ,GAAGb,KAAK,CAACa,QAXnB;AAAA,MAYEC,SAAS,GAAGd,KAAK,CAACc,SAZpB;AAAA,MAaEC,WAAW,GAAGf,KAAK,CAACe,WAbtB;AAAA,MAcEC,QAAQ,GAAGhB,KAAK,CAACgB,QAdnB;AAAA,MAeEC,eAAe,GAAGjB,KAAK,CAACkB,QAf1B;AAAA,MAgBEA,QAAQ,GAAGD,eAAe,KAAK,KAAK,CAAzB,GAA6B,IAA7B,GAAoCA,eAhBjD;AAAA,MAiBE5B,UAAU,GAAGW,KAAK,CAACX,UAjBrB;AAAA,MAkBE8B,MAAM,GAAGnB,KAAK,CAACmB,MAlBjB;AAAA,MAmBEC,SAAS,GAAGpB,KAAK,CAACoB,SAnBpB;AAAA,MAoBEC,SAAS,GAAGrB,KAAK,CAACqB,SApBpB;AAAA,MAqBEC,gBAAgB,GAAGtB,KAAK,CAACsB,gBArB3B;AAAA,MAsBEC,QAAQ,GAAGvB,KAAK,CAACuB,QAtBnB;AAAA,MAuBEC,OAAO,GAAGxB,KAAK,CAACwB,OAvBlB;AAAA,MAwBEC,YAAY,GAAGzB,KAAK,CAACyB,YAxBvB;AAAA,MAyBEC,MAAM,GAAG1B,KAAK,CAAC0B,MAzBjB;AAAA,MA0BEC,UAAU,GAAGvD,wBAAwB,CAAC4B,KAAD,EAAQ3B,SAAR,CA1BvC;;AA2BA,MAAIuD,cAAc,GAAG,GAAGC,MAAH,CAAUzB,SAAV,EAAqB,QAArB,CAArB;AACA,MAAI0B,QAAQ,GAAGxD,KAAK,CAACyD,MAAN,CAAa,IAAb,CAAf;;AACA,MAAIC,eAAe,GAAG1D,KAAK,CAAC2D,QAAN,CAAe,KAAf,CAAtB;AAAA,MACEC,gBAAgB,GAAG/D,cAAc,CAAC6D,eAAD,EAAkB,CAAlB,CADnC;AAAA,MAEEG,KAAK,GAAGD,gBAAgB,CAAC,CAAD,CAF1B;AAAA,MAGEE,QAAQ,GAAGF,gBAAgB,CAAC,CAAD,CAH7B;;AAIA,MAAIG,aAAa,GAAG/D,KAAK,CAACyD,MAAN,CAAa,KAAb,CAApB;AACA,MAAIO,cAAc,GAAGhE,KAAK,CAACyD,MAAN,CAAa,KAAb,CAArB;AACA,MAAIQ,WAAW,GAAGjE,KAAK,CAACyD,MAAN,CAAa,KAAb,CAAlB,CArCoE,CAuCpE;AACA;;AACA,MAAIS,gBAAgB,GAAGlE,KAAK,CAAC2D,QAAN,CAAe,YAAY;AAC9C,WAAOtD,cAAc,CAACgB,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqCA,KAArC,GAA6CgB,YAA9C,CAArB;AACD,GAFoB,CAAvB;AAAA,MAGE8B,gBAAgB,GAAGtE,cAAc,CAACqE,gBAAD,EAAmB,CAAnB,CAHnC;AAAA,MAIElD,YAAY,GAAGmD,gBAAgB,CAAC,CAAD,CAJjC;AAAA,MAKEC,eAAe,GAAGD,gBAAgB,CAAC,CAAD,CALpC;;AAMA,WAASE,2BAAT,CAAqCC,UAArC,EAAiD;AAC/C,QAAIjD,KAAK,KAAKkD,SAAd,EAAyB;AACvBH,MAAAA,eAAe,CAACE,UAAD,CAAf;AACD;AACF,GAnDmE,CAqDpE;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,MAAIE,YAAY,GAAGxE,KAAK,CAACyE,WAAN,CAAkB,UAAUC,MAAV,EAAkBC,UAAlB,EAA8B;AACjE,QAAIA,UAAJ,EAAgB;AACd,aAAOJ,SAAP;AACD;;AACD,QAAIxB,SAAS,IAAI,CAAjB,EAAoB;AAClB,aAAOA,SAAP;AACD;;AACD,WAAO6B,IAAI,CAAC1C,GAAL,CAAS3B,kBAAkB,CAACmE,MAAD,CAA3B,EAAqCnE,kBAAkB,CAAC6B,IAAD,CAAvD,CAAP;AACD,GARkB,EAQhB,CAACW,SAAD,EAAYX,IAAZ,CARgB,CAAnB,CAjEoE,CA2EpE;;AACA,MAAIyC,YAAY,GAAG7E,KAAK,CAACyE,WAAN,CAAkB,UAAUK,GAAV,EAAe;AAClD,QAAIJ,MAAM,GAAGK,MAAM,CAACD,GAAD,CAAnB;;AACA,QAAIjC,MAAJ,EAAY;AACV,aAAOA,MAAM,CAAC6B,MAAD,CAAb;AACD;;AACD,QAAIM,SAAS,GAAGN,MAAhB;;AACA,QAAI1B,gBAAJ,EAAsB;AACpBgC,MAAAA,SAAS,GAAGA,SAAS,CAACC,OAAV,CAAkBjC,gBAAlB,EAAoC,GAApC,CAAZ;AACD,KARiD,CAUlD;;;AACA,WAAOgC,SAAS,CAACC,OAAV,CAAkB,WAAlB,EAA+B,EAA/B,CAAP;AACD,GAZkB,EAYhB,CAACpC,MAAD,EAASG,gBAAT,CAZgB,CAAnB,CA5EoE,CA0FpE;;AACA,MAAIkC,aAAa,GAAGlF,KAAK,CAACyD,MAAN,CAAa,EAAb,CAApB;AACA,MAAI0B,eAAe,GAAGnF,KAAK,CAACyE,WAAN,CAAkB,UAAUW,MAAV,EAAkBT,UAAlB,EAA8B;AACpE,QAAI7B,SAAJ,EAAe;AACb,aAAOA,SAAS,CAACsC,MAAD,EAAS;AACvBT,QAAAA,UAAU,EAAEA,UADW;AAEvBU,QAAAA,KAAK,EAAEN,MAAM,CAACG,aAAa,CAACI,OAAf;AAFU,OAAT,CAAhB;AAID;;AACD,QAAIC,GAAG,GAAG,OAAOH,MAAP,KAAkB,QAAlB,GAA6B5E,OAAO,CAAC4E,MAAD,CAApC,GAA+CA,MAAzD,CAPoE,CASpE;;AACA,QAAI,CAACT,UAAL,EAAiB;AACf,UAAIa,eAAe,GAAGhB,YAAY,CAACe,GAAD,EAAMZ,UAAN,CAAlC;;AACA,UAAIlE,cAAc,CAAC8E,GAAD,CAAd,KAAwBvC,gBAAgB,IAAIwC,eAAe,IAAI,CAA/D,CAAJ,EAAuE;AACrE;AACA,YAAIC,YAAY,GAAGzC,gBAAgB,IAAI,GAAvC;AACAuC,QAAAA,GAAG,GAAGjF,OAAO,CAACiF,GAAD,EAAME,YAAN,EAAoBD,eAApB,CAAb;AACD;AACF;;AACD,WAAOD,GAAP;AACD,GAnBqB,EAmBnB,CAACzC,SAAD,EAAY0B,YAAZ,EAA0BxB,gBAA1B,CAnBmB,CAAtB,CA5FoE,CAiHpE;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,MAAI0C,gBAAgB,GAAG1F,KAAK,CAAC2D,QAAN,CAAe,YAAY;AAC9C,QAAIgC,SAAS,GAAGtD,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmDA,YAAnD,GAAkEhB,KAAlF;;AACA,QAAIL,YAAY,CAACO,YAAb,MAA+B,CAAC,QAAD,EAAW,QAAX,EAAqBqE,QAArB,CAA8BhG,OAAO,CAAC+F,SAAD,CAArC,CAAnC,EAAsF;AACpF,aAAOE,MAAM,CAACC,KAAP,CAAaH,SAAb,IAA0B,EAA1B,GAA+BA,SAAtC;AACD;;AACD,WAAOR,eAAe,CAACnE,YAAY,CAACE,QAAb,EAAD,EAA0B,KAA1B,CAAtB;AACD,GANoB,CAAvB;AAAA,MAOE6E,gBAAgB,GAAGlG,cAAc,CAAC6F,gBAAD,EAAmB,CAAnB,CAPnC;AAAA,MAQEM,UAAU,GAAGD,gBAAgB,CAAC,CAAD,CAR/B;AAAA,MASEE,qBAAqB,GAAGF,gBAAgB,CAAC,CAAD,CAT1C;;AAUAb,EAAAA,aAAa,CAACI,OAAd,GAAwBU,UAAxB,CArIoE,CAuIpE;;AACA,WAASE,aAAT,CAAuBC,QAAvB,EAAiCxB,UAAjC,EAA6C;AAC3CsB,IAAAA,qBAAqB,CAACd,eAAe,EACrC;AACA;AACA;AACAgB,IAAAA,QAAQ,CAAC5E,YAAT,KAA0B4E,QAAQ,CAACjF,QAAT,CAAkB,KAAlB,CAA1B,GAAqDiF,QAAQ,CAACjF,QAAT,CAAkB,CAACyD,UAAnB,CAJhB,EAIgDA,UAJhD,CAAhB,CAArB;AAKD,GA9ImE,CAgJpE;;;AACA,MAAIyB,UAAU,GAAGpG,KAAK,CAACqG,OAAN,CAAc,YAAY;AACzC,WAAOjF,oBAAoB,CAACc,GAAD,CAA3B;AACD,GAFgB,EAEd,CAACA,GAAD,EAAMa,SAAN,CAFc,CAAjB;AAGA,MAAIuD,UAAU,GAAGtG,KAAK,CAACqG,OAAN,CAAc,YAAY;AACzC,WAAOjF,oBAAoB,CAACa,GAAD,CAA3B;AACD,GAFgB,EAEd,CAACA,GAAD,EAAMc,SAAN,CAFc,CAAjB;AAGA,MAAIwD,UAAU,GAAGvG,KAAK,CAACqG,OAAN,CAAc,YAAY;AACzC,QAAI,CAACD,UAAD,IAAe,CAACpF,YAAhB,IAAgCA,YAAY,CAACO,YAAb,EAApC,EAAiE;AAC/D,aAAO,KAAP;AACD;;AACD,WAAO6E,UAAU,CAACI,UAAX,CAAsBxF,YAAtB,CAAP;AACD,GALgB,EAKd,CAACoF,UAAD,EAAapF,YAAb,CALc,CAAjB;AAMA,MAAIyF,YAAY,GAAGzG,KAAK,CAACqG,OAAN,CAAc,YAAY;AAC3C,QAAI,CAACC,UAAD,IAAe,CAACtF,YAAhB,IAAgCA,YAAY,CAACO,YAAb,EAApC,EAAiE;AAC/D,aAAO,KAAP;AACD;;AACD,WAAOP,YAAY,CAACwF,UAAb,CAAwBF,UAAxB,CAAP;AACD,GALkB,EAKhB,CAACA,UAAD,EAAatF,YAAb,CALgB,CAAnB,CA7JoE,CAoKpE;;AACA,MAAI0F,UAAU,GAAG9F,SAAS,CAAC4C,QAAQ,CAAC8B,OAAV,EAAmBzB,KAAnB,CAA1B;AAAA,MACE8C,WAAW,GAAG9G,cAAc,CAAC6G,UAAD,EAAa,CAAb,CAD9B;AAAA,MAEEE,YAAY,GAAGD,WAAW,CAAC,CAAD,CAF5B;AAAA,MAGEE,aAAa,GAAGF,WAAW,CAAC,CAAD,CAH7B,CArKoE,CA0KpE;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,MAAIG,aAAa,GAAG,SAASA,aAAT,CAAuBC,MAAvB,EAA+B;AACjD;AACA,QAAIX,UAAU,IAAI,CAACW,MAAM,CAACP,UAAP,CAAkBJ,UAAlB,CAAnB,EAAkD;AAChD,aAAOA,UAAP;AACD,KAJgD,CAMjD;;;AACA,QAAIE,UAAU,IAAI,CAACA,UAAU,CAACE,UAAX,CAAsBO,MAAtB,CAAnB,EAAkD;AAChD,aAAOT,UAAP;AACD;;AACD,WAAO,IAAP;AACD,GAXD;AAaA;AACF;AACA;;;AACE,MAAIU,SAAS,GAAG,SAASA,SAAT,CAAmBD,MAAnB,EAA2B;AACzC,WAAO,CAACD,aAAa,CAACC,MAAD,CAArB;AACD,GAFD;AAIA;AACF;AACA;AACA;;;AACE,MAAIE,kBAAkB,GAAG,SAASA,kBAAT,CAA4Bd,QAA5B,EAAsCxB,UAAtC,EAAkD;AACzE,QAAIuC,WAAW,GAAGf,QAAlB;AACA,QAAIgB,eAAe,GAAGH,SAAS,CAACE,WAAD,CAAT,IAA0BA,WAAW,CAACjG,OAAZ,EAAhD,CAFyE,CAIzE;AACA;AACA;;AACA,QAAI,CAACiG,WAAW,CAACjG,OAAZ,EAAD,IAA0B,CAAC0D,UAA/B,EAA2C;AACzC;AACAuC,MAAAA,WAAW,GAAGJ,aAAa,CAACI,WAAD,CAAb,IAA8BA,WAA5C;AACAC,MAAAA,eAAe,GAAG,IAAlB;AACD;;AACD,QAAI,CAAC5E,QAAD,IAAa,CAACD,QAAd,IAA0B6E,eAA9B,EAA+C;AAC7C,UAAIzC,MAAM,GAAGwC,WAAW,CAAChG,QAAZ,EAAb;AACA,UAAIsE,eAAe,GAAGhB,YAAY,CAACE,MAAD,EAASC,UAAT,CAAlC;;AACA,UAAIa,eAAe,IAAI,CAAvB,EAA0B;AACxB0B,QAAAA,WAAW,GAAG7G,cAAc,CAACC,OAAO,CAACoE,MAAD,EAAS,GAAT,EAAcc,eAAd,CAAR,CAA5B,CADwB,CAGxB;AACA;;AACA,YAAI,CAACwB,SAAS,CAACE,WAAD,CAAd,EAA6B;AAC3BA,UAAAA,WAAW,GAAG7G,cAAc,CAACC,OAAO,CAACoE,MAAD,EAAS,GAAT,EAAcc,eAAd,EAA+B,IAA/B,CAAR,CAA5B;AACD;AACF,OAX4C,CAa7C;;;AACA,UAAI,CAAC0B,WAAW,CAACE,MAAZ,CAAmBpG,YAAnB,CAAL,EAAuC;AACrCqD,QAAAA,2BAA2B,CAAC6C,WAAD,CAA3B;AACAjE,QAAAA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACiE,WAAW,CAACjG,OAAZ,KAAwB,IAAxB,GAA+BH,eAAe,CAACC,UAAD,EAAamG,WAAb,CAA/C,CAA5D,CAFqC,CAIrC;;AACA,YAAI7F,KAAK,KAAKkD,SAAd,EAAyB;AACvB2B,UAAAA,aAAa,CAACgB,WAAD,EAAcvC,UAAd,CAAb;AACD;AACF;;AACD,aAAOuC,WAAP;AACD;;AACD,WAAOlG,YAAP;AACD,GAtCD,CA1MoE,CAkPpE;;;AACA,MAAIqG,aAAa,GAAGxG,QAAQ,EAA5B,CAnPoE,CAqPpE;;AACA,MAAIyG,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,QAA3B,EAAqC;AAC3DX,IAAAA,YAAY,GAD+C,CAG3D;;AACAX,IAAAA,qBAAqB,CAACsB,QAAD,CAArB,CAJ2D,CAM3D;;AACA,QAAI,CAACvD,cAAc,CAACsB,OAApB,EAA6B;AAC3B,UAAIkC,UAAU,GAAG3C,YAAY,CAAC0C,QAAD,CAA7B;AACA,UAAIE,YAAY,GAAGpH,cAAc,CAACmH,UAAD,CAAjC;;AACA,UAAI,CAACC,YAAY,CAAC3B,KAAb,EAAL,EAA2B;AACzBmB,QAAAA,kBAAkB,CAACQ,YAAD,EAAe,IAAf,CAAlB;AACD;AACF,KAb0D,CAe3D;;;AACAvE,IAAAA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACqE,QAAD,CAAzD,CAhB2D,CAkB3D;AACA;;AACAF,IAAAA,aAAa,CAAC,YAAY;AACxB,UAAIK,YAAY,GAAGH,QAAnB;;AACA,UAAI,CAAC1E,MAAL,EAAa;AACX6E,QAAAA,YAAY,GAAGH,QAAQ,CAACtC,OAAT,CAAiB,IAAjB,EAAuB,GAAvB,CAAf;AACD;;AACD,UAAIyC,YAAY,KAAKH,QAArB,EAA+B;AAC7BD,QAAAA,iBAAiB,CAACI,YAAD,CAAjB;AACD;AACF,KARY,CAAb;AASD,GA7BD,CAtPoE,CAqRpE;;;AACA,MAAIC,kBAAkB,GAAG,SAASA,kBAAT,GAA8B;AACrD3D,IAAAA,cAAc,CAACsB,OAAf,GAAyB,IAAzB;AACD,GAFD;;AAGA,MAAIsC,gBAAgB,GAAG,SAASA,gBAAT,GAA4B;AACjD5D,IAAAA,cAAc,CAACsB,OAAf,GAAyB,KAAzB;AACAgC,IAAAA,iBAAiB,CAAC9D,QAAQ,CAAC8B,OAAT,CAAiBjE,KAAlB,CAAjB;AACD,GAHD,CAzRoE,CA8RpE;;;AACA,MAAIwG,eAAe,GAAG,SAASA,eAAT,CAAyBC,CAAzB,EAA4B;AAChDR,IAAAA,iBAAiB,CAACQ,CAAC,CAACf,MAAF,CAAS1F,KAAV,CAAjB;AACD,GAFD,CA/RoE,CAmSpE;;;AACA,MAAI0G,cAAc,GAAG,SAASA,cAAT,CAAwBC,EAAxB,EAA4B;AAC/C,QAAIC,iBAAJ,CAD+C,CAE/C;;;AACA,QAAID,EAAE,IAAIzB,UAAN,IAAoB,CAACyB,EAAD,IAAOvB,YAA/B,EAA6C;AAC3C;AACD,KAL8C,CAO/C;AACA;;;AACA1C,IAAAA,aAAa,CAACuB,OAAd,GAAwB,KAAxB;AACA,QAAI4C,WAAW,GAAG7H,cAAc,CAAC4D,WAAW,CAACqB,OAAZ,GAAsB3E,eAAe,CAACyB,IAAD,CAArC,GAA8CA,IAA/C,CAAhC;;AACA,QAAI,CAAC4F,EAAL,EAAS;AACPE,MAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,EAAd;AACD;;AACD,QAAIpB,MAAM,GAAG,CAAC/F,YAAY,IAAIX,cAAc,CAAC,CAAD,CAA/B,EAAoC+H,GAApC,CAAwCF,WAAW,CAAChH,QAAZ,EAAxC,CAAb;AACA,QAAImH,YAAY,GAAGpB,kBAAkB,CAACF,MAAD,EAAS,KAAT,CAArC;AACA3D,IAAAA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACtC,eAAe,CAACC,UAAD,EAAasH,YAAb,CAAhB,EAA4C;AAChGC,MAAAA,MAAM,EAAErE,WAAW,CAACqB,OAAZ,GAAsB3E,eAAe,CAACyB,IAAD,CAArC,GAA8CA,IAD0C;AAEhGmG,MAAAA,IAAI,EAAEP,EAAE,GAAG,IAAH,GAAU;AAF8E,KAA5C,CAAtD;AAIA,KAACC,iBAAiB,GAAGzE,QAAQ,CAAC8B,OAA9B,MAA2C,IAA3C,IAAmD2C,iBAAiB,KAAK,KAAK,CAA9E,GAAkF,KAAK,CAAvF,GAA2FA,iBAAiB,CAACpE,KAAlB,EAA3F;AACD,GArBD,CApSoE,CA2TpE;;AACA;AACF;AACA;;;AACE,MAAI2E,eAAe,GAAG,SAASA,eAAT,CAAyB7D,UAAzB,EAAqC;AACzD,QAAI8D,WAAW,GAAGpI,cAAc,CAACwE,YAAY,CAACmB,UAAD,CAAb,CAAhC;AACA,QAAI0C,WAAW,GAAGD,WAAlB;;AACA,QAAI,CAACA,WAAW,CAAC3C,KAAZ,EAAL,EAA0B;AACxB;AACA;AACA4C,MAAAA,WAAW,GAAGzB,kBAAkB,CAACwB,WAAD,EAAc9D,UAAd,CAAhC;AACD,KAJD,MAIO;AACL+D,MAAAA,WAAW,GAAG1H,YAAd;AACD;;AACD,QAAIK,KAAK,KAAKkD,SAAd,EAAyB;AACvB;AACA2B,MAAAA,aAAa,CAAClF,YAAD,EAAe,KAAf,CAAb;AACD,KAHD,MAGO,IAAI,CAAC0H,WAAW,CAAC5C,KAAZ,EAAL,EAA0B;AAC/B;AACAI,MAAAA,aAAa,CAACwC,WAAD,EAAc,KAAd,CAAb;AACD;AACF,GAjBD,CA/ToE,CAkVpE;;;AACA,MAAIC,aAAa,GAAG,SAASA,aAAT,GAAyB;AAC3C5E,IAAAA,aAAa,CAACuB,OAAd,GAAwB,IAAxB;AACD,GAFD;;AAGA,MAAIsD,SAAS,GAAG,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AACxC,QAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;AAAA,QACEC,QAAQ,GAAGF,KAAK,CAACE,QADnB;AAEAhF,IAAAA,aAAa,CAACuB,OAAd,GAAwB,IAAxB;;AACA,QAAIyD,QAAJ,EAAc;AACZ9E,MAAAA,WAAW,CAACqB,OAAZ,GAAsB,IAAtB;AACD,KAFD,MAEO;AACLrB,MAAAA,WAAW,CAACqB,OAAZ,GAAsB,KAAtB;AACD;;AACD,QAAIwD,KAAK,KAAK5I,OAAO,CAAC8I,KAAtB,EAA6B;AAC3B,UAAI,CAAChF,cAAc,CAACsB,OAApB,EAA6B;AAC3BvB,QAAAA,aAAa,CAACuB,OAAd,GAAwB,KAAxB;AACD;;AACDkD,MAAAA,eAAe,CAAC,KAAD,CAAf;AACArF,MAAAA,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAAC0F,KAAD,CAAxE;AACD;;AACD,QAAInG,QAAQ,KAAK,KAAjB,EAAwB;AACtB;AACD,KAlBuC,CAoBxC;;;AACA,QAAI,CAACsB,cAAc,CAACsB,OAAhB,IAA2B,CAACpF,OAAO,CAAC+I,EAAT,EAAa/I,OAAO,CAACgJ,IAArB,EAA2BtD,QAA3B,CAAoCkD,KAApC,CAA/B,EAA2E;AACzEf,MAAAA,cAAc,CAAC7H,OAAO,CAAC+I,EAAR,KAAeH,KAAhB,CAAd;AACAD,MAAAA,KAAK,CAACM,cAAN;AACD;AACF,GAzBD;;AA0BA,MAAIC,OAAO,GAAG,SAASA,OAAT,GAAmB;AAC/BrF,IAAAA,aAAa,CAACuB,OAAd,GAAwB,KAAxB;AACArB,IAAAA,WAAW,CAACqB,OAAZ,GAAsB,KAAtB;AACD,GAHD,CAhXoE,CAqXpE;;;AACA,MAAI+D,MAAM,GAAG,SAASA,MAAT,GAAkB;AAC7Bb,IAAAA,eAAe,CAAC,KAAD,CAAf;AACA1E,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAC,IAAAA,aAAa,CAACuB,OAAd,GAAwB,KAAxB;AACD,GAJD,CAtXoE,CA4XpE;AACA;;;AACAnF,EAAAA,qBAAqB,CAAC,YAAY;AAChC,QAAI,CAACa,YAAY,CAACO,YAAb,EAAL,EAAkC;AAChC2E,MAAAA,aAAa,CAAClF,YAAD,EAAe,KAAf,CAAb;AACD;AACF,GAJoB,EAIlB,CAAC+B,SAAD,CAJkB,CAArB,CA9XoE,CAoYpE;;AACA5C,EAAAA,qBAAqB,CAAC,YAAY;AAChC,QAAIgG,QAAQ,GAAG9F,cAAc,CAACgB,KAAD,CAA7B;AACA+C,IAAAA,eAAe,CAAC+B,QAAD,CAAf;AACA,QAAImD,kBAAkB,GAAGjJ,cAAc,CAACwE,YAAY,CAACmB,UAAD,CAAb,CAAvC,CAHgC,CAKhC;AACA;;AACA,QAAI,CAACG,QAAQ,CAACiB,MAAT,CAAgBkC,kBAAhB,CAAD,IAAwC,CAACvF,aAAa,CAACuB,OAAvD,IAAkExC,SAAtE,EAAiF;AAC/E;AACAoD,MAAAA,aAAa,CAACC,QAAD,EAAWpC,aAAa,CAACuB,OAAzB,CAAb;AACD;AACF,GAXoB,EAWlB,CAACjE,KAAD,CAXkB,CAArB,CArYoE,CAkZpE;;AACAlB,EAAAA,qBAAqB,CAAC,YAAY;AAChC,QAAI2C,SAAJ,EAAe;AACb+D,MAAAA,aAAa;AACd;AACF,GAJoB,EAIlB,CAACb,UAAD,CAJkB,CAArB,CAnZoE,CAyZpE;;AACA,SAAO,aAAahG,KAAK,CAACuJ,aAAN,CAAoB,KAApB,EAA2B;AAC7CxH,IAAAA,SAAS,EAAE9B,UAAU,CAAC6B,SAAD,EAAYC,SAAZ,GAAwBH,WAAW,GAAG,EAAd,EAAkBjC,eAAe,CAACiC,WAAD,EAAc,GAAG2B,MAAH,CAAUzB,SAAV,EAAqB,UAArB,CAAd,EAAgD+B,KAAhD,CAAjC,EAAyFlE,eAAe,CAACiC,WAAD,EAAc,GAAG2B,MAAH,CAAUzB,SAAV,EAAqB,WAArB,CAAd,EAAiDQ,QAAjD,CAAxG,EAAoK3C,eAAe,CAACiC,WAAD,EAAc,GAAG2B,MAAH,CAAUzB,SAAV,EAAqB,WAArB,CAAd,EAAiDS,QAAjD,CAAnL,EAA+O5C,eAAe,CAACiC,WAAD,EAAc,GAAG2B,MAAH,CAAUzB,SAAV,EAAqB,eAArB,CAAd,EAAqDd,YAAY,CAAC8E,KAAb,EAArD,CAA9P,EAA0UnG,eAAe,CAACiC,WAAD,EAAc,GAAG2B,MAAH,CAAUzB,SAAV,EAAqB,eAArB,CAAd,EAAqD,CAACd,YAAY,CAACO,YAAb,EAAD,IAAgC,CAACyF,SAAS,CAAChG,YAAD,CAA/F,CAAzV,EAAycY,WAAje,EADwB;AAE7CI,IAAAA,KAAK,EAAEA,KAFsC;AAG7CwH,IAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B1F,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAL4C;AAM7CuF,IAAAA,MAAM,EAAEA,MANqC;AAO7CT,IAAAA,SAAS,EAAEA,SAPkC;AAQ7CQ,IAAAA,OAAO,EAAEA,OARoC;AAS7CzB,IAAAA,kBAAkB,EAAEA,kBATyB;AAU7CC,IAAAA,gBAAgB,EAAEA,gBAV2B;AAW7Ce,IAAAA,aAAa,EAAEA;AAX8B,GAA3B,EAYjB/F,QAAQ,IAAI,aAAa5C,KAAK,CAACuJ,aAAN,CAAoB7I,WAApB,EAAiC;AAC3DoB,IAAAA,SAAS,EAAEA,SADgD;AAE3D2H,IAAAA,MAAM,EAAEjH,SAFmD;AAG3DkH,IAAAA,QAAQ,EAAEjH,WAHiD;AAI3D8D,IAAAA,UAAU,EAAEA,UAJ+C;AAK3DE,IAAAA,YAAY,EAAEA,YAL6C;AAM3DrD,IAAAA,MAAM,EAAE2E;AANmD,GAAjC,CAZR,EAmBhB,aAAa/H,KAAK,CAACuJ,aAAN,CAAoB,KAApB,EAA2B;AAC1CxH,IAAAA,SAAS,EAAE,GAAGwB,MAAH,CAAUD,cAAV,EAA0B,OAA1B;AAD+B,GAA3B,EAEd,aAAatD,KAAK,CAACuJ,aAAN,CAAoB,OAApB,EAA6B7J,QAAQ,CAAC;AACpDiK,IAAAA,YAAY,EAAE,KADsC;AAEpDC,IAAAA,IAAI,EAAE,YAF8C;AAGpD,qBAAiB3H,GAHmC;AAIpD,qBAAiBC,GAJmC;AAKpD,qBAAiBlB,YAAY,CAACO,YAAb,KAA8B,IAA9B,GAAqCP,YAAY,CAACE,QAAb,EALF;AAMpDkB,IAAAA,IAAI,EAAEA;AAN8C,GAAD,EAOlDiB,UAPkD,EAOtC;AACb1B,IAAAA,GAAG,EAAEvB,UAAU,CAACoD,QAAD,EAAW7B,GAAX,CADF;AAEbI,IAAAA,SAAS,EAAEuB,cAFE;AAGbjC,IAAAA,KAAK,EAAE2E,UAHM;AAIb/C,IAAAA,QAAQ,EAAE4E,eAJG;AAKbvF,IAAAA,QAAQ,EAAEA,QALG;AAMbC,IAAAA,QAAQ,EAAEA;AANG,GAPsC,CAArC,CAFC,CAnBG,CAApB;AAoCD,CA9b8B,CAA/B;AA+bAf,WAAW,CAACqI,WAAZ,GAA0B,aAA1B;AACA,eAAerI,WAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"prefixCls\", \"className\", \"style\", \"min\", \"max\", \"step\", \"defaultValue\", \"value\", \"disabled\", \"readOnly\", \"upHandler\", \"downHandler\", \"keyboard\", \"controls\", \"stringMode\", \"parser\", \"formatter\", \"precision\", \"decimalSeparator\", \"onChange\", \"onInput\", \"onPressEnter\", \"onStep\"];\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { useLayoutUpdateEffect } from \"rc-util/es/hooks/useLayoutEffect\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport getMiniDecimal, { toFixed, getNumberPrecision, num2str, validateNumber } from '@rc-component/mini-decimal';\nimport StepHandler from \"./StepHandler\";\nimport { getDecupleSteps } from \"./utils/numberUtil\";\nimport useCursor from \"./hooks/useCursor\";\nimport useFrame from \"./hooks/useFrame\";\n\n/**\n * We support `stringMode` which need handle correct type when user call in onChange\n * format max or min value\n * 1. if isInvalid return null\n * 2. if precision is undefined, return decimal\n * 3. format with precision\n *    I. if max > 0, round down with precision. Example: max= 3.5, precision=0  afterFormat: 3\n *    II. if max < 0, round up with precision. Example: max= -3.5, precision=0  afterFormat: -4\n *    III. if min > 0, round up with precision. Example: min= 3.5, precision=0  afterFormat: 4\n *    IV. if min < 0, round down with precision. Example: max= -3.5, precision=0  afterFormat: -3\n */\nvar getDecimalValue = function getDecimalValue(stringMode, decimalValue) {\n  if (stringMode || decimalValue.isEmpty()) {\n    return decimalValue.toString();\n  }\n  return decimalValue.toNumber();\n};\nvar getDecimalIfValidate = function getDecimalIfValidate(value) {\n  var decimal = getMiniDecimal(value);\n  return decimal.isInvalidate() ? null : decimal;\n};\nvar InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _classNames;\n  var _props$prefixCls = props.prefixCls,\n    prefixCls = _props$prefixCls === void 0 ? 'rc-input-number' : _props$prefixCls,\n    className = props.className,\n    style = props.style,\n    min = props.min,\n    max = props.max,\n    _props$step = props.step,\n    step = _props$step === void 0 ? 1 : _props$step,\n    defaultValue = props.defaultValue,\n    value = props.value,\n    disabled = props.disabled,\n    readOnly = props.readOnly,\n    upHandler = props.upHandler,\n    downHandler = props.downHandler,\n    keyboard = props.keyboard,\n    _props$controls = props.controls,\n    controls = _props$controls === void 0 ? true : _props$controls,\n    stringMode = props.stringMode,\n    parser = props.parser,\n    formatter = props.formatter,\n    precision = props.precision,\n    decimalSeparator = props.decimalSeparator,\n    onChange = props.onChange,\n    onInput = props.onInput,\n    onPressEnter = props.onPressEnter,\n    onStep = props.onStep,\n    inputProps = _objectWithoutProperties(props, _excluded);\n  var inputClassName = \"\".concat(prefixCls, \"-input\");\n  var inputRef = React.useRef(null);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    focus = _React$useState2[0],\n    setFocus = _React$useState2[1];\n  var userTypingRef = React.useRef(false);\n  var compositionRef = React.useRef(false);\n  var shiftKeyRef = React.useRef(false);\n\n  // ============================ Value =============================\n  // Real value control\n  var _React$useState3 = React.useState(function () {\n      return getMiniDecimal(value !== null && value !== void 0 ? value : defaultValue);\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    decimalValue = _React$useState4[0],\n    setDecimalValue = _React$useState4[1];\n  function setUncontrolledDecimalValue(newDecimal) {\n    if (value === undefined) {\n      setDecimalValue(newDecimal);\n    }\n  }\n\n  // ====================== Parser & Formatter ======================\n  /**\n   * `precision` is used for formatter & onChange.\n   * It will auto generate by `value` & `step`.\n   * But it will not block user typing.\n   *\n   * Note: Auto generate `precision` is used for legacy logic.\n   * We should remove this since we already support high precision with BigInt.\n   *\n   * @param number  Provide which number should calculate precision\n   * @param userTyping  Change by user typing\n   */\n  var getPrecision = React.useCallback(function (numStr, userTyping) {\n    if (userTyping) {\n      return undefined;\n    }\n    if (precision >= 0) {\n      return precision;\n    }\n    return Math.max(getNumberPrecision(numStr), getNumberPrecision(step));\n  }, [precision, step]);\n\n  // >>> Parser\n  var mergedParser = React.useCallback(function (num) {\n    var numStr = String(num);\n    if (parser) {\n      return parser(numStr);\n    }\n    var parsedStr = numStr;\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace(decimalSeparator, '.');\n    }\n\n    // [Legacy] We still support auto convert `$ 123,456` to `123456`\n    return parsedStr.replace(/[^\\w.-]+/g, '');\n  }, [parser, decimalSeparator]);\n\n  // >>> Formatter\n  var inputValueRef = React.useRef('');\n  var mergedFormatter = React.useCallback(function (number, userTyping) {\n    if (formatter) {\n      return formatter(number, {\n        userTyping: userTyping,\n        input: String(inputValueRef.current)\n      });\n    }\n    var str = typeof number === 'number' ? num2str(number) : number;\n\n    // User typing will not auto format with precision directly\n    if (!userTyping) {\n      var mergedPrecision = getPrecision(str, userTyping);\n      if (validateNumber(str) && (decimalSeparator || mergedPrecision >= 0)) {\n        // Separator\n        var separatorStr = decimalSeparator || '.';\n        str = toFixed(str, separatorStr, mergedPrecision);\n      }\n    }\n    return str;\n  }, [formatter, getPrecision, decimalSeparator]);\n\n  // ========================== InputValue ==========================\n  /**\n   * Input text value control\n   *\n   * User can not update input content directly. It update with follow rules by priority:\n   *  1. controlled `value` changed\n   *    * [SPECIAL] Typing like `1.` should not immediately convert to `1`\n   *  2. User typing with format (not precision)\n   *  3. Blur or Enter trigger revalidate\n   */\n  var _React$useState5 = React.useState(function () {\n      var initValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : value;\n      if (decimalValue.isInvalidate() && ['string', 'number'].includes(_typeof(initValue))) {\n        return Number.isNaN(initValue) ? '' : initValue;\n      }\n      return mergedFormatter(decimalValue.toString(), false);\n    }),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    inputValue = _React$useState6[0],\n    setInternalInputValue = _React$useState6[1];\n  inputValueRef.current = inputValue;\n\n  // Should always be string\n  function setInputValue(newValue, userTyping) {\n    setInternalInputValue(mergedFormatter(\n    // Invalidate number is sometime passed by external control, we should let it go\n    // Otherwise is controlled by internal interactive logic which check by userTyping\n    // You can ref 'show limited value when input is not focused' test for more info.\n    newValue.isInvalidate() ? newValue.toString(false) : newValue.toString(!userTyping), userTyping));\n  }\n\n  // >>> Max & Min limit\n  var maxDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(max);\n  }, [max, precision]);\n  var minDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(min);\n  }, [min, precision]);\n  var upDisabled = React.useMemo(function () {\n    if (!maxDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n    return maxDecimal.lessEquals(decimalValue);\n  }, [maxDecimal, decimalValue]);\n  var downDisabled = React.useMemo(function () {\n    if (!minDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n    return decimalValue.lessEquals(minDecimal);\n  }, [minDecimal, decimalValue]);\n\n  // Cursor controller\n  var _useCursor = useCursor(inputRef.current, focus),\n    _useCursor2 = _slicedToArray(_useCursor, 2),\n    recordCursor = _useCursor2[0],\n    restoreCursor = _useCursor2[1];\n\n  // ============================= Data =============================\n  /**\n   * Find target value closet within range.\n   * e.g. [11, 28]:\n   *    3  => 11\n   *    23 => 23\n   *    99 => 28\n   */\n  var getRangeValue = function getRangeValue(target) {\n    // target > max\n    if (maxDecimal && !target.lessEquals(maxDecimal)) {\n      return maxDecimal;\n    }\n\n    // target < min\n    if (minDecimal && !minDecimal.lessEquals(target)) {\n      return minDecimal;\n    }\n    return null;\n  };\n\n  /**\n   * Check value is in [min, max] range\n   */\n  var isInRange = function isInRange(target) {\n    return !getRangeValue(target);\n  };\n\n  /**\n   * Trigger `onChange` if value validated and not equals of origin.\n   * Return the value that re-align in range.\n   */\n  var triggerValueUpdate = function triggerValueUpdate(newValue, userTyping) {\n    var updateValue = newValue;\n    var isRangeValidate = isInRange(updateValue) || updateValue.isEmpty();\n\n    // Skip align value when trigger value is empty.\n    // We just trigger onChange(null)\n    // This should not block user typing\n    if (!updateValue.isEmpty() && !userTyping) {\n      // Revert value in range if needed\n      updateValue = getRangeValue(updateValue) || updateValue;\n      isRangeValidate = true;\n    }\n    if (!readOnly && !disabled && isRangeValidate) {\n      var numStr = updateValue.toString();\n      var mergedPrecision = getPrecision(numStr, userTyping);\n      if (mergedPrecision >= 0) {\n        updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision));\n\n        // When to fixed. The value may out of min & max range.\n        // 4 in [0, 3.8] => 3.8 => 4 (toFixed)\n        if (!isInRange(updateValue)) {\n          updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision, true));\n        }\n      }\n\n      // Trigger event\n      if (!updateValue.equals(decimalValue)) {\n        setUncontrolledDecimalValue(updateValue);\n        onChange === null || onChange === void 0 ? void 0 : onChange(updateValue.isEmpty() ? null : getDecimalValue(stringMode, updateValue));\n\n        // Reformat input if value is not controlled\n        if (value === undefined) {\n          setInputValue(updateValue, userTyping);\n        }\n      }\n      return updateValue;\n    }\n    return decimalValue;\n  };\n\n  // ========================== User Input ==========================\n  var onNextPromise = useFrame();\n\n  // >>> Collect input value\n  var collectInputValue = function collectInputValue(inputStr) {\n    recordCursor();\n\n    // Update inputValue incase input can not parse as number\n    setInternalInputValue(inputStr);\n\n    // Parse number\n    if (!compositionRef.current) {\n      var finalValue = mergedParser(inputStr);\n      var finalDecimal = getMiniDecimal(finalValue);\n      if (!finalDecimal.isNaN()) {\n        triggerValueUpdate(finalDecimal, true);\n      }\n    }\n\n    // Trigger onInput later to let user customize value if they want do handle something after onChange\n    onInput === null || onInput === void 0 ? void 0 : onInput(inputStr);\n\n    // optimize for chinese input experience\n    // https://github.com/ant-design/ant-design/issues/8196\n    onNextPromise(function () {\n      var nextInputStr = inputStr;\n      if (!parser) {\n        nextInputStr = inputStr.replace(/。/g, '.');\n      }\n      if (nextInputStr !== inputStr) {\n        collectInputValue(nextInputStr);\n      }\n    });\n  };\n\n  // >>> Composition\n  var onCompositionStart = function onCompositionStart() {\n    compositionRef.current = true;\n  };\n  var onCompositionEnd = function onCompositionEnd() {\n    compositionRef.current = false;\n    collectInputValue(inputRef.current.value);\n  };\n\n  // >>> Input\n  var onInternalInput = function onInternalInput(e) {\n    collectInputValue(e.target.value);\n  };\n\n  // ============================= Step =============================\n  var onInternalStep = function onInternalStep(up) {\n    var _inputRef$current;\n    // Ignore step since out of range\n    if (up && upDisabled || !up && downDisabled) {\n      return;\n    }\n\n    // Clear typing status since it may caused by up & down key.\n    // We should sync with input value.\n    userTypingRef.current = false;\n    var stepDecimal = getMiniDecimal(shiftKeyRef.current ? getDecupleSteps(step) : step);\n    if (!up) {\n      stepDecimal = stepDecimal.negate();\n    }\n    var target = (decimalValue || getMiniDecimal(0)).add(stepDecimal.toString());\n    var updatedValue = triggerValueUpdate(target, false);\n    onStep === null || onStep === void 0 ? void 0 : onStep(getDecimalValue(stringMode, updatedValue), {\n      offset: shiftKeyRef.current ? getDecupleSteps(step) : step,\n      type: up ? 'up' : 'down'\n    });\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n  };\n\n  // ============================ Flush =============================\n  /**\n   * Flush current input content to trigger value change & re-formatter input if needed\n   */\n  var flushInputValue = function flushInputValue(userTyping) {\n    var parsedValue = getMiniDecimal(mergedParser(inputValue));\n    var formatValue = parsedValue;\n    if (!parsedValue.isNaN()) {\n      // Only validate value or empty value can be re-fill to inputValue\n      // Reassign the formatValue within ranged of trigger control\n      formatValue = triggerValueUpdate(parsedValue, userTyping);\n    } else {\n      formatValue = decimalValue;\n    }\n    if (value !== undefined) {\n      // Reset back with controlled value first\n      setInputValue(decimalValue, false);\n    } else if (!formatValue.isNaN()) {\n      // Reset input back since no validate value\n      setInputValue(formatValue, false);\n    }\n  };\n\n  // Solve the issue of the event triggering sequence when entering numbers in chinese input (Safari)\n  var onBeforeInput = function onBeforeInput() {\n    userTypingRef.current = true;\n  };\n  var onKeyDown = function onKeyDown(event) {\n    var which = event.which,\n      shiftKey = event.shiftKey;\n    userTypingRef.current = true;\n    if (shiftKey) {\n      shiftKeyRef.current = true;\n    } else {\n      shiftKeyRef.current = false;\n    }\n    if (which === KeyCode.ENTER) {\n      if (!compositionRef.current) {\n        userTypingRef.current = false;\n      }\n      flushInputValue(false);\n      onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter(event);\n    }\n    if (keyboard === false) {\n      return;\n    }\n\n    // Do step\n    if (!compositionRef.current && [KeyCode.UP, KeyCode.DOWN].includes(which)) {\n      onInternalStep(KeyCode.UP === which);\n      event.preventDefault();\n    }\n  };\n  var onKeyUp = function onKeyUp() {\n    userTypingRef.current = false;\n    shiftKeyRef.current = false;\n  };\n\n  // >>> Focus & Blur\n  var onBlur = function onBlur() {\n    flushInputValue(false);\n    setFocus(false);\n    userTypingRef.current = false;\n  };\n\n  // ========================== Controlled ==========================\n  // Input by precision\n  useLayoutUpdateEffect(function () {\n    if (!decimalValue.isInvalidate()) {\n      setInputValue(decimalValue, false);\n    }\n  }, [precision]);\n\n  // Input by value\n  useLayoutUpdateEffect(function () {\n    var newValue = getMiniDecimal(value);\n    setDecimalValue(newValue);\n    var currentParsedValue = getMiniDecimal(mergedParser(inputValue));\n\n    // When user typing from `1.2` to `1.`, we should not convert to `1` immediately.\n    // But let it go if user set `formatter`\n    if (!newValue.equals(currentParsedValue) || !userTypingRef.current || formatter) {\n      // Update value as effect\n      setInputValue(newValue, userTypingRef.current);\n    }\n  }, [value]);\n\n  // ============================ Cursor ============================\n  useLayoutUpdateEffect(function () {\n    if (formatter) {\n      restoreCursor();\n    }\n  }, [inputValue]);\n\n  // ============================ Render ============================\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-focused\"), focus), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-readonly\"), readOnly), _defineProperty(_classNames, \"\".concat(prefixCls, \"-not-a-number\"), decimalValue.isNaN()), _defineProperty(_classNames, \"\".concat(prefixCls, \"-out-of-range\"), !decimalValue.isInvalidate() && !isInRange(decimalValue)), _classNames)),\n    style: style,\n    onFocus: function onFocus() {\n      setFocus(true);\n    },\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd,\n    onBeforeInput: onBeforeInput\n  }, controls && /*#__PURE__*/React.createElement(StepHandler, {\n    prefixCls: prefixCls,\n    upNode: upHandler,\n    downNode: downHandler,\n    upDisabled: upDisabled,\n    downDisabled: downDisabled,\n    onStep: onInternalStep\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(inputClassName, \"-wrap\")\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({\n    autoComplete: \"off\",\n    role: \"spinbutton\",\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": decimalValue.isInvalidate() ? null : decimalValue.toString(),\n    step: step\n  }, inputProps, {\n    ref: composeRef(inputRef, ref),\n    className: inputClassName,\n    value: inputValue,\n    onChange: onInternalInput,\n    disabled: disabled,\n    readOnly: readOnly\n  }))));\n});\nInputNumber.displayName = 'InputNumber';\nexport default InputNumber;"]},"metadata":{},"sourceType":"module"}