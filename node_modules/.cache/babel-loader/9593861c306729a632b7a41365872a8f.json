{"ast":null,"code":"var _jsxFileName = \"/Users/luna/Desktop/Project/Git Project/rick-Morty/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\nimport './App.css';\nimport axios from 'axios';\nimport * as animationData2 from \"../src/assets/lottieFiles/anime3.json\";\nimport Lottie from 'react-lottie';\nimport { ChangeComponent } from './redux/lottie-redux/userAction';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const lottie = useSelector(state => state.user.iconrender);\n  const [monsters, setMonsters] = useState([]);\n  const [page, setPage] = useState(1);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(ChangeComponent(true));\n\n    const getCountries = async () => {\n      setMonsters([]);\n      console.log(page);\n      let query = `{\n            characters(page: ` + Number(page) + `) {\n              info {\n                count\n              }\n              results {\n                id\n                name\n                status\n                image\n              }\n            }\n            location(id: 1) {\n              id\n            }\n            episodesByIds(ids: [1, 2]) {\n              id\n            }\n          }`;\n      const options = {\n        method: 'POST',\n        url: 'https://rickandmortyapi.com/graphql',\n        headers: {\n          'content-type': 'application/json'\n        },\n        data: {\n          query: query\n        }\n      };\n      axios.request(options).then(response => setMonsters(response.data.data.characters.results)).catch(function (error) {\n        console.error(error);\n      });\n    };\n\n    getCountries();\n  }, [page]); // load the animation asset\n\n  const defaultOptions2 = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData2,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"Rick&Morty Rolodex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"0 0 50px 0\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        className: \"btn_pre\",\n        onClick: () => {\n          page > 1 && setPage(page - 1);\n        },\n        children: \"previous page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"btn_next\",\n        onClick: () => setPage(page + 1),\n        children: \"next page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), lottie && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"anime-loading\",\n      children: /*#__PURE__*/_jsxDEV(Lottie, {\n        options: defaultOptions2,\n        onContextMenu: event => event.preventDefault()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this), monsters && /*#__PURE__*/_jsxDEV(CardList, {\n      monsters: monsters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"3CUnzgNOxQNkrxf6OuiYWr0wgCk=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/src/App.js"],"names":["useState","useEffect","CardList","SearchBox","axios","animationData2","Lottie","ChangeComponent","useDispatch","useSelector","Button","App","lottie","state","user","iconrender","monsters","setMonsters","page","setPage","dispatch","getCountries","console","log","query","Number","options","method","url","headers","data","request","then","response","characters","results","catch","error","defaultOptions2","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","margin","event","preventDefault"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\n\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\nimport './App.css';\nimport axios from 'axios';\nimport * as animationData2 from \"../src/assets/lottieFiles/anime3.json\";\nimport Lottie from 'react-lottie';\nimport { ChangeComponent } from './redux/lottie-redux/userAction';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button } from 'antd';\n\nconst App = () => {\n  const lottie = useSelector((state) => state.user.iconrender);\n  const [monsters, setMonsters] = useState([]);\n  const [page, setPage] = useState(1);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(ChangeComponent(true))\n    const getCountries = async () => {\n      setMonsters([])\n      console.log(page);\n      let query = `{\n            characters(page: `+ Number(page) + `) {\n              info {\n                count\n              }\n              results {\n                id\n                name\n                status\n                image\n              }\n            }\n            location(id: 1) {\n              id\n            }\n            episodesByIds(ids: [1, 2]) {\n              id\n            }\n          }`\n      const options = {\n        method: 'POST',\n        url: 'https://rickandmortyapi.com/graphql',\n        headers: {\n          'content-type': 'application/json',\n        },\n        data: {\n          query: query\n        }\n      };\n      axios\n        .request(options)\n        .then((response) => setMonsters(response.data.data.characters.results)\n        )\n        .catch(function (error) {\n          console.error(error);\n        });\n    };\n    \n  getCountries()\n  }, [page]);\n\n  // load the animation asset\n  const defaultOptions2 = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData2,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n\n\n  return (\n    <div className='App'>\n      <h1 className='app-title'>Rick&Morty Rolodex</h1>\n\n      <div style={{margin: \"0 0 50px 0\"}}>\n        <Button className='btn_pre' onClick={()=> {page > 1 && setPage(page-1)}}>previous page</Button>\n        <Button className='btn_next' onClick={()=> setPage(page+1)}>next page</Button>\n      </div>\n     {lottie && <div className='anime-loading'>\n        <Lottie\n          options={defaultOptions2}\n          onContextMenu={(event) => event.preventDefault()}\n          />\n      </div>}\n     {monsters && <CardList monsters={monsters} />}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}