{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n/**\n * Cursor rule:\n * 1. Only `showSearch` enabled\n * 2. Only `open` is `true`\n * 3. When typing, set `open` to `true` which hit rule of 2\n *\n * Accessibility:\n * - https://www.w3.org/TR/wai-aria-practices/examples/combobox/aria1.1pattern/listbox-combo.html\n */\n\nimport * as React from 'react';\nimport { useRef } from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport MultipleSelector from \"./MultipleSelector\";\nimport SingleSelector from \"./SingleSelector\";\nimport useLock from \"../hooks/useLock\";\nimport { isValidateOpenKey } from \"../utils/keyUtil\";\n\nvar Selector = function Selector(props, ref) {\n  var inputRef = useRef(null);\n  var compositionStatusRef = useRef(false);\n  var prefixCls = props.prefixCls,\n      open = props.open,\n      mode = props.mode,\n      showSearch = props.showSearch,\n      tokenWithEnter = props.tokenWithEnter,\n      autoClearSearchValue = props.autoClearSearchValue,\n      onSearch = props.onSearch,\n      onSearchSubmit = props.onSearchSubmit,\n      onToggleOpen = props.onToggleOpen,\n      onInputKeyDown = props.onInputKeyDown,\n      domRef = props.domRef; // ======================= Ref =======================\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      focus: function focus() {\n        inputRef.current.focus();\n      },\n      blur: function blur() {\n        inputRef.current.blur();\n      }\n    };\n  }); // ====================== Input ======================\n\n  var _useLock = useLock(0),\n      _useLock2 = _slicedToArray(_useLock, 2),\n      getInputMouseDown = _useLock2[0],\n      setInputMouseDown = _useLock2[1];\n\n  var onInternalInputKeyDown = function onInternalInputKeyDown(event) {\n    var which = event.which;\n\n    if (which === KeyCode.UP || which === KeyCode.DOWN) {\n      event.preventDefault();\n    }\n\n    if (onInputKeyDown) {\n      onInputKeyDown(event);\n    }\n\n    if (which === KeyCode.ENTER && mode === 'tags' && !compositionStatusRef.current && !open) {\n      // When menu isn't open, OptionList won't trigger a value change\n      // So when enter is pressed, the tag's input value should be emitted here to let selector know\n      onSearchSubmit === null || onSearchSubmit === void 0 ? void 0 : onSearchSubmit(event.target.value);\n    }\n\n    if (isValidateOpenKey(which)) {\n      onToggleOpen(true);\n    }\n  };\n  /**\n   * We can not use `findDOMNode` sine it will get warning,\n   * have to use timer to check if is input element.\n   */\n\n\n  var onInternalInputMouseDown = function onInternalInputMouseDown() {\n    setInputMouseDown(true);\n  }; // When paste come, ignore next onChange\n\n\n  var pastedTextRef = useRef(null);\n\n  var triggerOnSearch = function triggerOnSearch(value) {\n    if (onSearch(value, true, compositionStatusRef.current) !== false) {\n      onToggleOpen(true);\n    }\n  };\n\n  var onInputCompositionStart = function onInputCompositionStart() {\n    compositionStatusRef.current = true;\n  };\n\n  var onInputCompositionEnd = function onInputCompositionEnd(e) {\n    compositionStatusRef.current = false; // Trigger search again to support `tokenSeparators` with typewriting\n\n    if (mode !== 'combobox') {\n      triggerOnSearch(e.target.value);\n    }\n  };\n\n  var onInputChange = function onInputChange(event) {\n    var value = event.target.value; // Pasted text should replace back to origin content\n\n    if (tokenWithEnter && pastedTextRef.current && /[\\r\\n]/.test(pastedTextRef.current)) {\n      // CRLF will be treated as a single space for input element\n      var replacedText = pastedTextRef.current.replace(/[\\r\\n]+$/, '').replace(/\\r\\n/g, ' ').replace(/[\\r\\n]/g, ' ');\n      value = value.replace(replacedText, pastedTextRef.current);\n    }\n\n    pastedTextRef.current = null;\n    triggerOnSearch(value);\n  };\n\n  var onInputPaste = function onInputPaste(e) {\n    var clipboardData = e.clipboardData;\n    var value = clipboardData.getData('text');\n    pastedTextRef.current = value;\n  };\n\n  var onClick = function onClick(_ref) {\n    var target = _ref.target;\n\n    if (target !== inputRef.current) {\n      // Should focus input if click the selector\n      var isIE = document.body.style.msTouchAction !== undefined;\n\n      if (isIE) {\n        setTimeout(function () {\n          inputRef.current.focus();\n        });\n      } else {\n        inputRef.current.focus();\n      }\n    }\n  };\n\n  var onMouseDown = function onMouseDown(event) {\n    var inputMouseDown = getInputMouseDown(); // when mode is combobox, don't prevent default behavior\n    // https://github.com/ant-design/ant-design/issues/37320\n\n    if (event.target !== inputRef.current && !inputMouseDown && mode !== 'combobox') {\n      event.preventDefault();\n    }\n\n    if (mode !== 'combobox' && (!showSearch || !inputMouseDown) || !open) {\n      if (open && autoClearSearchValue !== false) {\n        onSearch('', true, false);\n      }\n\n      onToggleOpen();\n    }\n  }; // ================= Inner Selector ==================\n\n\n  var sharedProps = {\n    inputRef: inputRef,\n    onInputKeyDown: onInternalInputKeyDown,\n    onInputMouseDown: onInternalInputMouseDown,\n    onInputChange: onInputChange,\n    onInputPaste: onInputPaste,\n    onInputCompositionStart: onInputCompositionStart,\n    onInputCompositionEnd: onInputCompositionEnd\n  };\n  var selectNode = mode === 'multiple' || mode === 'tags' ? /*#__PURE__*/React.createElement(MultipleSelector, _extends({}, props, sharedProps)) : /*#__PURE__*/React.createElement(SingleSelector, _extends({}, props, sharedProps));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: domRef,\n    className: \"\".concat(prefixCls, \"-selector\"),\n    onClick: onClick,\n    onMouseDown: onMouseDown\n  }, selectNode);\n};\n\nvar ForwardSelector = /*#__PURE__*/React.forwardRef(Selector);\nForwardSelector.displayName = 'Selector';\nexport default ForwardSelector;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/rc-select/es/Selector/index.js"],"names":["_extends","_slicedToArray","React","useRef","KeyCode","MultipleSelector","SingleSelector","useLock","isValidateOpenKey","Selector","props","ref","inputRef","compositionStatusRef","prefixCls","open","mode","showSearch","tokenWithEnter","autoClearSearchValue","onSearch","onSearchSubmit","onToggleOpen","onInputKeyDown","domRef","useImperativeHandle","focus","current","blur","_useLock","_useLock2","getInputMouseDown","setInputMouseDown","onInternalInputKeyDown","event","which","UP","DOWN","preventDefault","ENTER","target","value","onInternalInputMouseDown","pastedTextRef","triggerOnSearch","onInputCompositionStart","onInputCompositionEnd","e","onInputChange","test","replacedText","replace","onInputPaste","clipboardData","getData","onClick","_ref","isIE","document","body","style","msTouchAction","undefined","setTimeout","onMouseDown","inputMouseDown","sharedProps","onInputMouseDown","selectNode","createElement","className","concat","ForwardSelector","forwardRef","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n/**\n * Cursor rule:\n * 1. Only `showSearch` enabled\n * 2. Only `open` is `true`\n * 3. When typing, set `open` to `true` which hit rule of 2\n *\n * Accessibility:\n * - https://www.w3.org/TR/wai-aria-practices/examples/combobox/aria1.1pattern/listbox-combo.html\n */\n\nimport * as React from 'react';\nimport { useRef } from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport MultipleSelector from \"./MultipleSelector\";\nimport SingleSelector from \"./SingleSelector\";\nimport useLock from \"../hooks/useLock\";\nimport { isValidateOpenKey } from \"../utils/keyUtil\";\nvar Selector = function Selector(props, ref) {\n  var inputRef = useRef(null);\n  var compositionStatusRef = useRef(false);\n  var prefixCls = props.prefixCls,\n    open = props.open,\n    mode = props.mode,\n    showSearch = props.showSearch,\n    tokenWithEnter = props.tokenWithEnter,\n    autoClearSearchValue = props.autoClearSearchValue,\n    onSearch = props.onSearch,\n    onSearchSubmit = props.onSearchSubmit,\n    onToggleOpen = props.onToggleOpen,\n    onInputKeyDown = props.onInputKeyDown,\n    domRef = props.domRef;\n\n  // ======================= Ref =======================\n  React.useImperativeHandle(ref, function () {\n    return {\n      focus: function focus() {\n        inputRef.current.focus();\n      },\n      blur: function blur() {\n        inputRef.current.blur();\n      }\n    };\n  });\n\n  // ====================== Input ======================\n  var _useLock = useLock(0),\n    _useLock2 = _slicedToArray(_useLock, 2),\n    getInputMouseDown = _useLock2[0],\n    setInputMouseDown = _useLock2[1];\n  var onInternalInputKeyDown = function onInternalInputKeyDown(event) {\n    var which = event.which;\n    if (which === KeyCode.UP || which === KeyCode.DOWN) {\n      event.preventDefault();\n    }\n    if (onInputKeyDown) {\n      onInputKeyDown(event);\n    }\n    if (which === KeyCode.ENTER && mode === 'tags' && !compositionStatusRef.current && !open) {\n      // When menu isn't open, OptionList won't trigger a value change\n      // So when enter is pressed, the tag's input value should be emitted here to let selector know\n      onSearchSubmit === null || onSearchSubmit === void 0 ? void 0 : onSearchSubmit(event.target.value);\n    }\n    if (isValidateOpenKey(which)) {\n      onToggleOpen(true);\n    }\n  };\n\n  /**\n   * We can not use `findDOMNode` sine it will get warning,\n   * have to use timer to check if is input element.\n   */\n  var onInternalInputMouseDown = function onInternalInputMouseDown() {\n    setInputMouseDown(true);\n  };\n\n  // When paste come, ignore next onChange\n  var pastedTextRef = useRef(null);\n  var triggerOnSearch = function triggerOnSearch(value) {\n    if (onSearch(value, true, compositionStatusRef.current) !== false) {\n      onToggleOpen(true);\n    }\n  };\n  var onInputCompositionStart = function onInputCompositionStart() {\n    compositionStatusRef.current = true;\n  };\n  var onInputCompositionEnd = function onInputCompositionEnd(e) {\n    compositionStatusRef.current = false;\n\n    // Trigger search again to support `tokenSeparators` with typewriting\n    if (mode !== 'combobox') {\n      triggerOnSearch(e.target.value);\n    }\n  };\n  var onInputChange = function onInputChange(event) {\n    var value = event.target.value;\n\n    // Pasted text should replace back to origin content\n    if (tokenWithEnter && pastedTextRef.current && /[\\r\\n]/.test(pastedTextRef.current)) {\n      // CRLF will be treated as a single space for input element\n      var replacedText = pastedTextRef.current.replace(/[\\r\\n]+$/, '').replace(/\\r\\n/g, ' ').replace(/[\\r\\n]/g, ' ');\n      value = value.replace(replacedText, pastedTextRef.current);\n    }\n    pastedTextRef.current = null;\n    triggerOnSearch(value);\n  };\n  var onInputPaste = function onInputPaste(e) {\n    var clipboardData = e.clipboardData;\n    var value = clipboardData.getData('text');\n    pastedTextRef.current = value;\n  };\n  var onClick = function onClick(_ref) {\n    var target = _ref.target;\n    if (target !== inputRef.current) {\n      // Should focus input if click the selector\n      var isIE = document.body.style.msTouchAction !== undefined;\n      if (isIE) {\n        setTimeout(function () {\n          inputRef.current.focus();\n        });\n      } else {\n        inputRef.current.focus();\n      }\n    }\n  };\n  var onMouseDown = function onMouseDown(event) {\n    var inputMouseDown = getInputMouseDown();\n\n    // when mode is combobox, don't prevent default behavior\n    // https://github.com/ant-design/ant-design/issues/37320\n    if (event.target !== inputRef.current && !inputMouseDown && mode !== 'combobox') {\n      event.preventDefault();\n    }\n    if (mode !== 'combobox' && (!showSearch || !inputMouseDown) || !open) {\n      if (open && autoClearSearchValue !== false) {\n        onSearch('', true, false);\n      }\n      onToggleOpen();\n    }\n  };\n\n  // ================= Inner Selector ==================\n  var sharedProps = {\n    inputRef: inputRef,\n    onInputKeyDown: onInternalInputKeyDown,\n    onInputMouseDown: onInternalInputMouseDown,\n    onInputChange: onInputChange,\n    onInputPaste: onInputPaste,\n    onInputCompositionStart: onInputCompositionStart,\n    onInputCompositionEnd: onInputCompositionEnd\n  };\n  var selectNode = mode === 'multiple' || mode === 'tags' ? /*#__PURE__*/React.createElement(MultipleSelector, _extends({}, props, sharedProps)) : /*#__PURE__*/React.createElement(SingleSelector, _extends({}, props, sharedProps));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: domRef,\n    className: \"\".concat(prefixCls, \"-selector\"),\n    onClick: onClick,\n    onMouseDown: onMouseDown\n  }, selectNode);\n};\nvar ForwardSelector = /*#__PURE__*/React.forwardRef(Selector);\nForwardSelector.displayName = 'Selector';\nexport default ForwardSelector;"]},"metadata":{},"sourceType":"module"}