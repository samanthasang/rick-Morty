{"ast":null,"code":"import classNames from 'classnames';\nimport * as React from 'react';\n\nfunction UnitNumber(_ref) {\n  let {\n    prefixCls,\n    value,\n    current,\n    offset = 0\n  } = _ref;\n  let style;\n\n  if (offset) {\n    style = {\n      position: 'absolute',\n      top: `${offset}00%`,\n      left: 0\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    style: style,\n    className: classNames(`${prefixCls}-only-unit`, {\n      current\n    })\n  }, value);\n}\n\nfunction getOffset(start, end, unit) {\n  let index = start;\n  let offset = 0;\n\n  while ((index + 10) % 10 !== end) {\n    index += unit;\n    offset += unit;\n  }\n\n  return offset;\n}\n\nexport default function SingleNumber(props) {\n  const {\n    prefixCls,\n    count: originCount,\n    value: originValue\n  } = props;\n  const value = Number(originValue);\n  const count = Math.abs(originCount);\n  const [prevValue, setPrevValue] = React.useState(value);\n  const [prevCount, setPrevCount] = React.useState(count); // ============================= Events =============================\n\n  const onTransitionEnd = () => {\n    setPrevValue(value);\n    setPrevCount(count);\n  }; // Fallback if transition event not support\n\n\n  React.useEffect(() => {\n    const timeout = setTimeout(() => {\n      onTransitionEnd();\n    }, 1000);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [value]); // ============================= Render =============================\n  // Render unit list\n\n  let unitNodes;\n  let offsetStyle;\n\n  if (prevValue === value || Number.isNaN(value) || Number.isNaN(prevValue)) {\n    // Nothing to change\n    unitNodes = [/*#__PURE__*/React.createElement(UnitNumber, Object.assign({}, props, {\n      key: value,\n      current: true\n    }))];\n    offsetStyle = {\n      transition: 'none'\n    };\n  } else {\n    unitNodes = []; // Fill basic number units\n\n    const end = value + 10;\n    const unitNumberList = [];\n\n    for (let index = value; index <= end; index += 1) {\n      unitNumberList.push(index);\n    } // Fill with number unit nodes\n\n\n    const prevIndex = unitNumberList.findIndex(n => n % 10 === prevValue);\n    unitNodes = unitNumberList.map((n, index) => {\n      const singleUnit = n % 10;\n      return /*#__PURE__*/React.createElement(UnitNumber, Object.assign({}, props, {\n        key: n,\n        value: singleUnit,\n        offset: index - prevIndex,\n        current: index === prevIndex\n      }));\n    }); // Calculate container offset value\n\n    const unit = prevCount < count ? 1 : -1;\n    offsetStyle = {\n      transform: `translateY(${-getOffset(prevValue, value, unit)}00%)`\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: `${prefixCls}-only`,\n    style: offsetStyle,\n    onTransitionEnd: onTransitionEnd\n  }, unitNodes);\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/badge/SingleNumber.js"],"names":["classNames","React","UnitNumber","_ref","prefixCls","value","current","offset","style","position","top","left","createElement","className","getOffset","start","end","unit","index","SingleNumber","props","count","originCount","originValue","Number","Math","abs","prevValue","setPrevValue","useState","prevCount","setPrevCount","onTransitionEnd","useEffect","timeout","setTimeout","clearTimeout","unitNodes","offsetStyle","isNaN","Object","assign","key","transition","unitNumberList","push","prevIndex","findIndex","n","map","singleUnit","transform"],"mappings":"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","sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nfunction UnitNumber(_ref) {\n  let {\n    prefixCls,\n    value,\n    current,\n    offset = 0\n  } = _ref;\n  let style;\n  if (offset) {\n    style = {\n      position: 'absolute',\n      top: `${offset}00%`,\n      left: 0\n    };\n  }\n  return /*#__PURE__*/React.createElement(\"span\", {\n    style: style,\n    className: classNames(`${prefixCls}-only-unit`, {\n      current\n    })\n  }, value);\n}\nfunction getOffset(start, end, unit) {\n  let index = start;\n  let offset = 0;\n  while ((index + 10) % 10 !== end) {\n    index += unit;\n    offset += unit;\n  }\n  return offset;\n}\nexport default function SingleNumber(props) {\n  const {\n    prefixCls,\n    count: originCount,\n    value: originValue\n  } = props;\n  const value = Number(originValue);\n  const count = Math.abs(originCount);\n  const [prevValue, setPrevValue] = React.useState(value);\n  const [prevCount, setPrevCount] = React.useState(count);\n  // ============================= Events =============================\n  const onTransitionEnd = () => {\n    setPrevValue(value);\n    setPrevCount(count);\n  };\n  // Fallback if transition event not support\n  React.useEffect(() => {\n    const timeout = setTimeout(() => {\n      onTransitionEnd();\n    }, 1000);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [value]);\n  // ============================= Render =============================\n  // Render unit list\n  let unitNodes;\n  let offsetStyle;\n  if (prevValue === value || Number.isNaN(value) || Number.isNaN(prevValue)) {\n    // Nothing to change\n    unitNodes = [/*#__PURE__*/React.createElement(UnitNumber, Object.assign({}, props, {\n      key: value,\n      current: true\n    }))];\n    offsetStyle = {\n      transition: 'none'\n    };\n  } else {\n    unitNodes = [];\n    // Fill basic number units\n    const end = value + 10;\n    const unitNumberList = [];\n    for (let index = value; index <= end; index += 1) {\n      unitNumberList.push(index);\n    }\n    // Fill with number unit nodes\n    const prevIndex = unitNumberList.findIndex(n => n % 10 === prevValue);\n    unitNodes = unitNumberList.map((n, index) => {\n      const singleUnit = n % 10;\n      return /*#__PURE__*/React.createElement(UnitNumber, Object.assign({}, props, {\n        key: n,\n        value: singleUnit,\n        offset: index - prevIndex,\n        current: index === prevIndex\n      }));\n    });\n    // Calculate container offset value\n    const unit = prevCount < count ? 1 : -1;\n    offsetStyle = {\n      transform: `translateY(${-getOffset(prevValue, value, unit)}00%)`\n    };\n  }\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: `${prefixCls}-only`,\n    style: offsetStyle,\n    onTransitionEnd: onTransitionEnd\n  }, unitNodes);\n}"]},"metadata":{},"sourceType":"module"}