{"ast":null,"code":"/* eslint-disable import/prefer-default-export, prefer-destructuring */\nimport { generate } from '@ant-design/colors';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport canUseDom from \"rc-util/es/Dom/canUseDom\";\nimport { updateCSS } from \"rc-util/es/Dom/dynamicCSS\";\nimport warning from '../_util/warning';\nconst dynamicStyleMark = `-ant-${Date.now()}-${Math.random()}`;\nexport function getStyle(globalPrefixCls, theme) {\n  const variables = {};\n\n  const formatColor = (color, updater) => {\n    let clone = color.clone();\n    clone = (updater === null || updater === void 0 ? void 0 : updater(clone)) || clone;\n    return clone.toRgbString();\n  };\n\n  const fillColor = (colorVal, type) => {\n    const baseColor = new TinyColor(colorVal);\n    const colorPalettes = generate(baseColor.toRgbString());\n    variables[`${type}-color`] = formatColor(baseColor);\n    variables[`${type}-color-disabled`] = colorPalettes[1];\n    variables[`${type}-color-hover`] = colorPalettes[4];\n    variables[`${type}-color-active`] = colorPalettes[6];\n    variables[`${type}-color-outline`] = baseColor.clone().setAlpha(0.2).toRgbString();\n    variables[`${type}-color-deprecated-bg`] = colorPalettes[0];\n    variables[`${type}-color-deprecated-border`] = colorPalettes[2];\n  }; // ================ Primary Color ================\n\n\n  if (theme.primaryColor) {\n    fillColor(theme.primaryColor, 'primary');\n    const primaryColor = new TinyColor(theme.primaryColor);\n    const primaryColors = generate(primaryColor.toRgbString()); // Legacy - We should use semantic naming standard\n\n    primaryColors.forEach((color, index) => {\n      variables[`primary-${index + 1}`] = color;\n    }); // Deprecated\n\n    variables['primary-color-deprecated-l-35'] = formatColor(primaryColor, c => c.lighten(35));\n    variables['primary-color-deprecated-l-20'] = formatColor(primaryColor, c => c.lighten(20));\n    variables['primary-color-deprecated-t-20'] = formatColor(primaryColor, c => c.tint(20));\n    variables['primary-color-deprecated-t-50'] = formatColor(primaryColor, c => c.tint(50));\n    variables['primary-color-deprecated-f-12'] = formatColor(primaryColor, c => c.setAlpha(c.getAlpha() * 0.12));\n    const primaryActiveColor = new TinyColor(primaryColors[0]);\n    variables['primary-color-active-deprecated-f-30'] = formatColor(primaryActiveColor, c => c.setAlpha(c.getAlpha() * 0.3));\n    variables['primary-color-active-deprecated-d-02'] = formatColor(primaryActiveColor, c => c.darken(2));\n  } // ================ Success Color ================\n\n\n  if (theme.successColor) {\n    fillColor(theme.successColor, 'success');\n  } // ================ Warning Color ================\n\n\n  if (theme.warningColor) {\n    fillColor(theme.warningColor, 'warning');\n  } // ================= Error Color =================\n\n\n  if (theme.errorColor) {\n    fillColor(theme.errorColor, 'error');\n  } // ================= Info Color ==================\n\n\n  if (theme.infoColor) {\n    fillColor(theme.infoColor, 'info');\n  } // Convert to css variables\n\n\n  const cssList = Object.keys(variables).map(key => `--${globalPrefixCls}-${key}: ${variables[key]};`);\n  return `\n  :root {\n    ${cssList.join('\\n')}\n  }\n  `.trim();\n}\nexport function registerTheme(globalPrefixCls, theme) {\n  const style = getStyle(globalPrefixCls, theme);\n\n  if (canUseDom()) {\n    updateCSS(style, `${dynamicStyleMark}-dynamic-theme`);\n  } else {\n    process.env.NODE_ENV !== \"production\" ? warning(false, 'ConfigProvider', 'SSR do not support dynamic theme with css variables.') : void 0;\n  }\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/config-provider/cssVariables.js"],"names":["generate","TinyColor","canUseDom","updateCSS","warning","dynamicStyleMark","Date","now","Math","random","getStyle","globalPrefixCls","theme","variables","formatColor","color","updater","clone","toRgbString","fillColor","colorVal","type","baseColor","colorPalettes","setAlpha","primaryColor","primaryColors","forEach","index","c","lighten","tint","getAlpha","primaryActiveColor","darken","successColor","warningColor","errorColor","infoColor","cssList","Object","keys","map","key","join","trim","registerTheme","style","process","env","NODE_ENV"],"mappings":"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","sourcesContent":["/* eslint-disable import/prefer-default-export, prefer-destructuring */\nimport { generate } from '@ant-design/colors';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport canUseDom from \"rc-util/es/Dom/canUseDom\";\nimport { updateCSS } from \"rc-util/es/Dom/dynamicCSS\";\nimport warning from '../_util/warning';\nconst dynamicStyleMark = `-ant-${Date.now()}-${Math.random()}`;\nexport function getStyle(globalPrefixCls, theme) {\n  const variables = {};\n  const formatColor = (color, updater) => {\n    let clone = color.clone();\n    clone = (updater === null || updater === void 0 ? void 0 : updater(clone)) || clone;\n    return clone.toRgbString();\n  };\n  const fillColor = (colorVal, type) => {\n    const baseColor = new TinyColor(colorVal);\n    const colorPalettes = generate(baseColor.toRgbString());\n    variables[`${type}-color`] = formatColor(baseColor);\n    variables[`${type}-color-disabled`] = colorPalettes[1];\n    variables[`${type}-color-hover`] = colorPalettes[4];\n    variables[`${type}-color-active`] = colorPalettes[6];\n    variables[`${type}-color-outline`] = baseColor.clone().setAlpha(0.2).toRgbString();\n    variables[`${type}-color-deprecated-bg`] = colorPalettes[0];\n    variables[`${type}-color-deprecated-border`] = colorPalettes[2];\n  };\n  // ================ Primary Color ================\n  if (theme.primaryColor) {\n    fillColor(theme.primaryColor, 'primary');\n    const primaryColor = new TinyColor(theme.primaryColor);\n    const primaryColors = generate(primaryColor.toRgbString());\n    // Legacy - We should use semantic naming standard\n    primaryColors.forEach((color, index) => {\n      variables[`primary-${index + 1}`] = color;\n    });\n    // Deprecated\n    variables['primary-color-deprecated-l-35'] = formatColor(primaryColor, c => c.lighten(35));\n    variables['primary-color-deprecated-l-20'] = formatColor(primaryColor, c => c.lighten(20));\n    variables['primary-color-deprecated-t-20'] = formatColor(primaryColor, c => c.tint(20));\n    variables['primary-color-deprecated-t-50'] = formatColor(primaryColor, c => c.tint(50));\n    variables['primary-color-deprecated-f-12'] = formatColor(primaryColor, c => c.setAlpha(c.getAlpha() * 0.12));\n    const primaryActiveColor = new TinyColor(primaryColors[0]);\n    variables['primary-color-active-deprecated-f-30'] = formatColor(primaryActiveColor, c => c.setAlpha(c.getAlpha() * 0.3));\n    variables['primary-color-active-deprecated-d-02'] = formatColor(primaryActiveColor, c => c.darken(2));\n  }\n  // ================ Success Color ================\n  if (theme.successColor) {\n    fillColor(theme.successColor, 'success');\n  }\n  // ================ Warning Color ================\n  if (theme.warningColor) {\n    fillColor(theme.warningColor, 'warning');\n  }\n  // ================= Error Color =================\n  if (theme.errorColor) {\n    fillColor(theme.errorColor, 'error');\n  }\n  // ================= Info Color ==================\n  if (theme.infoColor) {\n    fillColor(theme.infoColor, 'info');\n  }\n  // Convert to css variables\n  const cssList = Object.keys(variables).map(key => `--${globalPrefixCls}-${key}: ${variables[key]};`);\n  return `\n  :root {\n    ${cssList.join('\\n')}\n  }\n  `.trim();\n}\nexport function registerTheme(globalPrefixCls, theme) {\n  const style = getStyle(globalPrefixCls, theme);\n  if (canUseDom()) {\n    updateCSS(style, `${dynamicStyleMark}-dynamic-theme`);\n  } else {\n    process.env.NODE_ENV !== \"production\" ? warning(false, 'ConfigProvider', 'SSR do not support dynamic theme with css variables.') : void 0;\n  }\n}"]},"metadata":{},"sourceType":"module"}