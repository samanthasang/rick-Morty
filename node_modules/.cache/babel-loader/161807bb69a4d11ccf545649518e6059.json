{"ast":null,"code":"import _defineProperty from \"/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport EnterOutlined from \"@ant-design/icons/es/icons/EnterOutlined\";\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport * as React from 'react';\nimport TextArea from '../input/TextArea';\nimport { cloneElement } from '../_util/reactNode';\nimport useStyle from './style';\n\nvar Editable = function Editable(_ref) {\n  var prefixCls = _ref.prefixCls,\n      ariaLabel = _ref['aria-label'],\n      className = _ref.className,\n      style = _ref.style,\n      direction = _ref.direction,\n      maxLength = _ref.maxLength,\n      _ref$autoSize = _ref.autoSize,\n      autoSize = _ref$autoSize === void 0 ? true : _ref$autoSize,\n      value = _ref.value,\n      onSave = _ref.onSave,\n      onCancel = _ref.onCancel,\n      onEnd = _ref.onEnd,\n      component = _ref.component,\n      _ref$enterIcon = _ref.enterIcon,\n      enterIcon = _ref$enterIcon === void 0 ? /*#__PURE__*/React.createElement(EnterOutlined, null) : _ref$enterIcon;\n  var ref = React.useRef(null);\n  var inComposition = React.useRef(false);\n  var lastKeyCode = React.useRef();\n\n  var _React$useState = React.useState(value),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      current = _React$useState2[0],\n      setCurrent = _React$useState2[1];\n\n  React.useEffect(function () {\n    setCurrent(value);\n  }, [value]);\n  React.useEffect(function () {\n    if (ref.current && ref.current.resizableTextArea) {\n      var textArea = ref.current.resizableTextArea.textArea;\n      textArea.focus();\n      var length = textArea.value.length;\n      textArea.setSelectionRange(length, length);\n    }\n  }, []);\n\n  var onChange = function onChange(_ref2) {\n    var target = _ref2.target;\n    setCurrent(target.value.replace(/[\\n\\r]/g, ''));\n  };\n\n  var onCompositionStart = function onCompositionStart() {\n    inComposition.current = true;\n  };\n\n  var onCompositionEnd = function onCompositionEnd() {\n    inComposition.current = false;\n  };\n\n  var onKeyDown = function onKeyDown(_ref3) {\n    var keyCode = _ref3.keyCode; // We don't record keyCode when IME is using\n\n    if (inComposition.current) return;\n    lastKeyCode.current = keyCode;\n  };\n\n  var confirmChange = function confirmChange() {\n    onSave(current.trim());\n  };\n\n  var onKeyUp = function onKeyUp(_ref4) {\n    var keyCode = _ref4.keyCode,\n        ctrlKey = _ref4.ctrlKey,\n        altKey = _ref4.altKey,\n        metaKey = _ref4.metaKey,\n        shiftKey = _ref4.shiftKey; // Check if it's a real key\n\n    if (lastKeyCode.current === keyCode && !inComposition.current && !ctrlKey && !altKey && !metaKey && !shiftKey) {\n      if (keyCode === KeyCode.ENTER) {\n        confirmChange();\n        onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n      } else if (keyCode === KeyCode.ESC) {\n        onCancel();\n      }\n    }\n  };\n\n  var onBlur = function onBlur() {\n    confirmChange();\n  };\n\n  var textClassName = component ? \"\".concat(prefixCls, \"-\").concat(component) : '';\n\n  var _useStyle = useStyle(prefixCls),\n      _useStyle2 = _slicedToArray(_useStyle, 2),\n      wrapSSR = _useStyle2[0],\n      hashId = _useStyle2[1];\n\n  var textAreaClassName = classNames(prefixCls, \"\".concat(prefixCls, \"-edit-content\"), _defineProperty({}, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), className, textClassName, hashId);\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n    className: textAreaClassName,\n    style: style\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    ref: ref,\n    maxLength: maxLength,\n    value: current,\n    onChange: onChange,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd,\n    onBlur: onBlur,\n    \"aria-label\": ariaLabel,\n    rows: 1,\n    autoSize: autoSize\n  }), enterIcon !== null ? cloneElement(enterIcon, {\n    className: \"\".concat(prefixCls, \"-edit-content-confirm\")\n  }) : null));\n};\n\nexport default Editable;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/typography/Editable.js"],"names":["EnterOutlined","classNames","KeyCode","React","TextArea","cloneElement","useStyle","Editable","_ref","prefixCls","ariaLabel","className","style","direction","maxLength","autoSize","value","onSave","onCancel","onEnd","component","enterIcon","createElement","ref","useRef","inComposition","lastKeyCode","useState","current","setCurrent","useEffect","resizableTextArea","textArea","focus","length","setSelectionRange","onChange","_ref2","target","replace","onCompositionStart","onCompositionEnd","onKeyDown","_ref3","keyCode","confirmChange","trim","onKeyUp","_ref4","ctrlKey","altKey","metaKey","shiftKey","ENTER","ESC","onBlur","textClassName","wrapSSR","hashId","textAreaClassName","rows"],"mappings":"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","sourcesContent":["import EnterOutlined from \"@ant-design/icons/es/icons/EnterOutlined\";\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport * as React from 'react';\nimport TextArea from '../input/TextArea';\nimport { cloneElement } from '../_util/reactNode';\nimport useStyle from './style';\nconst Editable = _ref => {\n  let {\n    prefixCls,\n    'aria-label': ariaLabel,\n    className,\n    style,\n    direction,\n    maxLength,\n    autoSize = true,\n    value,\n    onSave,\n    onCancel,\n    onEnd,\n    component,\n    enterIcon = /*#__PURE__*/React.createElement(EnterOutlined, null)\n  } = _ref;\n  const ref = React.useRef(null);\n  const inComposition = React.useRef(false);\n  const lastKeyCode = React.useRef();\n  const [current, setCurrent] = React.useState(value);\n  React.useEffect(() => {\n    setCurrent(value);\n  }, [value]);\n  React.useEffect(() => {\n    if (ref.current && ref.current.resizableTextArea) {\n      const {\n        textArea\n      } = ref.current.resizableTextArea;\n      textArea.focus();\n      const {\n        length\n      } = textArea.value;\n      textArea.setSelectionRange(length, length);\n    }\n  }, []);\n  const onChange = _ref2 => {\n    let {\n      target\n    } = _ref2;\n    setCurrent(target.value.replace(/[\\n\\r]/g, ''));\n  };\n  const onCompositionStart = () => {\n    inComposition.current = true;\n  };\n  const onCompositionEnd = () => {\n    inComposition.current = false;\n  };\n  const onKeyDown = _ref3 => {\n    let {\n      keyCode\n    } = _ref3;\n    // We don't record keyCode when IME is using\n    if (inComposition.current) return;\n    lastKeyCode.current = keyCode;\n  };\n  const confirmChange = () => {\n    onSave(current.trim());\n  };\n  const onKeyUp = _ref4 => {\n    let {\n      keyCode,\n      ctrlKey,\n      altKey,\n      metaKey,\n      shiftKey\n    } = _ref4;\n    // Check if it's a real key\n    if (lastKeyCode.current === keyCode && !inComposition.current && !ctrlKey && !altKey && !metaKey && !shiftKey) {\n      if (keyCode === KeyCode.ENTER) {\n        confirmChange();\n        onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n      } else if (keyCode === KeyCode.ESC) {\n        onCancel();\n      }\n    }\n  };\n  const onBlur = () => {\n    confirmChange();\n  };\n  const textClassName = component ? `${prefixCls}-${component}` : '';\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const textAreaClassName = classNames(prefixCls, `${prefixCls}-edit-content`, {\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  }, className, textClassName, hashId);\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n    className: textAreaClassName,\n    style: style\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    ref: ref,\n    maxLength: maxLength,\n    value: current,\n    onChange: onChange,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd,\n    onBlur: onBlur,\n    \"aria-label\": ariaLabel,\n    rows: 1,\n    autoSize: autoSize\n  }), enterIcon !== null ? cloneElement(enterIcon, {\n    className: `${prefixCls}-edit-content-confirm`\n  }) : null));\n};\nexport default Editable;"]},"metadata":{},"sourceType":"module"}