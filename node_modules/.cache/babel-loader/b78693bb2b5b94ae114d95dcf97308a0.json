{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport toNodeArray from \"rc-util/es/Children/toArray\";\nimport warning, { noteOnce } from \"rc-util/es/warning\";\nimport * as React from 'react';\nimport { isMultiple } from \"../BaseSelect\";\nimport { toArray } from \"./commonUtil\";\nimport { convertChildrenToData } from \"./legacyUtil\";\n\nfunction warningProps(props) {\n  var mode = props.mode,\n      options = props.options,\n      children = props.children,\n      backfill = props.backfill,\n      allowClear = props.allowClear,\n      placeholder = props.placeholder,\n      getInputElement = props.getInputElement,\n      showSearch = props.showSearch,\n      onSearch = props.onSearch,\n      defaultOpen = props.defaultOpen,\n      autoFocus = props.autoFocus,\n      labelInValue = props.labelInValue,\n      value = props.value,\n      inputValue = props.inputValue,\n      optionLabelProp = props.optionLabelProp;\n  var multiple = isMultiple(mode);\n  var mergedShowSearch = showSearch !== undefined ? showSearch : multiple || mode === 'combobox';\n  var mergedOptions = options || convertChildrenToData(children); // `tags` should not set option as disabled\n\n  warning(mode !== 'tags' || mergedOptions.every(function (opt) {\n    return !opt.disabled;\n  }), 'Please avoid setting option to disabled in tags mode since user can always type text as tag.'); // `combobox` & `tags` should option be `string` type\n\n  if (mode === 'tags' || mode === 'combobox') {\n    var hasNumberValue = mergedOptions.some(function (item) {\n      if (item.options) {\n        return item.options.some(function (opt) {\n          return typeof ('value' in opt ? opt.value : opt.key) === 'number';\n        });\n      }\n\n      return typeof ('value' in item ? item.value : item.key) === 'number';\n    });\n    warning(!hasNumberValue, '`value` of Option should not use number type when `mode` is `tags` or `combobox`.');\n  } // `combobox` should not use `optionLabelProp`\n\n\n  warning(mode !== 'combobox' || !optionLabelProp, '`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly.'); // Only `combobox` support `backfill`\n\n  warning(mode === 'combobox' || !backfill, '`backfill` only works with `combobox` mode.'); // Only `combobox` support `getInputElement`\n\n  warning(mode === 'combobox' || !getInputElement, '`getInputElement` only work with `combobox` mode.'); // Customize `getInputElement` should not use `allowClear` & `placeholder`\n\n  noteOnce(mode !== 'combobox' || !getInputElement || !allowClear || !placeholder, 'Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`.'); // `onSearch` should use in `combobox` or `showSearch`\n\n  if (onSearch && !mergedShowSearch && mode !== 'combobox' && mode !== 'tags') {\n    warning(false, '`onSearch` should work with `showSearch` instead of use alone.');\n  }\n\n  noteOnce(!defaultOpen || autoFocus, '`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autoFocus` if needed.');\n\n  if (value !== undefined && value !== null) {\n    var values = toArray(value);\n    warning(!labelInValue || values.every(function (val) {\n      return _typeof(val) === 'object' && ('key' in val || 'value' in val);\n    }), '`value` should in shape of `{ value: string | number, label?: ReactNode }` when you set `labelInValue` to `true`');\n    warning(!multiple || Array.isArray(value), '`value` should be array when `mode` is `multiple` or `tags`');\n  } // Syntactic sugar should use correct children type\n\n\n  if (children) {\n    var invalidateChildType = null;\n    toNodeArray(children).some(function (node) {\n      if (! /*#__PURE__*/React.isValidElement(node) || !node.type) {\n        return false;\n      }\n\n      var _ref = node,\n          type = _ref.type;\n\n      if (type.isSelectOption) {\n        return false;\n      }\n\n      if (type.isSelectOptGroup) {\n        var allChildrenValid = toNodeArray(node.props.children).every(function (subNode) {\n          if (! /*#__PURE__*/React.isValidElement(subNode) || !node.type || subNode.type.isSelectOption) {\n            return true;\n          }\n\n          invalidateChildType = subNode.type;\n          return false;\n        });\n\n        if (allChildrenValid) {\n          return false;\n        }\n\n        return true;\n      }\n\n      invalidateChildType = type;\n      return true;\n    });\n\n    if (invalidateChildType) {\n      warning(false, \"`children` should be `Select.Option` or `Select.OptGroup` instead of `\".concat(invalidateChildType.displayName || invalidateChildType.name || invalidateChildType, \"`.\"));\n    }\n\n    warning(inputValue === undefined, '`inputValue` is deprecated, please use `searchValue` instead.');\n  }\n} // value in Select option should not be null\n// note: OptGroup has options too\n\n\nexport function warningNullOptions(options, fieldNames) {\n  if (options) {\n    var recursiveOptions = function recursiveOptions(optionsList) {\n      var inGroup = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      for (var i = 0; i < optionsList.length; i++) {\n        var option = optionsList[i];\n\n        if (option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.value] === null) {\n          warning(false, '`value` in Select options should not be `null`.');\n          return true;\n        }\n\n        if (!inGroup && Array.isArray(option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.options]) && recursiveOptions(option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.options], true)) {\n          break;\n        }\n      }\n    };\n\n    recursiveOptions(options);\n  }\n}\nexport default warningProps;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/rc-select/es/utils/warningPropsUtil.js"],"names":["_typeof","toNodeArray","warning","noteOnce","React","isMultiple","toArray","convertChildrenToData","warningProps","props","mode","options","children","backfill","allowClear","placeholder","getInputElement","showSearch","onSearch","defaultOpen","autoFocus","labelInValue","value","inputValue","optionLabelProp","multiple","mergedShowSearch","undefined","mergedOptions","every","opt","disabled","hasNumberValue","some","item","key","values","val","Array","isArray","invalidateChildType","node","isValidElement","type","_ref","isSelectOption","isSelectOptGroup","allChildrenValid","subNode","concat","displayName","name","warningNullOptions","fieldNames","recursiveOptions","optionsList","inGroup","arguments","length","i","option"],"mappings":"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","sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport toNodeArray from \"rc-util/es/Children/toArray\";\nimport warning, { noteOnce } from \"rc-util/es/warning\";\nimport * as React from 'react';\nimport { isMultiple } from \"../BaseSelect\";\nimport { toArray } from \"./commonUtil\";\nimport { convertChildrenToData } from \"./legacyUtil\";\nfunction warningProps(props) {\n  var mode = props.mode,\n    options = props.options,\n    children = props.children,\n    backfill = props.backfill,\n    allowClear = props.allowClear,\n    placeholder = props.placeholder,\n    getInputElement = props.getInputElement,\n    showSearch = props.showSearch,\n    onSearch = props.onSearch,\n    defaultOpen = props.defaultOpen,\n    autoFocus = props.autoFocus,\n    labelInValue = props.labelInValue,\n    value = props.value,\n    inputValue = props.inputValue,\n    optionLabelProp = props.optionLabelProp;\n  var multiple = isMultiple(mode);\n  var mergedShowSearch = showSearch !== undefined ? showSearch : multiple || mode === 'combobox';\n  var mergedOptions = options || convertChildrenToData(children);\n\n  // `tags` should not set option as disabled\n  warning(mode !== 'tags' || mergedOptions.every(function (opt) {\n    return !opt.disabled;\n  }), 'Please avoid setting option to disabled in tags mode since user can always type text as tag.');\n\n  // `combobox` & `tags` should option be `string` type\n  if (mode === 'tags' || mode === 'combobox') {\n    var hasNumberValue = mergedOptions.some(function (item) {\n      if (item.options) {\n        return item.options.some(function (opt) {\n          return typeof ('value' in opt ? opt.value : opt.key) === 'number';\n        });\n      }\n      return typeof ('value' in item ? item.value : item.key) === 'number';\n    });\n    warning(!hasNumberValue, '`value` of Option should not use number type when `mode` is `tags` or `combobox`.');\n  }\n\n  // `combobox` should not use `optionLabelProp`\n  warning(mode !== 'combobox' || !optionLabelProp, '`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly.');\n\n  // Only `combobox` support `backfill`\n  warning(mode === 'combobox' || !backfill, '`backfill` only works with `combobox` mode.');\n\n  // Only `combobox` support `getInputElement`\n  warning(mode === 'combobox' || !getInputElement, '`getInputElement` only work with `combobox` mode.');\n\n  // Customize `getInputElement` should not use `allowClear` & `placeholder`\n  noteOnce(mode !== 'combobox' || !getInputElement || !allowClear || !placeholder, 'Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`.');\n\n  // `onSearch` should use in `combobox` or `showSearch`\n  if (onSearch && !mergedShowSearch && mode !== 'combobox' && mode !== 'tags') {\n    warning(false, '`onSearch` should work with `showSearch` instead of use alone.');\n  }\n  noteOnce(!defaultOpen || autoFocus, '`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autoFocus` if needed.');\n  if (value !== undefined && value !== null) {\n    var values = toArray(value);\n    warning(!labelInValue || values.every(function (val) {\n      return _typeof(val) === 'object' && ('key' in val || 'value' in val);\n    }), '`value` should in shape of `{ value: string | number, label?: ReactNode }` when you set `labelInValue` to `true`');\n    warning(!multiple || Array.isArray(value), '`value` should be array when `mode` is `multiple` or `tags`');\n  }\n\n  // Syntactic sugar should use correct children type\n  if (children) {\n    var invalidateChildType = null;\n    toNodeArray(children).some(function (node) {\n      if (! /*#__PURE__*/React.isValidElement(node) || !node.type) {\n        return false;\n      }\n      var _ref = node,\n        type = _ref.type;\n      if (type.isSelectOption) {\n        return false;\n      }\n      if (type.isSelectOptGroup) {\n        var allChildrenValid = toNodeArray(node.props.children).every(function (subNode) {\n          if (! /*#__PURE__*/React.isValidElement(subNode) || !node.type || subNode.type.isSelectOption) {\n            return true;\n          }\n          invalidateChildType = subNode.type;\n          return false;\n        });\n        if (allChildrenValid) {\n          return false;\n        }\n        return true;\n      }\n      invalidateChildType = type;\n      return true;\n    });\n    if (invalidateChildType) {\n      warning(false, \"`children` should be `Select.Option` or `Select.OptGroup` instead of `\".concat(invalidateChildType.displayName || invalidateChildType.name || invalidateChildType, \"`.\"));\n    }\n    warning(inputValue === undefined, '`inputValue` is deprecated, please use `searchValue` instead.');\n  }\n}\n\n// value in Select option should not be null\n// note: OptGroup has options too\nexport function warningNullOptions(options, fieldNames) {\n  if (options) {\n    var recursiveOptions = function recursiveOptions(optionsList) {\n      var inGroup = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      for (var i = 0; i < optionsList.length; i++) {\n        var option = optionsList[i];\n        if (option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.value] === null) {\n          warning(false, '`value` in Select options should not be `null`.');\n          return true;\n        }\n        if (!inGroup && Array.isArray(option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.options]) && recursiveOptions(option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.options], true)) {\n          break;\n        }\n      }\n    };\n    recursiveOptions(options);\n  }\n}\nexport default warningProps;"]},"metadata":{},"sourceType":"module"}