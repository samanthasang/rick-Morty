{"ast":null,"code":"import classNames from 'classnames';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style';\nimport { isPresetColor } from '../_util/colors';\n\nconst Ribbon = _ref => {\n  let {\n    className,\n    prefixCls: customizePrefixCls,\n    style,\n    color,\n    children,\n    text,\n    placement = 'end'\n  } = _ref;\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('ribbon', customizePrefixCls);\n  const colorInPreset = isPresetColor(color, false);\n  const ribbonCls = classNames(prefixCls, `${prefixCls}-placement-${placement}`, {\n    [`${prefixCls}-rtl`]: direction === 'rtl',\n    [`${prefixCls}-color-${color}`]: colorInPreset\n  }, className);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const colorStyle = {};\n  const cornerColorStyle = {};\n\n  if (color && !colorInPreset) {\n    colorStyle.background = color;\n    cornerColorStyle.color = color;\n  }\n\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(`${prefixCls}-wrapper`, hashId)\n  }, children, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(ribbonCls, hashId),\n    style: Object.assign(Object.assign({}, colorStyle), style)\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: `${prefixCls}-text`\n  }, text), /*#__PURE__*/React.createElement(\"div\", {\n    className: `${prefixCls}-corner`,\n    style: cornerColorStyle\n  }))));\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  Ribbon.displayName = 'Ribbon';\n}\n\nexport default Ribbon;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/badge/Ribbon.js"],"names":["classNames","React","ConfigContext","useStyle","isPresetColor","Ribbon","_ref","className","prefixCls","customizePrefixCls","style","color","children","text","placement","getPrefixCls","direction","useContext","colorInPreset","ribbonCls","wrapSSR","hashId","colorStyle","cornerColorStyle","background","createElement","Object","assign","process","env","NODE_ENV","displayName"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,QAAP,MAAqB,SAArB;AACA,SAASC,aAAT,QAA8B,iBAA9B;;AACA,MAAMC,MAAM,GAAGC,IAAI,IAAI;AACrB,MAAI;AACFC,IAAAA,SADE;AAEFC,IAAAA,SAAS,EAAEC,kBAFT;AAGFC,IAAAA,KAHE;AAIFC,IAAAA,KAJE;AAKFC,IAAAA,QALE;AAMFC,IAAAA,IANE;AAOFC,IAAAA,SAAS,GAAG;AAPV,MAQAR,IARJ;AASA,QAAM;AACJS,IAAAA,YADI;AAEJC,IAAAA;AAFI,MAGFf,KAAK,CAACgB,UAAN,CAAiBf,aAAjB,CAHJ;AAIA,QAAMM,SAAS,GAAGO,YAAY,CAAC,QAAD,EAAWN,kBAAX,CAA9B;AACA,QAAMS,aAAa,GAAGd,aAAa,CAACO,KAAD,EAAQ,KAAR,CAAnC;AACA,QAAMQ,SAAS,GAAGnB,UAAU,CAACQ,SAAD,EAAa,GAAEA,SAAU,cAAaM,SAAU,EAAhD,EAAmD;AAC7E,KAAE,GAAEN,SAAU,MAAd,GAAsBQ,SAAS,KAAK,KADyC;AAE7E,KAAE,GAAER,SAAU,UAASG,KAAM,EAA7B,GAAiCO;AAF4C,GAAnD,EAGzBX,SAHyB,CAA5B;AAIA,QAAM,CAACa,OAAD,EAAUC,MAAV,IAAoBlB,QAAQ,CAACK,SAAD,CAAlC;AACA,QAAMc,UAAU,GAAG,EAAnB;AACA,QAAMC,gBAAgB,GAAG,EAAzB;;AACA,MAAIZ,KAAK,IAAI,CAACO,aAAd,EAA6B;AAC3BI,IAAAA,UAAU,CAACE,UAAX,GAAwBb,KAAxB;AACAY,IAAAA,gBAAgB,CAACZ,KAAjB,GAAyBA,KAAzB;AACD;;AACD,SAAOS,OAAO,EAAE,aAAanB,KAAK,CAACwB,aAAN,CAAoB,KAApB,EAA2B;AACtDlB,IAAAA,SAAS,EAAEP,UAAU,CAAE,GAAEQ,SAAU,UAAd,EAAyBa,MAAzB;AADiC,GAA3B,EAE1BT,QAF0B,EAEhB,aAAaX,KAAK,CAACwB,aAAN,CAAoB,KAApB,EAA2B;AACnDlB,IAAAA,SAAS,EAAEP,UAAU,CAACmB,SAAD,EAAYE,MAAZ,CAD8B;AAEnDX,IAAAA,KAAK,EAAEgB,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,UAAlB,CAAd,EAA6CZ,KAA7C;AAF4C,GAA3B,EAGvB,aAAaT,KAAK,CAACwB,aAAN,CAAoB,MAApB,EAA4B;AAC1ClB,IAAAA,SAAS,EAAG,GAAEC,SAAU;AADkB,GAA5B,EAEbK,IAFa,CAHU,EAKhB,aAAaZ,KAAK,CAACwB,aAAN,CAAoB,KAApB,EAA2B;AAChDlB,IAAAA,SAAS,EAAG,GAAEC,SAAU,SADwB;AAEhDE,IAAAA,KAAK,EAAEa;AAFyC,GAA3B,CALG,CAFG,CAAf,CAAd;AAWD,CAtCD;;AAuCA,IAAIK,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCzB,EAAAA,MAAM,CAAC0B,WAAP,GAAqB,QAArB;AACD;;AACD,eAAe1B,MAAf","sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style';\nimport { isPresetColor } from '../_util/colors';\nconst Ribbon = _ref => {\n  let {\n    className,\n    prefixCls: customizePrefixCls,\n    style,\n    color,\n    children,\n    text,\n    placement = 'end'\n  } = _ref;\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('ribbon', customizePrefixCls);\n  const colorInPreset = isPresetColor(color, false);\n  const ribbonCls = classNames(prefixCls, `${prefixCls}-placement-${placement}`, {\n    [`${prefixCls}-rtl`]: direction === 'rtl',\n    [`${prefixCls}-color-${color}`]: colorInPreset\n  }, className);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const colorStyle = {};\n  const cornerColorStyle = {};\n  if (color && !colorInPreset) {\n    colorStyle.background = color;\n    cornerColorStyle.color = color;\n  }\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(`${prefixCls}-wrapper`, hashId)\n  }, children, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(ribbonCls, hashId),\n    style: Object.assign(Object.assign({}, colorStyle), style)\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: `${prefixCls}-text`\n  }, text), /*#__PURE__*/React.createElement(\"div\", {\n    className: `${prefixCls}-corner`,\n    style: cornerColorStyle\n  }))));\n};\nif (process.env.NODE_ENV !== 'production') {\n  Ribbon.displayName = 'Ribbon';\n}\nexport default Ribbon;"]},"metadata":{},"sourceType":"module"}