{"ast":null,"code":"import _slicedToArray from \"/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { render } from \"rc-util/es/React/render\";\nimport * as React from 'react';\nimport ConfigProvider, { globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useMessage, { useInternalMessage } from './useMessage';\nimport { wrapPromiseFn } from './util';\nvar message = null;\n\nvar act = function act(callback) {\n  return callback();\n};\n\nvar taskQueue = [];\nvar defaultGlobalConfig = {};\n\nfunction getGlobalContext() {\n  var _defaultGlobalConfig = defaultGlobalConfig,\n      globalPrefixCls = _defaultGlobalConfig.prefixCls,\n      globalGetContainer = _defaultGlobalConfig.getContainer,\n      duration = _defaultGlobalConfig.duration,\n      rtl = _defaultGlobalConfig.rtl,\n      maxCount = _defaultGlobalConfig.maxCount,\n      top = _defaultGlobalConfig.top;\n  var mergedPrefixCls = globalPrefixCls !== null && globalPrefixCls !== void 0 ? globalPrefixCls : globalConfig().getPrefixCls('message');\n  var mergedContainer = (globalGetContainer === null || globalGetContainer === void 0 ? void 0 : globalGetContainer()) || document.body;\n  return {\n    prefixCls: mergedPrefixCls,\n    container: mergedContainer,\n    duration: duration,\n    rtl: rtl,\n    maxCount: maxCount,\n    top: top\n  };\n}\n\nvar GlobalHolder = /*#__PURE__*/React.forwardRef(function (_, ref) {\n  var initializeMessageConfig = function initializeMessageConfig() {\n    var _getGlobalContext = getGlobalContext(),\n        prefixCls = _getGlobalContext.prefixCls,\n        container = _getGlobalContext.container,\n        maxCount = _getGlobalContext.maxCount,\n        duration = _getGlobalContext.duration,\n        rtl = _getGlobalContext.rtl,\n        top = _getGlobalContext.top;\n\n    return {\n      prefixCls: prefixCls,\n      getContainer: function getContainer() {\n        return container;\n      },\n      maxCount: maxCount,\n      duration: duration,\n      rtl: rtl,\n      top: top\n    };\n  };\n\n  var _React$useState = React.useState(initializeMessageConfig),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      messageConfig = _React$useState2[0],\n      setMessageConfig = _React$useState2[1];\n\n  var _useInternalMessage = useInternalMessage(messageConfig),\n      _useInternalMessage2 = _slicedToArray(_useInternalMessage, 2),\n      api = _useInternalMessage2[0],\n      holder = _useInternalMessage2[1];\n\n  var global = globalConfig();\n  var rootPrefixCls = global.getRootPrefixCls();\n  var rootIconPrefixCls = global.getIconPrefixCls();\n\n  var sync = function sync() {\n    setMessageConfig(initializeMessageConfig);\n  };\n\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, function () {\n    var instance = Object.assign({}, api);\n    Object.keys(instance).forEach(function (method) {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance: instance,\n      sync: sync\n    };\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls\n  }, holder);\n});\n\nfunction flushNotice() {\n  if (!message) {\n    var holderFragment = document.createDocumentFragment();\n    var newMessage = {\n      fragment: holderFragment\n    };\n    message = newMessage; // Delay render to avoid sync issue\n\n    act(function () {\n      render( /*#__PURE__*/React.createElement(GlobalHolder, {\n        ref: function ref(node) {\n          var _ref = node || {},\n              instance = _ref.instance,\n              sync = _ref.sync; // React 18 test env will throw if call immediately in ref\n\n\n          Promise.resolve().then(function () {\n            if (!newMessage.instance && instance) {\n              newMessage.instance = instance;\n              newMessage.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  } // Notification not ready\n\n\n  if (!message.instance) {\n    return;\n  } // >>> Execute task\n\n\n  taskQueue.forEach(function (task) {\n    var type = task.type,\n        skipped = task.skipped; // Only `skipped` when user call notice but cancel it immediately\n    // and instance not ready\n\n    if (!skipped) {\n      switch (type) {\n        case 'open':\n          {\n            act(function () {\n              var closeFn = message.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n              closeFn === null || closeFn === void 0 ? void 0 : closeFn.then(task.resolve);\n              task.setCloseFn(closeFn);\n            });\n            break;\n          }\n\n        case 'destroy':\n          act(function () {\n            message === null || message === void 0 ? void 0 : message.instance.destroy(task.key);\n          });\n          break;\n        // Other type open\n\n        default:\n          {\n            act(function () {\n              var _message$instance;\n\n              var closeFn = (_message$instance = message.instance)[type].apply(_message$instance, _toConsumableArray(task.args));\n\n              closeFn === null || closeFn === void 0 ? void 0 : closeFn.then(task.resolve);\n              task.setCloseFn(closeFn);\n            });\n          }\n      }\n    }\n  }); // Clean up\n\n  taskQueue = [];\n} // ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\n\n\nfunction setMessageGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config); // Trigger sync for it\n\n  act(function () {\n    var _a;\n\n    (_a = message === null || message === void 0 ? void 0 : message.sync) === null || _a === void 0 ? void 0 : _a.call(message);\n  });\n}\n\nfunction open(config) {\n  var result = wrapPromiseFn(function (resolve) {\n    var closeFn;\n    var task = {\n      type: 'open',\n      config: config,\n      resolve: resolve,\n      setCloseFn: function setCloseFn(fn) {\n        closeFn = fn;\n      }\n    };\n    taskQueue.push(task);\n    return function () {\n      if (closeFn) {\n        act(function () {\n          closeFn();\n        });\n      } else {\n        task.skipped = true;\n      }\n    };\n  });\n  flushNotice();\n  return result;\n}\n\nfunction typeOpen(type, args) {\n  // Warning if exist theme\n  if (process.env.NODE_ENV !== 'production') {\n    warnContext('message');\n  }\n\n  var result = wrapPromiseFn(function (resolve) {\n    var closeFn;\n    var task = {\n      type: type,\n      args: args,\n      resolve: resolve,\n      setCloseFn: function setCloseFn(fn) {\n        closeFn = fn;\n      }\n    };\n    taskQueue.push(task);\n    return function () {\n      if (closeFn) {\n        act(function () {\n          closeFn();\n        });\n      } else {\n        task.skipped = true;\n      }\n    };\n  });\n  flushNotice();\n  return result;\n}\n\nfunction destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key: key\n  });\n  flushNotice();\n}\n\nvar methods = ['success', 'info', 'warning', 'error', 'loading'];\nvar baseStaticMethods = {\n  open: open,\n  destroy: destroy,\n  config: setMessageGlobalConfig,\n  useMessage: useMessage,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nvar staticMethods = baseStaticMethods;\nmethods.forEach(function (type) {\n  staticMethods[type] = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return typeOpen(type, args);\n  };\n}); // ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\n\nvar noop = function noop() {};\n/** @private Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\n\n\nexport var actWrapper = noop;\n\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = function actWrapper(wrapper) {\n    act = wrapper;\n  };\n}\n/** @private Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\n\n\nexport var actDestroy = noop;\n\nif (process.env.NODE_ENV === 'test') {\n  actDestroy = function actDestroy() {\n    message = null;\n  };\n}\n\nexport default staticMethods;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/message/index.js"],"names":["_toConsumableArray","render","React","ConfigProvider","globalConfig","warnContext","PurePanel","useMessage","useInternalMessage","wrapPromiseFn","message","act","callback","taskQueue","defaultGlobalConfig","getGlobalContext","globalPrefixCls","prefixCls","globalGetContainer","getContainer","duration","rtl","maxCount","top","mergedPrefixCls","getPrefixCls","mergedContainer","document","body","container","GlobalHolder","forwardRef","_","ref","initializeMessageConfig","useState","messageConfig","setMessageConfig","api","holder","global","rootPrefixCls","getRootPrefixCls","rootIconPrefixCls","getIconPrefixCls","sync","useEffect","useImperativeHandle","instance","Object","assign","keys","forEach","method","apply","arguments","createElement","iconPrefixCls","flushNotice","holderFragment","createDocumentFragment","newMessage","fragment","node","Promise","resolve","then","task","type","skipped","closeFn","open","config","setCloseFn","destroy","key","_message$instance","args","setMessageGlobalConfig","_a","call","result","fn","push","typeOpen","process","env","NODE_ENV","methods","baseStaticMethods","_InternalPanelDoNotUseOrYouWillBeFired","staticMethods","_len","length","Array","_key","noop","actWrapper","wrapper","actDestroy"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { render } from \"rc-util/es/React/render\";\nimport * as React from 'react';\nimport ConfigProvider, { globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useMessage, { useInternalMessage } from './useMessage';\nimport { wrapPromiseFn } from './util';\nlet message = null;\nlet act = callback => callback();\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\nfunction getGlobalContext() {\n  const {\n    prefixCls: globalPrefixCls,\n    getContainer: globalGetContainer,\n    duration,\n    rtl,\n    maxCount,\n    top\n  } = defaultGlobalConfig;\n  const mergedPrefixCls = globalPrefixCls !== null && globalPrefixCls !== void 0 ? globalPrefixCls : globalConfig().getPrefixCls('message');\n  const mergedContainer = (globalGetContainer === null || globalGetContainer === void 0 ? void 0 : globalGetContainer()) || document.body;\n  return {\n    prefixCls: mergedPrefixCls,\n    container: mergedContainer,\n    duration,\n    rtl,\n    maxCount,\n    top\n  };\n}\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((_, ref) => {\n  const initializeMessageConfig = () => {\n    const {\n      prefixCls,\n      container,\n      maxCount,\n      duration,\n      rtl,\n      top\n    } = getGlobalContext();\n    return {\n      prefixCls,\n      getContainer: () => container,\n      maxCount,\n      duration,\n      rtl,\n      top\n    };\n  };\n  const [messageConfig, setMessageConfig] = React.useState(initializeMessageConfig);\n  const [api, holder] = useInternalMessage(messageConfig);\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const sync = () => {\n    setMessageConfig(initializeMessageConfig);\n  };\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls\n  }, holder);\n});\nfunction flushNotice() {\n  if (!message) {\n    const holderFragment = document.createDocumentFragment();\n    const newMessage = {\n      fragment: holderFragment\n    };\n    message = newMessage;\n    // Delay render to avoid sync issue\n    act(() => {\n      render( /*#__PURE__*/React.createElement(GlobalHolder, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {};\n          // React 18 test env will throw if call immediately in ref\n          Promise.resolve().then(() => {\n            if (!newMessage.instance && instance) {\n              newMessage.instance = instance;\n              newMessage.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  }\n  // Notification not ready\n  if (!message.instance) {\n    return;\n  }\n  // >>> Execute task\n  taskQueue.forEach(task => {\n    const {\n      type,\n      skipped\n    } = task;\n    // Only `skipped` when user call notice but cancel it immediately\n    // and instance not ready\n    if (!skipped) {\n      switch (type) {\n        case 'open':\n          {\n            act(() => {\n              const closeFn = message.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n              closeFn === null || closeFn === void 0 ? void 0 : closeFn.then(task.resolve);\n              task.setCloseFn(closeFn);\n            });\n            break;\n          }\n        case 'destroy':\n          act(() => {\n            message === null || message === void 0 ? void 0 : message.instance.destroy(task.key);\n          });\n          break;\n        // Other type open\n        default:\n          {\n            act(() => {\n              var _message$instance;\n              const closeFn = (_message$instance = message.instance)[type].apply(_message$instance, _toConsumableArray(task.args));\n              closeFn === null || closeFn === void 0 ? void 0 : closeFn.then(task.resolve);\n              task.setCloseFn(closeFn);\n            });\n          }\n      }\n    }\n  });\n  // Clean up\n  taskQueue = [];\n}\n// ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\nfunction setMessageGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\n  // Trigger sync for it\n  act(() => {\n    var _a;\n    (_a = message === null || message === void 0 ? void 0 : message.sync) === null || _a === void 0 ? void 0 : _a.call(message);\n  });\n}\nfunction open(config) {\n  const result = wrapPromiseFn(resolve => {\n    let closeFn;\n    const task = {\n      type: 'open',\n      config,\n      resolve,\n      setCloseFn: fn => {\n        closeFn = fn;\n      }\n    };\n    taskQueue.push(task);\n    return () => {\n      if (closeFn) {\n        act(() => {\n          closeFn();\n        });\n      } else {\n        task.skipped = true;\n      }\n    };\n  });\n  flushNotice();\n  return result;\n}\nfunction typeOpen(type, args) {\n  // Warning if exist theme\n  if (process.env.NODE_ENV !== 'production') {\n    warnContext('message');\n  }\n  const result = wrapPromiseFn(resolve => {\n    let closeFn;\n    const task = {\n      type,\n      args,\n      resolve,\n      setCloseFn: fn => {\n        closeFn = fn;\n      }\n    };\n    taskQueue.push(task);\n    return () => {\n      if (closeFn) {\n        act(() => {\n          closeFn();\n        });\n      } else {\n        task.skipped = true;\n      }\n    };\n  });\n  flushNotice();\n  return result;\n}\nfunction destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n}\nconst methods = ['success', 'info', 'warning', 'error', 'loading'];\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setMessageGlobalConfig,\n  useMessage,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return typeOpen(type, args);\n  };\n});\n// ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\nconst noop = () => {};\n/** @private Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actWrapper = noop;\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\n/** @private Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actDestroy = noop;\nif (process.env.NODE_ENV === 'test') {\n  actDestroy = () => {\n    message = null;\n  };\n}\nexport default staticMethods;"]},"metadata":{},"sourceType":"module"}