{"ast":null,"code":"import { Keyframes } from '@ant-design/cssinjs';\nimport { genFocusOutline, resetComponent } from '../../style';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal'; // ============================== Motion ==============================\n\nconst antCheckboxEffect = new Keyframes('antCheckboxEffect', {\n  '0%': {\n    transform: 'scale(1)',\n    opacity: 0.5\n  },\n  '100%': {\n    transform: 'scale(1.6)',\n    opacity: 0\n  }\n}); // ============================== Styles ==============================\n\nexport const genCheckboxStyle = token => {\n  const {\n    checkboxCls\n  } = token;\n  const wrapperCls = `${checkboxCls}-wrapper`;\n  return [// ===================== Basic =====================\n  {\n    // Group\n    [`${checkboxCls}-group`]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'inline-flex'\n    }),\n    // Wrapper\n    [wrapperCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'inline-flex',\n      alignItems: 'baseline',\n      cursor: 'pointer',\n      // Fix checkbox & radio in flex align #30260\n      '&:after': {\n        display: 'inline-block',\n        width: 0,\n        overflow: 'hidden',\n        content: \"'\\\\a0'\"\n      },\n      // Checkbox near checkbox\n      [`& + ${wrapperCls}`]: {\n        marginInlineStart: token.marginXS\n      },\n      [`&${wrapperCls}-in-form-item`]: {\n        'input[type=\"checkbox\"]': {\n          width: 14,\n          height: 14 // FIXME: magic\n\n        }\n      }\n    }),\n    // Wrapper > Checkbox\n    [checkboxCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      whiteSpace: 'nowrap',\n      lineHeight: 1,\n      cursor: 'pointer',\n      alignSelf: 'start',\n      // https://github.com/ant-design/ant-design/issues/41564\n      // Since `checkboxSize` is dynamic which should align with the text box,\n      // We need do calculation here for offset.\n      transform: `translate(0, ${token.lineHeight * token.fontSize / 2 - token.checkboxSize / 2}px)`,\n      // Wrapper > Checkbox > input\n      [`${checkboxCls}-input`]: {\n        position: 'absolute',\n        // Since baseline align will get additional space offset,\n        // we need to move input to top to make it align with text.\n        // Ref: https://github.com/ant-design/ant-design/issues/38926#issuecomment-1486137799\n        inset: 0,\n        zIndex: 1,\n        cursor: 'pointer',\n        opacity: 0,\n        margin: 0,\n        [`&:focus-visible + ${checkboxCls}-inner`]: Object.assign({}, genFocusOutline(token))\n      },\n      // Wrapper > Checkbox > inner\n      [`${checkboxCls}-inner`]: {\n        boxSizing: 'border-box',\n        position: 'relative',\n        top: 0,\n        insetInlineStart: 0,\n        display: 'block',\n        width: token.checkboxSize,\n        height: token.checkboxSize,\n        direction: 'ltr',\n        backgroundColor: token.colorBgContainer,\n        border: `${token.lineWidth}px ${token.lineType} ${token.colorBorder}`,\n        borderRadius: token.borderRadiusSM,\n        borderCollapse: 'separate',\n        transition: `all ${token.motionDurationSlow}`,\n        '&:after': {\n          boxSizing: 'border-box',\n          position: 'absolute',\n          top: '50%',\n          insetInlineStart: '21.5%',\n          display: 'table',\n          width: token.checkboxSize / 14 * 5,\n          height: token.checkboxSize / 14 * 8,\n          border: `${token.lineWidthBold}px solid ${token.colorWhite}`,\n          borderTop: 0,\n          borderInlineStart: 0,\n          transform: 'rotate(45deg) scale(0) translate(-50%,-50%)',\n          opacity: 0,\n          content: '\"\"',\n          transition: `all ${token.motionDurationFast} ${token.motionEaseInBack}, opacity ${token.motionDurationFast}`\n        }\n      },\n      // Wrapper > Checkbox + Text\n      '& + span': {\n        paddingInlineStart: token.paddingXS,\n        paddingInlineEnd: token.paddingXS\n      }\n    })\n  }, // ================= Indeterminate =================\n  {\n    [checkboxCls]: {\n      '&-indeterminate': {\n        // Wrapper > Checkbox > inner\n        [`${checkboxCls}-inner`]: {\n          '&:after': {\n            top: '50%',\n            insetInlineStart: '50%',\n            width: token.fontSizeLG / 2,\n            height: token.fontSizeLG / 2,\n            backgroundColor: token.colorPrimary,\n            border: 0,\n            transform: 'translate(-50%, -50%) scale(1)',\n            opacity: 1,\n            content: '\"\"'\n          }\n        }\n      }\n    }\n  }, // ===================== Hover =====================\n  {\n    // Wrapper\n    [`${wrapperCls}:hover ${checkboxCls}:after`]: {\n      visibility: 'visible'\n    },\n    // Wrapper & Wrapper > Checkbox\n    [`\n        ${wrapperCls}:not(${wrapperCls}-disabled),\n        ${checkboxCls}:not(${checkboxCls}-disabled)\n      `]: {\n      [`&:hover ${checkboxCls}-inner`]: {\n        borderColor: token.colorPrimary\n      }\n    },\n    [`${wrapperCls}:not(${wrapperCls}-disabled)`]: {\n      [`&:hover ${checkboxCls}-checked:not(${checkboxCls}-disabled) ${checkboxCls}-inner`]: {\n        backgroundColor: token.colorPrimaryHover,\n        borderColor: 'transparent'\n      },\n      [`&:hover ${checkboxCls}-checked:not(${checkboxCls}-disabled):after`]: {\n        borderColor: token.colorPrimaryHover\n      }\n    }\n  }, // ==================== Checked ====================\n  {\n    // Wrapper > Checkbox\n    [`${checkboxCls}-checked`]: {\n      [`${checkboxCls}-inner`]: {\n        backgroundColor: token.colorPrimary,\n        borderColor: token.colorPrimary,\n        '&:after': {\n          opacity: 1,\n          transform: 'rotate(45deg) scale(1) translate(-50%,-50%)',\n          transition: `all ${token.motionDurationMid} ${token.motionEaseOutBack} ${token.motionDurationFast}`\n        }\n      },\n      // Checked Effect\n      '&:after': {\n        position: 'absolute',\n        top: 0,\n        insetInlineStart: 0,\n        width: '100%',\n        height: '100%',\n        borderRadius: token.borderRadiusSM,\n        visibility: 'hidden',\n        border: `${token.lineWidthBold}px solid ${token.colorPrimary}`,\n        animationName: antCheckboxEffect,\n        animationDuration: token.motionDurationSlow,\n        animationTimingFunction: 'ease-in-out',\n        animationFillMode: 'backwards',\n        content: '\"\"',\n        transition: `all ${token.motionDurationSlow}`\n      }\n    },\n    [`\n        ${wrapperCls}-checked:not(${wrapperCls}-disabled),\n        ${checkboxCls}-checked:not(${checkboxCls}-disabled)\n      `]: {\n      [`&:hover ${checkboxCls}-inner`]: {\n        backgroundColor: token.colorPrimaryHover,\n        borderColor: 'transparent'\n      },\n      [`&:hover ${checkboxCls}:after`]: {\n        borderColor: token.colorPrimaryHover\n      }\n    }\n  }, // ==================== Disable ====================\n  {\n    // Wrapper\n    [`${wrapperCls}-disabled`]: {\n      cursor: 'not-allowed'\n    },\n    // Wrapper > Checkbox\n    [`${checkboxCls}-disabled`]: {\n      // Wrapper > Checkbox > input\n      [`&, ${checkboxCls}-input`]: {\n        cursor: 'not-allowed',\n        // Disabled for native input to enable Tooltip event handler\n        // ref: https://github.com/ant-design/ant-design/issues/39822#issuecomment-1365075901\n        pointerEvents: 'none'\n      },\n      // Wrapper > Checkbox > inner\n      [`${checkboxCls}-inner`]: {\n        background: token.colorBgContainerDisabled,\n        borderColor: token.colorBorder,\n        '&:after': {\n          borderColor: token.colorTextDisabled\n        }\n      },\n      '&:after': {\n        display: 'none'\n      },\n      '& + span': {\n        color: token.colorTextDisabled\n      },\n      [`&${checkboxCls}-indeterminate ${checkboxCls}-inner::after`]: {\n        background: token.colorTextDisabled\n      }\n    }\n  }];\n}; // ============================== Export ==============================\n\nexport function getStyle(prefixCls, token) {\n  const checkboxToken = mergeToken(token, {\n    checkboxCls: `.${prefixCls}`,\n    checkboxSize: token.controlInteractiveSize\n  });\n  return [genCheckboxStyle(checkboxToken)];\n}\nexport default genComponentStyleHook('Checkbox', (token, _ref) => {\n  let {\n    prefixCls\n  } = _ref;\n  return [getStyle(prefixCls, token)];\n});","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/checkbox/style/index.js"],"names":["Keyframes","genFocusOutline","resetComponent","genComponentStyleHook","mergeToken","antCheckboxEffect","transform","opacity","genCheckboxStyle","token","checkboxCls","wrapperCls","Object","assign","display","alignItems","cursor","width","overflow","content","marginInlineStart","marginXS","height","position","whiteSpace","lineHeight","alignSelf","fontSize","checkboxSize","inset","zIndex","margin","boxSizing","top","insetInlineStart","direction","backgroundColor","colorBgContainer","border","lineWidth","lineType","colorBorder","borderRadius","borderRadiusSM","borderCollapse","transition","motionDurationSlow","lineWidthBold","colorWhite","borderTop","borderInlineStart","motionDurationFast","motionEaseInBack","paddingInlineStart","paddingXS","paddingInlineEnd","fontSizeLG","colorPrimary","visibility","borderColor","colorPrimaryHover","motionDurationMid","motionEaseOutBack","animationName","animationDuration","animationTimingFunction","animationFillMode","pointerEvents","background","colorBgContainerDisabled","colorTextDisabled","color","getStyle","prefixCls","checkboxToken","controlInteractiveSize","_ref"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,aAAhD;AACA,SAASC,qBAAT,EAAgCC,UAAhC,QAAkD,sBAAlD,C,CACA;;AACA,MAAMC,iBAAiB,GAAG,IAAIL,SAAJ,CAAc,mBAAd,EAAmC;AAC3D,QAAM;AACJM,IAAAA,SAAS,EAAE,UADP;AAEJC,IAAAA,OAAO,EAAE;AAFL,GADqD;AAK3D,UAAQ;AACND,IAAAA,SAAS,EAAE,YADL;AAENC,IAAAA,OAAO,EAAE;AAFH;AALmD,CAAnC,CAA1B,C,CAUA;;AACA,OAAO,MAAMC,gBAAgB,GAAGC,KAAK,IAAI;AACvC,QAAM;AACJC,IAAAA;AADI,MAEFD,KAFJ;AAGA,QAAME,UAAU,GAAI,GAAED,WAAY,UAAlC;AACA,SAAO,CACP;AACA;AACE;AACA,KAAE,GAAEA,WAAY,QAAhB,GAA0BE,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,cAAc,CAACO,KAAD,CAAhC,CAAd,EAAwD;AAChFK,MAAAA,OAAO,EAAE;AADuE,KAAxD,CAF5B;AAKE;AACA,KAACH,UAAD,GAAcC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,cAAc,CAACO,KAAD,CAAhC,CAAd,EAAwD;AACpEK,MAAAA,OAAO,EAAE,aAD2D;AAEpEC,MAAAA,UAAU,EAAE,UAFwD;AAGpEC,MAAAA,MAAM,EAAE,SAH4D;AAIpE;AACA,iBAAW;AACTF,QAAAA,OAAO,EAAE,cADA;AAETG,QAAAA,KAAK,EAAE,CAFE;AAGTC,QAAAA,QAAQ,EAAE,QAHD;AAITC,QAAAA,OAAO,EAAE;AAJA,OALyD;AAWpE;AACA,OAAE,OAAMR,UAAW,EAAnB,GAAuB;AACrBS,QAAAA,iBAAiB,EAAEX,KAAK,CAACY;AADJ,OAZ6C;AAepE,OAAE,IAAGV,UAAW,eAAhB,GAAiC;AAC/B,kCAA0B;AACxBM,UAAAA,KAAK,EAAE,EADiB;AAExBK,UAAAA,MAAM,EAAE,EAFgB,CAEb;;AAFa;AADK;AAfmC,KAAxD,CANhB;AA6BE;AACA,KAACZ,WAAD,GAAeE,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,cAAc,CAACO,KAAD,CAAhC,CAAd,EAAwD;AACrEc,MAAAA,QAAQ,EAAE,UAD2D;AAErEC,MAAAA,UAAU,EAAE,QAFyD;AAGrEC,MAAAA,UAAU,EAAE,CAHyD;AAIrET,MAAAA,MAAM,EAAE,SAJ6D;AAKrEU,MAAAA,SAAS,EAAE,OAL0D;AAMrE;AACA;AACA;AACApB,MAAAA,SAAS,EAAG,gBAAeG,KAAK,CAACgB,UAAN,GAAmBhB,KAAK,CAACkB,QAAzB,GAAoC,CAApC,GAAwClB,KAAK,CAACmB,YAAN,GAAqB,CAAE,KATrB;AAUrE;AACA,OAAE,GAAElB,WAAY,QAAhB,GAA0B;AACxBa,QAAAA,QAAQ,EAAE,UADc;AAExB;AACA;AACA;AACAM,QAAAA,KAAK,EAAE,CALiB;AAMxBC,QAAAA,MAAM,EAAE,CANgB;AAOxBd,QAAAA,MAAM,EAAE,SAPgB;AAQxBT,QAAAA,OAAO,EAAE,CARe;AASxBwB,QAAAA,MAAM,EAAE,CATgB;AAUxB,SAAE,qBAAoBrB,WAAY,QAAlC,GAA4CE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,eAAe,CAACQ,KAAD,CAAjC;AAVpB,OAX2C;AAuBrE;AACA,OAAE,GAAEC,WAAY,QAAhB,GAA0B;AACxBsB,QAAAA,SAAS,EAAE,YADa;AAExBT,QAAAA,QAAQ,EAAE,UAFc;AAGxBU,QAAAA,GAAG,EAAE,CAHmB;AAIxBC,QAAAA,gBAAgB,EAAE,CAJM;AAKxBpB,QAAAA,OAAO,EAAE,OALe;AAMxBG,QAAAA,KAAK,EAAER,KAAK,CAACmB,YANW;AAOxBN,QAAAA,MAAM,EAAEb,KAAK,CAACmB,YAPU;AAQxBO,QAAAA,SAAS,EAAE,KARa;AASxBC,QAAAA,eAAe,EAAE3B,KAAK,CAAC4B,gBATC;AAUxBC,QAAAA,MAAM,EAAG,GAAE7B,KAAK,CAAC8B,SAAU,MAAK9B,KAAK,CAAC+B,QAAS,IAAG/B,KAAK,CAACgC,WAAY,EAV5C;AAWxBC,QAAAA,YAAY,EAAEjC,KAAK,CAACkC,cAXI;AAYxBC,QAAAA,cAAc,EAAE,UAZQ;AAaxBC,QAAAA,UAAU,EAAG,OAAMpC,KAAK,CAACqC,kBAAmB,EAbpB;AAcxB,mBAAW;AACTd,UAAAA,SAAS,EAAE,YADF;AAETT,UAAAA,QAAQ,EAAE,UAFD;AAGTU,UAAAA,GAAG,EAAE,KAHI;AAITC,UAAAA,gBAAgB,EAAE,OAJT;AAKTpB,UAAAA,OAAO,EAAE,OALA;AAMTG,UAAAA,KAAK,EAAER,KAAK,CAACmB,YAAN,GAAqB,EAArB,GAA0B,CANxB;AAOTN,UAAAA,MAAM,EAAEb,KAAK,CAACmB,YAAN,GAAqB,EAArB,GAA0B,CAPzB;AAQTU,UAAAA,MAAM,EAAG,GAAE7B,KAAK,CAACsC,aAAc,YAAWtC,KAAK,CAACuC,UAAW,EARlD;AASTC,UAAAA,SAAS,EAAE,CATF;AAUTC,UAAAA,iBAAiB,EAAE,CAVV;AAWT5C,UAAAA,SAAS,EAAE,6CAXF;AAYTC,UAAAA,OAAO,EAAE,CAZA;AAaTY,UAAAA,OAAO,EAAE,IAbA;AAcT0B,UAAAA,UAAU,EAAG,OAAMpC,KAAK,CAAC0C,kBAAmB,IAAG1C,KAAK,CAAC2C,gBAAiB,aAAY3C,KAAK,CAAC0C,kBAAmB;AAdlG;AAda,OAxB2C;AAuDrE;AACA,kBAAY;AACVE,QAAAA,kBAAkB,EAAE5C,KAAK,CAAC6C,SADhB;AAEVC,QAAAA,gBAAgB,EAAE9C,KAAK,CAAC6C;AAFd;AAxDyD,KAAxD;AA9BjB,GAFO,EA8FP;AACA;AACE,KAAC5C,WAAD,GAAe;AACb,yBAAmB;AACjB;AACA,SAAE,GAAEA,WAAY,QAAhB,GAA0B;AACxB,qBAAW;AACTuB,YAAAA,GAAG,EAAE,KADI;AAETC,YAAAA,gBAAgB,EAAE,KAFT;AAGTjB,YAAAA,KAAK,EAAER,KAAK,CAAC+C,UAAN,GAAmB,CAHjB;AAITlC,YAAAA,MAAM,EAAEb,KAAK,CAAC+C,UAAN,GAAmB,CAJlB;AAKTpB,YAAAA,eAAe,EAAE3B,KAAK,CAACgD,YALd;AAMTnB,YAAAA,MAAM,EAAE,CANC;AAOThC,YAAAA,SAAS,EAAE,gCAPF;AAQTC,YAAAA,OAAO,EAAE,CARA;AASTY,YAAAA,OAAO,EAAE;AATA;AADa;AAFT;AADN;AADjB,GA/FO,EAmHP;AACA;AACE;AACA,KAAE,GAAER,UAAW,UAASD,WAAY,QAApC,GAA8C;AAC5CgD,MAAAA,UAAU,EAAE;AADgC,KAFhD;AAKE;AACA,KAAE;AACN,UAAU/C,UAAW,QAAOA,UAAW;AACvC,UAAUD,WAAY,QAAOA,WAAY;AACzC,OAHI,GAGM;AACJ,OAAE,WAAUA,WAAY,QAAxB,GAAkC;AAChCiD,QAAAA,WAAW,EAAElD,KAAK,CAACgD;AADa;AAD9B,KATR;AAcE,KAAE,GAAE9C,UAAW,QAAOA,UAAW,YAAjC,GAA+C;AAC7C,OAAE,WAAUD,WAAY,gBAAeA,WAAY,cAAaA,WAAY,QAA5E,GAAsF;AACpF0B,QAAAA,eAAe,EAAE3B,KAAK,CAACmD,iBAD6D;AAEpFD,QAAAA,WAAW,EAAE;AAFuE,OADzC;AAK7C,OAAE,WAAUjD,WAAY,gBAAeA,WAAY,kBAAnD,GAAuE;AACrEiD,QAAAA,WAAW,EAAElD,KAAK,CAACmD;AADkD;AAL1B;AAdjD,GApHO,EA4IP;AACA;AACE;AACA,KAAE,GAAElD,WAAY,UAAhB,GAA4B;AAC1B,OAAE,GAAEA,WAAY,QAAhB,GAA0B;AACxB0B,QAAAA,eAAe,EAAE3B,KAAK,CAACgD,YADC;AAExBE,QAAAA,WAAW,EAAElD,KAAK,CAACgD,YAFK;AAGxB,mBAAW;AACTlD,UAAAA,OAAO,EAAE,CADA;AAETD,UAAAA,SAAS,EAAE,6CAFF;AAGTuC,UAAAA,UAAU,EAAG,OAAMpC,KAAK,CAACoD,iBAAkB,IAAGpD,KAAK,CAACqD,iBAAkB,IAAGrD,KAAK,CAAC0C,kBAAmB;AAHzF;AAHa,OADA;AAU1B;AACA,iBAAW;AACT5B,QAAAA,QAAQ,EAAE,UADD;AAETU,QAAAA,GAAG,EAAE,CAFI;AAGTC,QAAAA,gBAAgB,EAAE,CAHT;AAITjB,QAAAA,KAAK,EAAE,MAJE;AAKTK,QAAAA,MAAM,EAAE,MALC;AAMToB,QAAAA,YAAY,EAAEjC,KAAK,CAACkC,cANX;AAOTe,QAAAA,UAAU,EAAE,QAPH;AAQTpB,QAAAA,MAAM,EAAG,GAAE7B,KAAK,CAACsC,aAAc,YAAWtC,KAAK,CAACgD,YAAa,EARpD;AASTM,QAAAA,aAAa,EAAE1D,iBATN;AAUT2D,QAAAA,iBAAiB,EAAEvD,KAAK,CAACqC,kBAVhB;AAWTmB,QAAAA,uBAAuB,EAAE,aAXhB;AAYTC,QAAAA,iBAAiB,EAAE,WAZV;AAaT/C,QAAAA,OAAO,EAAE,IAbA;AAcT0B,QAAAA,UAAU,EAAG,OAAMpC,KAAK,CAACqC,kBAAmB;AAdnC;AAXe,KAF9B;AA8BE,KAAE;AACN,UAAUnC,UAAW,gBAAeA,UAAW;AAC/C,UAAUD,WAAY,gBAAeA,WAAY;AACjD,OAHI,GAGM;AACJ,OAAE,WAAUA,WAAY,QAAxB,GAAkC;AAChC0B,QAAAA,eAAe,EAAE3B,KAAK,CAACmD,iBADS;AAEhCD,QAAAA,WAAW,EAAE;AAFmB,OAD9B;AAKJ,OAAE,WAAUjD,WAAY,QAAxB,GAAkC;AAChCiD,QAAAA,WAAW,EAAElD,KAAK,CAACmD;AADa;AAL9B;AAjCR,GA7IO,EAwLP;AACA;AACE;AACA,KAAE,GAAEjD,UAAW,WAAf,GAA4B;AAC1BK,MAAAA,MAAM,EAAE;AADkB,KAF9B;AAKE;AACA,KAAE,GAAEN,WAAY,WAAhB,GAA6B;AAC3B;AACA,OAAE,MAAKA,WAAY,QAAnB,GAA6B;AAC3BM,QAAAA,MAAM,EAAE,aADmB;AAE3B;AACA;AACAmD,QAAAA,aAAa,EAAE;AAJY,OAFF;AAQ3B;AACA,OAAE,GAAEzD,WAAY,QAAhB,GAA0B;AACxB0D,QAAAA,UAAU,EAAE3D,KAAK,CAAC4D,wBADM;AAExBV,QAAAA,WAAW,EAAElD,KAAK,CAACgC,WAFK;AAGxB,mBAAW;AACTkB,UAAAA,WAAW,EAAElD,KAAK,CAAC6D;AADV;AAHa,OATC;AAgB3B,iBAAW;AACTxD,QAAAA,OAAO,EAAE;AADA,OAhBgB;AAmB3B,kBAAY;AACVyD,QAAAA,KAAK,EAAE9D,KAAK,CAAC6D;AADH,OAnBe;AAsB3B,OAAE,IAAG5D,WAAY,kBAAiBA,WAAY,eAA9C,GAA+D;AAC7D0D,QAAAA,UAAU,EAAE3D,KAAK,CAAC6D;AAD2C;AAtBpC;AAN/B,GAzLO,CAAP;AA0ND,CA/NM,C,CAgOP;;AACA,OAAO,SAASE,QAAT,CAAkBC,SAAlB,EAA6BhE,KAA7B,EAAoC;AACzC,QAAMiE,aAAa,GAAGtE,UAAU,CAACK,KAAD,EAAQ;AACtCC,IAAAA,WAAW,EAAG,IAAG+D,SAAU,EADW;AAEtC7C,IAAAA,YAAY,EAAEnB,KAAK,CAACkE;AAFkB,GAAR,CAAhC;AAIA,SAAO,CAACnE,gBAAgB,CAACkE,aAAD,CAAjB,CAAP;AACD;AACD,eAAevE,qBAAqB,CAAC,UAAD,EAAa,CAACM,KAAD,EAAQmE,IAAR,KAAiB;AAChE,MAAI;AACFH,IAAAA;AADE,MAEAG,IAFJ;AAGA,SAAO,CAACJ,QAAQ,CAACC,SAAD,EAAYhE,KAAZ,CAAT,CAAP;AACD,CALmC,CAApC","sourcesContent":["import { Keyframes } from '@ant-design/cssinjs';\nimport { genFocusOutline, resetComponent } from '../../style';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\n// ============================== Motion ==============================\nconst antCheckboxEffect = new Keyframes('antCheckboxEffect', {\n  '0%': {\n    transform: 'scale(1)',\n    opacity: 0.5\n  },\n  '100%': {\n    transform: 'scale(1.6)',\n    opacity: 0\n  }\n});\n// ============================== Styles ==============================\nexport const genCheckboxStyle = token => {\n  const {\n    checkboxCls\n  } = token;\n  const wrapperCls = `${checkboxCls}-wrapper`;\n  return [\n  // ===================== Basic =====================\n  {\n    // Group\n    [`${checkboxCls}-group`]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'inline-flex'\n    }),\n    // Wrapper\n    [wrapperCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'inline-flex',\n      alignItems: 'baseline',\n      cursor: 'pointer',\n      // Fix checkbox & radio in flex align #30260\n      '&:after': {\n        display: 'inline-block',\n        width: 0,\n        overflow: 'hidden',\n        content: \"'\\\\a0'\"\n      },\n      // Checkbox near checkbox\n      [`& + ${wrapperCls}`]: {\n        marginInlineStart: token.marginXS\n      },\n      [`&${wrapperCls}-in-form-item`]: {\n        'input[type=\"checkbox\"]': {\n          width: 14,\n          height: 14 // FIXME: magic\n        }\n      }\n    }),\n\n    // Wrapper > Checkbox\n    [checkboxCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      whiteSpace: 'nowrap',\n      lineHeight: 1,\n      cursor: 'pointer',\n      alignSelf: 'start',\n      // https://github.com/ant-design/ant-design/issues/41564\n      // Since `checkboxSize` is dynamic which should align with the text box,\n      // We need do calculation here for offset.\n      transform: `translate(0, ${token.lineHeight * token.fontSize / 2 - token.checkboxSize / 2}px)`,\n      // Wrapper > Checkbox > input\n      [`${checkboxCls}-input`]: {\n        position: 'absolute',\n        // Since baseline align will get additional space offset,\n        // we need to move input to top to make it align with text.\n        // Ref: https://github.com/ant-design/ant-design/issues/38926#issuecomment-1486137799\n        inset: 0,\n        zIndex: 1,\n        cursor: 'pointer',\n        opacity: 0,\n        margin: 0,\n        [`&:focus-visible + ${checkboxCls}-inner`]: Object.assign({}, genFocusOutline(token))\n      },\n      // Wrapper > Checkbox > inner\n      [`${checkboxCls}-inner`]: {\n        boxSizing: 'border-box',\n        position: 'relative',\n        top: 0,\n        insetInlineStart: 0,\n        display: 'block',\n        width: token.checkboxSize,\n        height: token.checkboxSize,\n        direction: 'ltr',\n        backgroundColor: token.colorBgContainer,\n        border: `${token.lineWidth}px ${token.lineType} ${token.colorBorder}`,\n        borderRadius: token.borderRadiusSM,\n        borderCollapse: 'separate',\n        transition: `all ${token.motionDurationSlow}`,\n        '&:after': {\n          boxSizing: 'border-box',\n          position: 'absolute',\n          top: '50%',\n          insetInlineStart: '21.5%',\n          display: 'table',\n          width: token.checkboxSize / 14 * 5,\n          height: token.checkboxSize / 14 * 8,\n          border: `${token.lineWidthBold}px solid ${token.colorWhite}`,\n          borderTop: 0,\n          borderInlineStart: 0,\n          transform: 'rotate(45deg) scale(0) translate(-50%,-50%)',\n          opacity: 0,\n          content: '\"\"',\n          transition: `all ${token.motionDurationFast} ${token.motionEaseInBack}, opacity ${token.motionDurationFast}`\n        }\n      },\n      // Wrapper > Checkbox + Text\n      '& + span': {\n        paddingInlineStart: token.paddingXS,\n        paddingInlineEnd: token.paddingXS\n      }\n    })\n  },\n  // ================= Indeterminate =================\n  {\n    [checkboxCls]: {\n      '&-indeterminate': {\n        // Wrapper > Checkbox > inner\n        [`${checkboxCls}-inner`]: {\n          '&:after': {\n            top: '50%',\n            insetInlineStart: '50%',\n            width: token.fontSizeLG / 2,\n            height: token.fontSizeLG / 2,\n            backgroundColor: token.colorPrimary,\n            border: 0,\n            transform: 'translate(-50%, -50%) scale(1)',\n            opacity: 1,\n            content: '\"\"'\n          }\n        }\n      }\n    }\n  },\n  // ===================== Hover =====================\n  {\n    // Wrapper\n    [`${wrapperCls}:hover ${checkboxCls}:after`]: {\n      visibility: 'visible'\n    },\n    // Wrapper & Wrapper > Checkbox\n    [`\n        ${wrapperCls}:not(${wrapperCls}-disabled),\n        ${checkboxCls}:not(${checkboxCls}-disabled)\n      `]: {\n      [`&:hover ${checkboxCls}-inner`]: {\n        borderColor: token.colorPrimary\n      }\n    },\n    [`${wrapperCls}:not(${wrapperCls}-disabled)`]: {\n      [`&:hover ${checkboxCls}-checked:not(${checkboxCls}-disabled) ${checkboxCls}-inner`]: {\n        backgroundColor: token.colorPrimaryHover,\n        borderColor: 'transparent'\n      },\n      [`&:hover ${checkboxCls}-checked:not(${checkboxCls}-disabled):after`]: {\n        borderColor: token.colorPrimaryHover\n      }\n    }\n  },\n  // ==================== Checked ====================\n  {\n    // Wrapper > Checkbox\n    [`${checkboxCls}-checked`]: {\n      [`${checkboxCls}-inner`]: {\n        backgroundColor: token.colorPrimary,\n        borderColor: token.colorPrimary,\n        '&:after': {\n          opacity: 1,\n          transform: 'rotate(45deg) scale(1) translate(-50%,-50%)',\n          transition: `all ${token.motionDurationMid} ${token.motionEaseOutBack} ${token.motionDurationFast}`\n        }\n      },\n      // Checked Effect\n      '&:after': {\n        position: 'absolute',\n        top: 0,\n        insetInlineStart: 0,\n        width: '100%',\n        height: '100%',\n        borderRadius: token.borderRadiusSM,\n        visibility: 'hidden',\n        border: `${token.lineWidthBold}px solid ${token.colorPrimary}`,\n        animationName: antCheckboxEffect,\n        animationDuration: token.motionDurationSlow,\n        animationTimingFunction: 'ease-in-out',\n        animationFillMode: 'backwards',\n        content: '\"\"',\n        transition: `all ${token.motionDurationSlow}`\n      }\n    },\n    [`\n        ${wrapperCls}-checked:not(${wrapperCls}-disabled),\n        ${checkboxCls}-checked:not(${checkboxCls}-disabled)\n      `]: {\n      [`&:hover ${checkboxCls}-inner`]: {\n        backgroundColor: token.colorPrimaryHover,\n        borderColor: 'transparent'\n      },\n      [`&:hover ${checkboxCls}:after`]: {\n        borderColor: token.colorPrimaryHover\n      }\n    }\n  },\n  // ==================== Disable ====================\n  {\n    // Wrapper\n    [`${wrapperCls}-disabled`]: {\n      cursor: 'not-allowed'\n    },\n    // Wrapper > Checkbox\n    [`${checkboxCls}-disabled`]: {\n      // Wrapper > Checkbox > input\n      [`&, ${checkboxCls}-input`]: {\n        cursor: 'not-allowed',\n        // Disabled for native input to enable Tooltip event handler\n        // ref: https://github.com/ant-design/ant-design/issues/39822#issuecomment-1365075901\n        pointerEvents: 'none'\n      },\n      // Wrapper > Checkbox > inner\n      [`${checkboxCls}-inner`]: {\n        background: token.colorBgContainerDisabled,\n        borderColor: token.colorBorder,\n        '&:after': {\n          borderColor: token.colorTextDisabled\n        }\n      },\n      '&:after': {\n        display: 'none'\n      },\n      '& + span': {\n        color: token.colorTextDisabled\n      },\n      [`&${checkboxCls}-indeterminate ${checkboxCls}-inner::after`]: {\n        background: token.colorTextDisabled\n      }\n    }\n  }];\n};\n// ============================== Export ==============================\nexport function getStyle(prefixCls, token) {\n  const checkboxToken = mergeToken(token, {\n    checkboxCls: `.${prefixCls}`,\n    checkboxSize: token.controlInteractiveSize\n  });\n  return [genCheckboxStyle(checkboxToken)];\n}\nexport default genComponentStyleHook('Checkbox', (token, _ref) => {\n  let {\n    prefixCls\n  } = _ref;\n  return [getStyle(prefixCls, token)];\n});"]},"metadata":{},"sourceType":"module"}