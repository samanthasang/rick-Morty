{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nexport default (function (stretch) {\n  var _React$useState = React.useState({\n    width: 0,\n    height: 0\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      targetSize = _React$useState2[0],\n      setTargetSize = _React$useState2[1];\n\n  function measureStretch(element) {\n    var tgtWidth = element.offsetWidth,\n        tgtHeight = element.offsetHeight;\n\n    var _element$getBoundingC = element.getBoundingClientRect(),\n        width = _element$getBoundingC.width,\n        height = _element$getBoundingC.height; // Rect is more accurate than offset, use if near\n\n\n    if (Math.abs(tgtWidth - width) < 1 && Math.abs(tgtHeight - height) < 1) {\n      tgtWidth = width;\n      tgtHeight = height;\n    }\n\n    setTargetSize({\n      width: tgtWidth,\n      height: tgtHeight\n    });\n  } // Merge stretch style\n\n\n  var style = React.useMemo(function () {\n    var sizeStyle = {};\n\n    if (stretch) {\n      var width = targetSize.width,\n          height = targetSize.height; // Stretch with target\n\n      if (stretch.indexOf('height') !== -1 && height) {\n        sizeStyle.height = height;\n      } else if (stretch.indexOf('minHeight') !== -1 && height) {\n        sizeStyle.minHeight = height;\n      }\n\n      if (stretch.indexOf('width') !== -1 && width) {\n        sizeStyle.width = width;\n      } else if (stretch.indexOf('minWidth') !== -1 && width) {\n        sizeStyle.minWidth = width;\n      }\n    }\n\n    return sizeStyle;\n  }, [stretch, targetSize]);\n  return [style, measureStretch];\n});","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/rc-trigger/es/Popup/useStretchStyle.js"],"names":["_slicedToArray","React","stretch","_React$useState","useState","width","height","_React$useState2","targetSize","setTargetSize","measureStretch","element","tgtWidth","offsetWidth","tgtHeight","offsetHeight","_element$getBoundingC","getBoundingClientRect","Math","abs","style","useMemo","sizeStyle","indexOf","minHeight","minWidth"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,gBAAgB,UAAUC,OAAV,EAAmB;AACjC,MAAIC,eAAe,GAAGF,KAAK,CAACG,QAAN,CAAe;AACnCC,IAAAA,KAAK,EAAE,CAD4B;AAEnCC,IAAAA,MAAM,EAAE;AAF2B,GAAf,CAAtB;AAAA,MAIIC,gBAAgB,GAAGP,cAAc,CAACG,eAAD,EAAkB,CAAlB,CAJrC;AAAA,MAKIK,UAAU,GAAGD,gBAAgB,CAAC,CAAD,CALjC;AAAA,MAMIE,aAAa,GAAGF,gBAAgB,CAAC,CAAD,CANpC;;AAQA,WAASG,cAAT,CAAwBC,OAAxB,EAAiC;AAC/B,QAAIC,QAAQ,GAAGD,OAAO,CAACE,WAAvB;AAAA,QACIC,SAAS,GAAGH,OAAO,CAACI,YADxB;;AAGA,QAAIC,qBAAqB,GAAGL,OAAO,CAACM,qBAAR,EAA5B;AAAA,QACIZ,KAAK,GAAGW,qBAAqB,CAACX,KADlC;AAAA,QAEIC,MAAM,GAAGU,qBAAqB,CAACV,MAFnC,CAJ+B,CAMY;;;AAG3C,QAAIY,IAAI,CAACC,GAAL,CAASP,QAAQ,GAAGP,KAApB,IAA6B,CAA7B,IAAkCa,IAAI,CAACC,GAAL,CAASL,SAAS,GAAGR,MAArB,IAA+B,CAArE,EAAwE;AACtEM,MAAAA,QAAQ,GAAGP,KAAX;AACAS,MAAAA,SAAS,GAAGR,MAAZ;AACD;;AAEDG,IAAAA,aAAa,CAAC;AACZJ,MAAAA,KAAK,EAAEO,QADK;AAEZN,MAAAA,MAAM,EAAEQ;AAFI,KAAD,CAAb;AAID,GA3BgC,CA2B/B;;;AAGF,MAAIM,KAAK,GAAGnB,KAAK,CAACoB,OAAN,CAAc,YAAY;AACpC,QAAIC,SAAS,GAAG,EAAhB;;AAEA,QAAIpB,OAAJ,EAAa;AACX,UAAIG,KAAK,GAAGG,UAAU,CAACH,KAAvB;AAAA,UACIC,MAAM,GAAGE,UAAU,CAACF,MADxB,CADW,CAEqB;;AAEhC,UAAIJ,OAAO,CAACqB,OAAR,CAAgB,QAAhB,MAA8B,CAAC,CAA/B,IAAoCjB,MAAxC,EAAgD;AAC9CgB,QAAAA,SAAS,CAAChB,MAAV,GAAmBA,MAAnB;AACD,OAFD,MAEO,IAAIJ,OAAO,CAACqB,OAAR,CAAgB,WAAhB,MAAiC,CAAC,CAAlC,IAAuCjB,MAA3C,EAAmD;AACxDgB,QAAAA,SAAS,CAACE,SAAV,GAAsBlB,MAAtB;AACD;;AAED,UAAIJ,OAAO,CAACqB,OAAR,CAAgB,OAAhB,MAA6B,CAAC,CAA9B,IAAmClB,KAAvC,EAA8C;AAC5CiB,QAAAA,SAAS,CAACjB,KAAV,GAAkBA,KAAlB;AACD,OAFD,MAEO,IAAIH,OAAO,CAACqB,OAAR,CAAgB,UAAhB,MAAgC,CAAC,CAAjC,IAAsClB,KAA1C,EAAiD;AACtDiB,QAAAA,SAAS,CAACG,QAAV,GAAqBpB,KAArB;AACD;AACF;;AAED,WAAOiB,SAAP;AACD,GArBW,EAqBT,CAACpB,OAAD,EAAUM,UAAV,CArBS,CAAZ;AAsBA,SAAO,CAACY,KAAD,EAAQV,cAAR,CAAP;AACD,CArDD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nexport default (function (stretch) {\n  var _React$useState = React.useState({\n    width: 0,\n    height: 0\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      targetSize = _React$useState2[0],\n      setTargetSize = _React$useState2[1];\n\n  function measureStretch(element) {\n    var tgtWidth = element.offsetWidth,\n        tgtHeight = element.offsetHeight;\n\n    var _element$getBoundingC = element.getBoundingClientRect(),\n        width = _element$getBoundingC.width,\n        height = _element$getBoundingC.height; // Rect is more accurate than offset, use if near\n\n\n    if (Math.abs(tgtWidth - width) < 1 && Math.abs(tgtHeight - height) < 1) {\n      tgtWidth = width;\n      tgtHeight = height;\n    }\n\n    setTargetSize({\n      width: tgtWidth,\n      height: tgtHeight\n    });\n  } // Merge stretch style\n\n\n  var style = React.useMemo(function () {\n    var sizeStyle = {};\n\n    if (stretch) {\n      var width = targetSize.width,\n          height = targetSize.height; // Stretch with target\n\n      if (stretch.indexOf('height') !== -1 && height) {\n        sizeStyle.height = height;\n      } else if (stretch.indexOf('minHeight') !== -1 && height) {\n        sizeStyle.minHeight = height;\n      }\n\n      if (stretch.indexOf('width') !== -1 && width) {\n        sizeStyle.width = width;\n      } else if (stretch.indexOf('minWidth') !== -1 && width) {\n        sizeStyle.minWidth = width;\n      }\n    }\n\n    return sizeStyle;\n  }, [stretch, targetSize]);\n  return [style, measureStretch];\n});"]},"metadata":{},"sourceType":"module"}