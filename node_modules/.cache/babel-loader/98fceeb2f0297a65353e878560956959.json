{"ast":null,"code":"// ================== Collapse Motion ==================\nconst getCollapsedHeight = () => ({\n  height: 0,\n  opacity: 0\n});\n\nconst getRealHeight = node => {\n  const {\n    scrollHeight\n  } = node;\n  return {\n    height: scrollHeight,\n    opacity: 1\n  };\n};\n\nconst getCurrentHeight = node => ({\n  height: node ? node.offsetHeight : 0\n});\n\nconst skipOpacityTransition = (_, event) => (event === null || event === void 0 ? void 0 : event.deadline) === true || event.propertyName === 'height';\n\nconst initCollapseMotion = function () {\n  let rootCls = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ant';\n  return {\n    motionName: `${rootCls}-motion-collapse`,\n    onAppearStart: getCollapsedHeight,\n    onEnterStart: getCollapsedHeight,\n    onAppearActive: getRealHeight,\n    onEnterActive: getRealHeight,\n    onLeaveStart: getCurrentHeight,\n    onLeaveActive: getCollapsedHeight,\n    onAppearEnd: skipOpacityTransition,\n    onEnterEnd: skipOpacityTransition,\n    onLeaveEnd: skipOpacityTransition,\n    motionDeadline: 500\n  };\n};\n\nconst SelectPlacements = ['bottomLeft', 'bottomRight', 'topLeft', 'topRight'];\n\nconst getTransitionDirection = placement => {\n  if (placement !== undefined && (placement === 'topLeft' || placement === 'topRight')) {\n    return `slide-down`;\n  }\n\n  return `slide-up`;\n};\n\nconst getTransitionName = (rootPrefixCls, motion, transitionName) => {\n  if (transitionName !== undefined) {\n    return transitionName;\n  }\n\n  return `${rootPrefixCls}-${motion}`;\n};\n\nexport { getTransitionName, getTransitionDirection };\nexport default initCollapseMotion;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/_util/motion.js"],"names":["getCollapsedHeight","height","opacity","getRealHeight","node","scrollHeight","getCurrentHeight","offsetHeight","skipOpacityTransition","_","event","deadline","propertyName","initCollapseMotion","rootCls","arguments","length","undefined","motionName","onAppearStart","onEnterStart","onAppearActive","onEnterActive","onLeaveStart","onLeaveActive","onAppearEnd","onEnterEnd","onLeaveEnd","motionDeadline","SelectPlacements","getTransitionDirection","placement","getTransitionName","rootPrefixCls","motion","transitionName"],"mappings":"AAAA;AACA,MAAMA,kBAAkB,GAAG,OAAO;AAChCC,EAAAA,MAAM,EAAE,CADwB;AAEhCC,EAAAA,OAAO,EAAE;AAFuB,CAAP,CAA3B;;AAIA,MAAMC,aAAa,GAAGC,IAAI,IAAI;AAC5B,QAAM;AACJC,IAAAA;AADI,MAEFD,IAFJ;AAGA,SAAO;AACLH,IAAAA,MAAM,EAAEI,YADH;AAELH,IAAAA,OAAO,EAAE;AAFJ,GAAP;AAID,CARD;;AASA,MAAMI,gBAAgB,GAAGF,IAAI,KAAK;AAChCH,EAAAA,MAAM,EAAEG,IAAI,GAAGA,IAAI,CAACG,YAAR,GAAuB;AADH,CAAL,CAA7B;;AAGA,MAAMC,qBAAqB,GAAG,CAACC,CAAD,EAAIC,KAAJ,KAAc,CAACA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACC,QAArD,MAAmE,IAAnE,IAA2ED,KAAK,CAACE,YAAN,KAAuB,QAA9I;;AACA,MAAMC,kBAAkB,GAAG,YAAY;AACrC,MAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAAlF;AACA,SAAO;AACLG,IAAAA,UAAU,EAAG,GAAEJ,OAAQ,kBADlB;AAELK,IAAAA,aAAa,EAAEnB,kBAFV;AAGLoB,IAAAA,YAAY,EAAEpB,kBAHT;AAILqB,IAAAA,cAAc,EAAElB,aAJX;AAKLmB,IAAAA,aAAa,EAAEnB,aALV;AAMLoB,IAAAA,YAAY,EAAEjB,gBANT;AAOLkB,IAAAA,aAAa,EAAExB,kBAPV;AAQLyB,IAAAA,WAAW,EAAEjB,qBARR;AASLkB,IAAAA,UAAU,EAAElB,qBATP;AAULmB,IAAAA,UAAU,EAAEnB,qBAVP;AAWLoB,IAAAA,cAAc,EAAE;AAXX,GAAP;AAaD,CAfD;;AAgBA,MAAMC,gBAAgB,GAAG,CAAC,YAAD,EAAe,aAAf,EAA8B,SAA9B,EAAyC,UAAzC,CAAzB;;AACA,MAAMC,sBAAsB,GAAGC,SAAS,IAAI;AAC1C,MAAIA,SAAS,KAAKd,SAAd,KAA4Bc,SAAS,KAAK,SAAd,IAA2BA,SAAS,KAAK,UAArE,CAAJ,EAAsF;AACpF,WAAQ,YAAR;AACD;;AACD,SAAQ,UAAR;AACD,CALD;;AAMA,MAAMC,iBAAiB,GAAG,CAACC,aAAD,EAAgBC,MAAhB,EAAwBC,cAAxB,KAA2C;AACnE,MAAIA,cAAc,KAAKlB,SAAvB,EAAkC;AAChC,WAAOkB,cAAP;AACD;;AACD,SAAQ,GAAEF,aAAc,IAAGC,MAAO,EAAlC;AACD,CALD;;AAMA,SAASF,iBAAT,EAA4BF,sBAA5B;AACA,eAAejB,kBAAf","sourcesContent":["// ================== Collapse Motion ==================\nconst getCollapsedHeight = () => ({\n  height: 0,\n  opacity: 0\n});\nconst getRealHeight = node => {\n  const {\n    scrollHeight\n  } = node;\n  return {\n    height: scrollHeight,\n    opacity: 1\n  };\n};\nconst getCurrentHeight = node => ({\n  height: node ? node.offsetHeight : 0\n});\nconst skipOpacityTransition = (_, event) => (event === null || event === void 0 ? void 0 : event.deadline) === true || event.propertyName === 'height';\nconst initCollapseMotion = function () {\n  let rootCls = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ant';\n  return {\n    motionName: `${rootCls}-motion-collapse`,\n    onAppearStart: getCollapsedHeight,\n    onEnterStart: getCollapsedHeight,\n    onAppearActive: getRealHeight,\n    onEnterActive: getRealHeight,\n    onLeaveStart: getCurrentHeight,\n    onLeaveActive: getCollapsedHeight,\n    onAppearEnd: skipOpacityTransition,\n    onEnterEnd: skipOpacityTransition,\n    onLeaveEnd: skipOpacityTransition,\n    motionDeadline: 500\n  };\n};\nconst SelectPlacements = ['bottomLeft', 'bottomRight', 'topLeft', 'topRight'];\nconst getTransitionDirection = placement => {\n  if (placement !== undefined && (placement === 'topLeft' || placement === 'topRight')) {\n    return `slide-down`;\n  }\n  return `slide-up`;\n};\nconst getTransitionName = (rootPrefixCls, motion, transitionName) => {\n  if (transitionName !== undefined) {\n    return transitionName;\n  }\n  return `${rootPrefixCls}-${motion}`;\n};\nexport { getTransitionName, getTransitionDirection };\nexport default initCollapseMotion;"]},"metadata":{},"sourceType":"module"}