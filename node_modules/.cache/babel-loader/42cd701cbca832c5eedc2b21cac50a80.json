{"ast":null,"code":"import * as React from 'react';\nexport default function useSelectTriggerControl(elements, open, triggerOpen, customizedTrigger) {\n  var propsRef = React.useRef(null);\n  propsRef.current = {\n    open: open,\n    triggerOpen: triggerOpen,\n    customizedTrigger: customizedTrigger\n  };\n  React.useEffect(function () {\n    function onGlobalMouseDown(event) {\n      var _propsRef$current; // If trigger is customized, Trigger will take control of popupVisible\n\n\n      if ((_propsRef$current = propsRef.current) !== null && _propsRef$current !== void 0 && _propsRef$current.customizedTrigger) {\n        return;\n      }\n\n      var target = event.target;\n\n      if (target.shadowRoot && event.composed) {\n        target = event.composedPath()[0] || target;\n      }\n\n      if (propsRef.current.open && elements().filter(function (element) {\n        return element;\n      }).every(function (element) {\n        return !element.contains(target) && element !== target;\n      })) {\n        // Should trigger close\n        propsRef.current.triggerOpen(false);\n      }\n    }\n\n    window.addEventListener('mousedown', onGlobalMouseDown);\n    return function () {\n      return window.removeEventListener('mousedown', onGlobalMouseDown);\n    };\n  }, []);\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/rc-select/es/hooks/useSelectTriggerControl.js"],"names":["React","useSelectTriggerControl","elements","open","triggerOpen","customizedTrigger","propsRef","useRef","current","useEffect","onGlobalMouseDown","event","_propsRef$current","target","shadowRoot","composed","composedPath","filter","element","every","contains","window","addEventListener","removeEventListener"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,eAAe,SAASC,uBAAT,CAAiCC,QAAjC,EAA2CC,IAA3C,EAAiDC,WAAjD,EAA8DC,iBAA9D,EAAiF;AAC9F,MAAIC,QAAQ,GAAGN,KAAK,CAACO,MAAN,CAAa,IAAb,CAAf;AACAD,EAAAA,QAAQ,CAACE,OAAT,GAAmB;AACjBL,IAAAA,IAAI,EAAEA,IADW;AAEjBC,IAAAA,WAAW,EAAEA,WAFI;AAGjBC,IAAAA,iBAAiB,EAAEA;AAHF,GAAnB;AAKAL,EAAAA,KAAK,CAACS,SAAN,CAAgB,YAAY;AAC1B,aAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,UAAIC,iBAAJ,CADgC,CAEhC;;;AACA,UAAI,CAACA,iBAAiB,GAAGN,QAAQ,CAACE,OAA9B,MAA2C,IAA3C,IAAmDI,iBAAiB,KAAK,KAAK,CAA9E,IAAmFA,iBAAiB,CAACP,iBAAzG,EAA4H;AAC1H;AACD;;AACD,UAAIQ,MAAM,GAAGF,KAAK,CAACE,MAAnB;;AACA,UAAIA,MAAM,CAACC,UAAP,IAAqBH,KAAK,CAACI,QAA/B,EAAyC;AACvCF,QAAAA,MAAM,GAAGF,KAAK,CAACK,YAAN,GAAqB,CAArB,KAA2BH,MAApC;AACD;;AACD,UAAIP,QAAQ,CAACE,OAAT,CAAiBL,IAAjB,IAAyBD,QAAQ,GAAGe,MAAX,CAAkB,UAAUC,OAAV,EAAmB;AAChE,eAAOA,OAAP;AACD,OAF4B,EAE1BC,KAF0B,CAEpB,UAAUD,OAAV,EAAmB;AAC1B,eAAO,CAACA,OAAO,CAACE,QAAR,CAAiBP,MAAjB,CAAD,IAA6BK,OAAO,KAAKL,MAAhD;AACD,OAJ4B,CAA7B,EAII;AACF;AACAP,QAAAA,QAAQ,CAACE,OAAT,CAAiBJ,WAAjB,CAA6B,KAA7B;AACD;AACF;;AACDiB,IAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqCZ,iBAArC;AACA,WAAO,YAAY;AACjB,aAAOW,MAAM,CAACE,mBAAP,CAA2B,WAA3B,EAAwCb,iBAAxC,CAAP;AACD,KAFD;AAGD,GAxBD,EAwBG,EAxBH;AAyBD","sourcesContent":["import * as React from 'react';\nexport default function useSelectTriggerControl(elements, open, triggerOpen, customizedTrigger) {\n  var propsRef = React.useRef(null);\n  propsRef.current = {\n    open: open,\n    triggerOpen: triggerOpen,\n    customizedTrigger: customizedTrigger\n  };\n  React.useEffect(function () {\n    function onGlobalMouseDown(event) {\n      var _propsRef$current;\n      // If trigger is customized, Trigger will take control of popupVisible\n      if ((_propsRef$current = propsRef.current) !== null && _propsRef$current !== void 0 && _propsRef$current.customizedTrigger) {\n        return;\n      }\n      var target = event.target;\n      if (target.shadowRoot && event.composed) {\n        target = event.composedPath()[0] || target;\n      }\n      if (propsRef.current.open && elements().filter(function (element) {\n        return element;\n      }).every(function (element) {\n        return !element.contains(target) && element !== target;\n      })) {\n        // Should trigger close\n        propsRef.current.triggerOpen(false);\n      }\n    }\n    window.addEventListener('mousedown', onGlobalMouseDown);\n    return function () {\n      return window.removeEventListener('mousedown', onGlobalMouseDown);\n    };\n  }, []);\n}"]},"metadata":{},"sourceType":"module"}