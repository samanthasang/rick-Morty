{"ast":null,"code":"import _defineProperty from \"/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toArray from \"/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _slicedToArray from \"/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport classNames from 'classnames';\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport * as React from 'react';\nimport { useCallback, useMemo, useState } from 'react';\nimport warning from '../../_util/warning';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Radio from '../../radio'; // TODO: warning if use ajax!!!\n\nexport var SELECTION_COLUMN = {};\nexport var SELECTION_ALL = 'SELECT_ALL';\nexport var SELECTION_INVERT = 'SELECT_INVERT';\nexport var SELECTION_NONE = 'SELECT_NONE';\nvar EMPTY_LIST = [];\n\nvar flattenData = function flattenData(childrenColumnName, data) {\n  var list = [];\n  (data || []).forEach(function (record) {\n    list.push(record);\n\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));\n    }\n  });\n  return list;\n};\n\nvar useSelection = function useSelection(config, rowSelection) {\n  var _ref5 = rowSelection || {},\n      preserveSelectedRowKeys = _ref5.preserveSelectedRowKeys,\n      selectedRowKeys = _ref5.selectedRowKeys,\n      defaultSelectedRowKeys = _ref5.defaultSelectedRowKeys,\n      getCheckboxProps = _ref5.getCheckboxProps,\n      onSelectionChange = _ref5.onChange,\n      onSelect = _ref5.onSelect,\n      onSelectAll = _ref5.onSelectAll,\n      onSelectInvert = _ref5.onSelectInvert,\n      onSelectNone = _ref5.onSelectNone,\n      onSelectMultiple = _ref5.onSelectMultiple,\n      selectionColWidth = _ref5.columnWidth,\n      selectionType = _ref5.type,\n      selections = _ref5.selections,\n      fixed = _ref5.fixed,\n      customizeRenderCell = _ref5.renderCell,\n      hideSelectAll = _ref5.hideSelectAll,\n      _ref5$checkStrictly = _ref5.checkStrictly,\n      checkStrictly = _ref5$checkStrictly === void 0 ? true : _ref5$checkStrictly;\n\n  var prefixCls = config.prefixCls,\n      data = config.data,\n      pageData = config.pageData,\n      getRecordByKey = config.getRecordByKey,\n      getRowKey = config.getRowKey,\n      expandType = config.expandType,\n      childrenColumnName = config.childrenColumnName,\n      tableLocale = config.locale,\n      getPopupContainer = config.getPopupContainer; // ========================= Keys =========================\n\n  var _useMergedState = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\n    value: selectedRowKeys\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSelectedKeys = _useMergedState2[0],\n      setMergedSelectedKeys = _useMergedState2[1]; // ======================== Caches ========================\n\n\n  var preserveRecordsRef = React.useRef(new Map());\n  var updatePreserveRecordsCache = useCallback(function (keys) {\n    if (preserveSelectedRowKeys) {\n      var newCache = new Map(); // Keep key if mark as preserveSelectedRowKeys\n\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n\n        newCache.set(key, record);\n      }); // Refresh to new cache\n\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]); // Update cache with selectedKeys\n\n  React.useEffect(function () {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n\n  var _useMemo = useMemo(function () {\n    return checkStrictly ? {\n      keyEntities: null\n    } : convertDataToEntities(data, {\n      externalGetKey: getRowKey,\n      childrenPropName: childrenColumnName\n    });\n  }, [data, getRowKey, checkStrictly, childrenColumnName]),\n      keyEntities = _useMemo.keyEntities; // Get flatten data\n\n\n  var flattedData = useMemo(function () {\n    return flattenData(childrenColumnName, pageData);\n  }, [childrenColumnName, pageData]); // Get all checkbox props\n\n  var checkboxPropsMap = useMemo(function () {\n    var map = new Map();\n    flattedData.forEach(function (record, index) {\n      var key = getRowKey(record, index);\n      var checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  var isCheckboxDisabled = useCallback(function (r) {\n    var _a;\n\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n\n  var _useMemo2 = useMemo(function () {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n\n    var _conductCheck = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled),\n        checkedKeys = _conductCheck.checkedKeys,\n        halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]),\n      _useMemo3 = _slicedToArray(_useMemo2, 2),\n      derivedSelectedKeys = _useMemo3[0],\n      derivedHalfSelectedKeys = _useMemo3[1];\n\n  var derivedSelectedKeySet = useMemo(function () {\n    var keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  var derivedHalfSelectedKeySet = useMemo(function () {\n    return selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys);\n  }, [derivedHalfSelectedKeys, selectionType]); // Save last selected key to enable range selection\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      lastSelectedKey = _useState2[0],\n      setLastSelectedKey = _useState2[1]; // Reset if rowSelection reset\n\n\n  React.useEffect(function () {\n    if (!rowSelection) {\n      setMergedSelectedKeys(EMPTY_LIST);\n    }\n  }, [!!rowSelection]);\n  var setSelectedKeys = useCallback(function (keys, method) {\n    var availableKeys;\n    var records;\n    updatePreserveRecordsCache(keys);\n\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(function (key) {\n        return preserveRecordsRef.current.get(key);\n      });\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\n      type: method\n    });\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]); // ====================== Selections ======================\n  // Trigger single `onSelect` event\n\n  var triggerSingleSelection = useCallback(function (key, selected, keys, event) {\n    if (onSelect) {\n      var rows = keys.map(function (k) {\n        return getRecordByKey(k);\n      });\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n\n    setSelectedKeys(keys, 'single');\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  var mergedSelections = useMemo(function () {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n\n    var selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(function (selection) {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect: function onSelect() {\n            setSelectedKeys(data.map(function (record, index) {\n              return getRowKey(record, index);\n            }).filter(function (key) {\n              var checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }), 'all');\n          }\n        };\n      }\n\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect: function onSelect() {\n            var keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach(function (record, index) {\n              var key = getRowKey(record, index);\n              var checkProps = checkboxPropsMap.get(key);\n\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            var keys = Array.from(keySet);\n\n            if (onSelectInvert) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.') : void 0;\n              onSelectInvert(keys);\n            }\n\n            setSelectedKeys(keys, 'invert');\n          }\n        };\n      }\n\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect: function onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(function (key) {\n              var checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }), 'none');\n          }\n        };\n      }\n\n      return selection;\n    }).map(function (selection) {\n      return Object.assign(Object.assign({}, selection), {\n        onSelect: function onSelect() {\n          var _a2;\n\n          var _a;\n\n          for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n            rest[_key] = arguments[_key];\n          }\n\n          (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\n          setLastSelectedKey(null);\n        }\n      });\n    });\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]); // ======================= Columns ========================\n\n  var transformColumns = useCallback(function (columns) {\n    var _a; // >>>>>>>>>>> Skip if not exists `rowSelection`\n\n\n    if (!rowSelection) {\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'Table', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\n      return columns.filter(function (col) {\n        return col !== SELECTION_COLUMN;\n      });\n    } // >>>>>>>>>>> Support selection\n\n\n    var cloneColumns = _toConsumableArray(columns);\n\n    var keySet = new Set(derivedSelectedKeySet); // Record key only need check with enabled\n\n    var recordKeys = flattedData.map(getRowKey).filter(function (key) {\n      return !checkboxPropsMap.get(key).disabled;\n    });\n    var checkedCurrentAll = recordKeys.every(function (key) {\n      return keySet.has(key);\n    });\n    var checkedCurrentSome = recordKeys.some(function (key) {\n      return keySet.has(key);\n    });\n\n    var onSelectAllChange = function onSelectAllChange() {\n      var changeKeys = [];\n\n      if (checkedCurrentAll) {\n        recordKeys.forEach(function (key) {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(function (key) {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n\n      var keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(function (k) {\n        return getRecordByKey(k);\n      }), changeKeys.map(function (k) {\n        return getRecordByKey(k);\n      }));\n      setSelectedKeys(keys, 'all');\n      setLastSelectedKey(null);\n    }; // ===================== Render =====================\n    // Title Cell\n\n\n    var title;\n\n    if (selectionType !== 'radio') {\n      var customizeSelections;\n\n      if (mergedSelections) {\n        var menu = {\n          getPopupContainer: getPopupContainer,\n          items: mergedSelections.map(function (selection, index) {\n            var key = selection.key,\n                text = selection.text,\n                onSelectionClick = selection.onSelect;\n            return {\n              key: key !== null && key !== void 0 ? key : index,\n              onClick: function onClick() {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              },\n              label: text\n            };\n          })\n        };\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-selection-extra\")\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          menu: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n\n      var allDisabledData = flattedData.map(function (record, index) {\n        var key = getRowKey(record, index);\n        var checkboxProps = checkboxPropsMap.get(key) || {};\n        return Object.assign({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(function (_ref) {\n        var disabled = _ref.disabled;\n        return disabled;\n      });\n      var allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      var allDisabledAndChecked = allDisabled && allDisabledData.every(function (_ref2) {\n        var checked = _ref2.checked;\n        return checked;\n      });\n      var allDisabledSomeChecked = allDisabled && allDisabledData.some(function (_ref3) {\n        var checked = _ref3.checked;\n        return checked;\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-selection\")\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        skipGroup: true\n      }), customizeSelections);\n    } // Body Cell\n\n\n    var renderCell;\n\n    if (selectionType === 'radio') {\n      renderCell = function renderCell(_, record, index) {\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, Object.assign({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(event) {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked: checked\n        };\n      };\n    } else {\n      renderCell = function renderCell(_, record, index) {\n        var _a;\n\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        var indeterminate = derivedHalfSelectedKeySet.has(key);\n        var checkboxProps = checkboxPropsMap.get(key);\n        var mergedIndeterminate;\n\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        } // Record checked\n\n\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(_ref4) {\n              var nativeEvent = _ref4.nativeEvent;\n              var shiftKey = nativeEvent.shiftKey;\n              var startIndex = -1;\n              var endIndex = -1; // Get range of this\n\n              if (shiftKey && checkStrictly) {\n                var pointKeys = new Set([lastSelectedKey, key]);\n                recordKeys.some(function (recordKey, recordIndex) {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n\n                  return false;\n                });\n              }\n\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                var rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                var changedKeys = [];\n\n                if (checked) {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.delete(recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n\n                var keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }), changedKeys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }));\n                setSelectedKeys(keys, 'multiple');\n              } else {\n                // Single record selected\n                var originCheckedKeys = derivedSelectedKeys;\n\n                if (checkStrictly) {\n                  var checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  var result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  var _checkedKeys = result.checkedKeys,\n                      halfCheckedKeys = result.halfCheckedKeys;\n                  var nextCheckedKeys = _checkedKeys; // If remove, we do it again to correction\n\n                  if (checked) {\n                    var tempKeySet = new Set(_checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys: halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n\n              if (checked) {\n                setLastSelectedKey(null);\n              } else {\n                setLastSelectedKey(key);\n              }\n            }\n          })),\n          checked: checked\n        };\n      };\n    }\n\n    var renderSelectionCell = function renderSelectionCell(_, record, index) {\n      var _renderCell = renderCell(_, record, index),\n          node = _renderCell.node,\n          checked = _renderCell.checked;\n\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n\n      return node;\n    }; // Insert selection column if not exist\n\n\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(function (col) {\n        var _a;\n\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        var _cloneColumns = cloneColumns,\n            _cloneColumns2 = _toArray(_cloneColumns),\n            expandColumn = _cloneColumns2[0],\n            restColumns = _cloneColumns2.slice(1);\n\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));\n      }\n    } // Deduplicate selection column\n\n\n    var selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(function (col) {\n      return col === SELECTION_COLUMN;\n    }).length <= 1, 'Table', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\n    cloneColumns = cloneColumns.filter(function (column, index) {\n      return column !== SELECTION_COLUMN || index === selectionColumnIndex;\n    }); // Fixed column logic\n\n    var prevCol = cloneColumns[selectionColumnIndex - 1];\n    var nextCol = cloneColumns[selectionColumnIndex + 1];\n    var mergedFixed = fixed;\n\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n\n    var columnCls = classNames(\"\".concat(prefixCls, \"-selection-col\"), _defineProperty({}, \"\".concat(prefixCls, \"-selection-col-with-dropdown\"), selections && selectionType === 'checkbox')); // Replace with real selection column\n\n    var selectionColumn = _defineProperty({\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: \"\".concat(prefixCls, \"-selection-column\"),\n      title: rowSelection.columnTitle || title,\n      render: renderSelectionCell\n    }, INTERNAL_COL_DEFINE, {\n      className: columnCls\n    });\n\n    return cloneColumns.map(function (col) {\n      return col === SELECTION_COLUMN ? selectionColumn : col;\n    });\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n};\n\nexport default useSelection;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/table/hooks/useSelection.js"],"names":["_toConsumableArray","DownOutlined","classNames","INTERNAL_COL_DEFINE","arrAdd","arrDel","conductCheck","convertDataToEntities","useMergedState","React","useCallback","useMemo","useState","warning","Checkbox","Dropdown","Radio","SELECTION_COLUMN","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","EMPTY_LIST","flattenData","childrenColumnName","data","list","forEach","record","push","concat","useSelection","config","rowSelection","preserveSelectedRowKeys","selectedRowKeys","defaultSelectedRowKeys","getCheckboxProps","onSelectionChange","onChange","onSelect","onSelectAll","onSelectInvert","onSelectNone","onSelectMultiple","selectionColWidth","columnWidth","selectionType","type","selections","fixed","customizeRenderCell","renderCell","hideSelectAll","checkStrictly","prefixCls","pageData","getRecordByKey","getRowKey","expandType","tableLocale","locale","getPopupContainer","value","mergedSelectedKeys","setMergedSelectedKeys","preserveRecordsRef","useRef","Map","updatePreserveRecordsCache","keys","newCache","key","current","has","get","set","useEffect","keyEntities","externalGetKey","childrenPropName","flattedData","checkboxPropsMap","map","index","checkboxProps","process","env","NODE_ENV","isCheckboxDisabled","r","_a","disabled","checkedKeys","halfCheckedKeys","derivedSelectedKeys","derivedHalfSelectedKeys","derivedSelectedKeySet","slice","Set","derivedHalfSelectedKeySet","lastSelectedKey","setLastSelectedKey","setSelectedKeys","method","availableKeys","records","undefined","triggerSingleSelection","selected","event","rows","k","mergedSelections","selectionList","selection","text","selectionAll","filter","checkProps","selectInvert","keySet","delete","add","Array","from","selectNone","Object","assign","_a2","_len","arguments","length","rest","_key","call","apply","transformColumns","columns","includes","col","cloneColumns","recordKeys","checkedCurrentAll","every","checkedCurrentSome","some","onSelectAllChange","changeKeys","title","customizeSelections","menu","items","onSelectionClick","onClick","label","createElement","className","allDisabledData","checked","_ref","allDisabled","allDisabledAndChecked","_ref2","allDisabledSomeChecked","_ref3","indeterminate","skipGroup","_","node","e","stopPropagation","nativeEvent","mergedIndeterminate","_ref4","shiftKey","startIndex","endIndex","pointKeys","recordKey","recordIndex","rangeKeys","changedKeys","originCheckedKeys","result","nextCheckedKeys","tempKeySet","renderSelectionCell","findIndex","columnType","expandColumn","restColumns","selectionColumnIndex","indexOf","column","prevCol","nextCol","mergedFixed","columnCls","selectionColumn","width","columnTitle","render"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport classNames from 'classnames';\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport * as React from 'react';\nimport { useCallback, useMemo, useState } from 'react';\nimport warning from '../../_util/warning';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Radio from '../../radio';\n// TODO: warning if use ajax!!!\nexport const SELECTION_COLUMN = {};\nexport const SELECTION_ALL = 'SELECT_ALL';\nexport const SELECTION_INVERT = 'SELECT_INVERT';\nexport const SELECTION_NONE = 'SELECT_NONE';\nconst EMPTY_LIST = [];\nconst flattenData = (childrenColumnName, data) => {\n  let list = [];\n  (data || []).forEach(record => {\n    list.push(record);\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));\n    }\n  });\n  return list;\n};\nconst useSelection = (config, rowSelection) => {\n  const {\n    preserveSelectedRowKeys,\n    selectedRowKeys,\n    defaultSelectedRowKeys,\n    getCheckboxProps,\n    onChange: onSelectionChange,\n    onSelect,\n    onSelectAll,\n    onSelectInvert,\n    onSelectNone,\n    onSelectMultiple,\n    columnWidth: selectionColWidth,\n    type: selectionType,\n    selections,\n    fixed,\n    renderCell: customizeRenderCell,\n    hideSelectAll,\n    checkStrictly = true\n  } = rowSelection || {};\n  const {\n    prefixCls,\n    data,\n    pageData,\n    getRecordByKey,\n    getRowKey,\n    expandType,\n    childrenColumnName,\n    locale: tableLocale,\n    getPopupContainer\n  } = config;\n  // ========================= Keys =========================\n  const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\n    value: selectedRowKeys\n  });\n  // ======================== Caches ========================\n  const preserveRecordsRef = React.useRef(new Map());\n  const updatePreserveRecordsCache = useCallback(keys => {\n    if (preserveSelectedRowKeys) {\n      const newCache = new Map();\n      // Keep key if mark as preserveSelectedRowKeys\n      keys.forEach(key => {\n        let record = getRecordByKey(key);\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n        newCache.set(key, record);\n      });\n      // Refresh to new cache\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]);\n  // Update cache with selectedKeys\n  React.useEffect(() => {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n  const {\n    keyEntities\n  } = useMemo(() => checkStrictly ? {\n    keyEntities: null\n  } : convertDataToEntities(data, {\n    externalGetKey: getRowKey,\n    childrenPropName: childrenColumnName\n  }), [data, getRowKey, checkStrictly, childrenColumnName]);\n  // Get flatten data\n  const flattedData = useMemo(() => flattenData(childrenColumnName, pageData), [childrenColumnName, pageData]);\n  // Get all checkbox props\n  const checkboxPropsMap = useMemo(() => {\n    const map = new Map();\n    flattedData.forEach((record, index) => {\n      const key = getRowKey(record, index);\n      const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  const isCheckboxDisabled = useCallback(r => {\n    var _a;\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n  const [derivedSelectedKeys, derivedHalfSelectedKeys] = useMemo(() => {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n    const {\n      checkedKeys,\n      halfCheckedKeys\n    } = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled);\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]);\n  const derivedSelectedKeySet = useMemo(() => {\n    const keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  const derivedHalfSelectedKeySet = useMemo(() => selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys), [derivedHalfSelectedKeys, selectionType]);\n  // Save last selected key to enable range selection\n  const [lastSelectedKey, setLastSelectedKey] = useState(null);\n  // Reset if rowSelection reset\n  React.useEffect(() => {\n    if (!rowSelection) {\n      setMergedSelectedKeys(EMPTY_LIST);\n    }\n  }, [!!rowSelection]);\n  const setSelectedKeys = useCallback((keys, method) => {\n    let availableKeys;\n    let records;\n    updatePreserveRecordsCache(keys);\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(key => preserveRecordsRef.current.get(key));\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(key => {\n        const record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\n      type: method\n    });\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]);\n  // ====================== Selections ======================\n  // Trigger single `onSelect` event\n  const triggerSingleSelection = useCallback((key, selected, keys, event) => {\n    if (onSelect) {\n      const rows = keys.map(k => getRecordByKey(k));\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys, 'single');\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  const mergedSelections = useMemo(() => {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(selection => {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect() {\n            setSelectedKeys(data.map((record, index) => getRowKey(record, index)).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }), 'all');\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect() {\n            const keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach((record, index) => {\n              const key = getRowKey(record, index);\n              const checkProps = checkboxPropsMap.get(key);\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            const keys = Array.from(keySet);\n            if (onSelectInvert) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.') : void 0;\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys, 'invert');\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }), 'none');\n          }\n        };\n      }\n      return selection;\n    }).map(selection => Object.assign(Object.assign({}, selection), {\n      onSelect: function () {\n        var _a2;\n        var _a;\n        for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n          rest[_key] = arguments[_key];\n        }\n        (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\n        setLastSelectedKey(null);\n      }\n    }));\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]);\n  // ======================= Columns ========================\n  const transformColumns = useCallback(columns => {\n    var _a;\n    // >>>>>>>>>>> Skip if not exists `rowSelection`\n    if (!rowSelection) {\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'Table', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\n      return columns.filter(col => col !== SELECTION_COLUMN);\n    }\n    // >>>>>>>>>>> Support selection\n    let cloneColumns = _toConsumableArray(columns);\n    const keySet = new Set(derivedSelectedKeySet);\n    // Record key only need check with enabled\n    const recordKeys = flattedData.map(getRowKey).filter(key => !checkboxPropsMap.get(key).disabled);\n    const checkedCurrentAll = recordKeys.every(key => keySet.has(key));\n    const checkedCurrentSome = recordKeys.some(key => keySet.has(key));\n    const onSelectAllChange = () => {\n      const changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(key => {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(key => {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      const keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));\n      setSelectedKeys(keys, 'all');\n      setLastSelectedKey(null);\n    };\n    // ===================== Render =====================\n    // Title Cell\n    let title;\n    if (selectionType !== 'radio') {\n      let customizeSelections;\n      if (mergedSelections) {\n        const menu = {\n          getPopupContainer,\n          items: mergedSelections.map((selection, index) => {\n            const {\n              key,\n              text,\n              onSelect: onSelectionClick\n            } = selection;\n            return {\n              key: key !== null && key !== void 0 ? key : index,\n              onClick: () => {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              },\n              label: text\n            };\n          })\n        };\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: `${prefixCls}-selection-extra`\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          menu: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n      const allDisabledData = flattedData.map((record, index) => {\n        const key = getRowKey(record, index);\n        const checkboxProps = checkboxPropsMap.get(key) || {};\n        return Object.assign({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(_ref => {\n        let {\n          disabled\n        } = _ref;\n        return disabled;\n      });\n      const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      const allDisabledAndChecked = allDisabled && allDisabledData.every(_ref2 => {\n        let {\n          checked\n        } = _ref2;\n        return checked;\n      });\n      const allDisabledSomeChecked = allDisabled && allDisabledData.some(_ref3 => {\n        let {\n          checked\n        } = _ref3;\n        return checked;\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-selection`\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        skipGroup: true\n      }), customizeSelections);\n    }\n    // Body Cell\n    let renderCell;\n    if (selectionType === 'radio') {\n      renderCell = (_, record, index) => {\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, Object.assign({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: e => e.stopPropagation(),\n            onChange: event => {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    } else {\n      renderCell = (_, record, index) => {\n        var _a;\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        const indeterminate = derivedHalfSelectedKeySet.has(key);\n        const checkboxProps = checkboxPropsMap.get(key);\n        let mergedIndeterminate;\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        }\n        // Record checked\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: e => e.stopPropagation(),\n            onChange: _ref4 => {\n              let {\n                nativeEvent\n              } = _ref4;\n              const {\n                shiftKey\n              } = nativeEvent;\n              let startIndex = -1;\n              let endIndex = -1;\n              // Get range of this\n              if (shiftKey && checkStrictly) {\n                const pointKeys = new Set([lastSelectedKey, key]);\n                recordKeys.some((recordKey, recordIndex) => {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n                  return false;\n                });\n              }\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                const rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                const changedKeys = [];\n                if (checked) {\n                  rangeKeys.forEach(recordKey => {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.delete(recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(recordKey => {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n                const keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));\n                setSelectedKeys(keys, 'multiple');\n              } else {\n                // Single record selected\n                const originCheckedKeys = derivedSelectedKeys;\n                if (checkStrictly) {\n                  const checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  const result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  const {\n                    checkedKeys,\n                    halfCheckedKeys\n                  } = result;\n                  let nextCheckedKeys = checkedKeys;\n                  // If remove, we do it again to correction\n                  if (checked) {\n                    const tempKeySet = new Set(checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              if (checked) {\n                setLastSelectedKey(null);\n              } else {\n                setLastSelectedKey(key);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    }\n    const renderSelectionCell = (_, record, index) => {\n      const {\n        node,\n        checked\n      } = renderCell(_, record, index);\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    };\n    // Insert selection column if not exist\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(col => {\n        var _a;\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        const [expandColumn, ...restColumns] = cloneColumns;\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));\n      }\n    }\n    // Deduplicate selection column\n    const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(col => col === SELECTION_COLUMN).length <= 1, 'Table', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\n    cloneColumns = cloneColumns.filter((column, index) => column !== SELECTION_COLUMN || index === selectionColumnIndex);\n    // Fixed column logic\n    const prevCol = cloneColumns[selectionColumnIndex - 1];\n    const nextCol = cloneColumns[selectionColumnIndex + 1];\n    let mergedFixed = fixed;\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n    const columnCls = classNames(`${prefixCls}-selection-col`, {\n      [`${prefixCls}-selection-col-with-dropdown`]: selections && selectionType === 'checkbox'\n    });\n    // Replace with real selection column\n    const selectionColumn = {\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: `${prefixCls}-selection-column`,\n      title: rowSelection.columnTitle || title,\n      render: renderSelectionCell,\n      [INTERNAL_COL_DEFINE]: {\n        className: columnCls\n      }\n    };\n    return cloneColumns.map(col => col === SELECTION_COLUMN ? selectionColumn : col);\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n};\nexport default useSelection;"]},"metadata":{},"sourceType":"module"}