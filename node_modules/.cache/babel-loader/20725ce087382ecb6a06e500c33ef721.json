{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/**\n * Wrap of sub component which need use as Button capacity (like Icon component).\n *\n * This helps accessibility reader to tread as a interactive button to operation.\n */\n\n\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport * as React from 'react';\nvar inlineStyle = {\n  border: 0,\n  background: 'transparent',\n  padding: 0,\n  lineHeight: 'inherit',\n  display: 'inline-block'\n};\nvar TransButton = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var onKeyDown = function onKeyDown(event) {\n    var keyCode = event.keyCode;\n\n    if (keyCode === KeyCode.ENTER) {\n      event.preventDefault();\n    }\n  };\n\n  var onKeyUp = function onKeyUp(event) {\n    var keyCode = event.keyCode;\n    var onClick = props.onClick;\n\n    if (keyCode === KeyCode.ENTER && onClick) {\n      onClick();\n    }\n  };\n\n  var style = props.style,\n      noStyle = props.noStyle,\n      disabled = props.disabled,\n      restProps = __rest(props, [\"style\", \"noStyle\", \"disabled\"]);\n\n  var mergedStyle = {};\n\n  if (!noStyle) {\n    mergedStyle = Object.assign({}, inlineStyle);\n  }\n\n  if (disabled) {\n    mergedStyle.pointerEvents = 'none';\n  }\n\n  mergedStyle = Object.assign(Object.assign({}, mergedStyle), style);\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    role: \"button\",\n    tabIndex: 0,\n    ref: ref\n  }, restProps, {\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    style: mergedStyle\n  }));\n});\nexport default TransButton;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/_util/transButton.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","KeyCode","React","inlineStyle","border","background","padding","lineHeight","display","TransButton","forwardRef","props","ref","onKeyDown","event","keyCode","ENTER","preventDefault","onKeyUp","onClick","style","noStyle","disabled","restProps","mergedStyle","assign","pointerEvents","createElement","role","tabIndex"],"mappings":"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","sourcesContent":["var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/**\n * Wrap of sub component which need use as Button capacity (like Icon component).\n *\n * This helps accessibility reader to tread as a interactive button to operation.\n */\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport * as React from 'react';\nconst inlineStyle = {\n  border: 0,\n  background: 'transparent',\n  padding: 0,\n  lineHeight: 'inherit',\n  display: 'inline-block'\n};\nconst TransButton = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const onKeyDown = event => {\n    const {\n      keyCode\n    } = event;\n    if (keyCode === KeyCode.ENTER) {\n      event.preventDefault();\n    }\n  };\n  const onKeyUp = event => {\n    const {\n      keyCode\n    } = event;\n    const {\n      onClick\n    } = props;\n    if (keyCode === KeyCode.ENTER && onClick) {\n      onClick();\n    }\n  };\n  const {\n      style,\n      noStyle,\n      disabled\n    } = props,\n    restProps = __rest(props, [\"style\", \"noStyle\", \"disabled\"]);\n  let mergedStyle = {};\n  if (!noStyle) {\n    mergedStyle = Object.assign({}, inlineStyle);\n  }\n  if (disabled) {\n    mergedStyle.pointerEvents = 'none';\n  }\n  mergedStyle = Object.assign(Object.assign({}, mergedStyle), style);\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    role: \"button\",\n    tabIndex: 0,\n    ref: ref\n  }, restProps, {\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    style: mergedStyle\n  }));\n});\nexport default TransButton;"]},"metadata":{},"sourceType":"module"}