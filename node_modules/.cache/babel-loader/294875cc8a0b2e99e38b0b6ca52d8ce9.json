{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar _excluded = [\"id\", \"mode\", \"prefixCls\", \"backfill\", \"fieldNames\", \"inputValue\", \"searchValue\", \"onSearch\", \"autoClearSearchValue\", \"onSelect\", \"onDeselect\", \"dropdownMatchSelectWidth\", \"filterOption\", \"filterSort\", \"optionFilterProp\", \"optionLabelProp\", \"options\", \"children\", \"defaultActiveFirstOption\", \"menuItemSelectedIcon\", \"virtual\", \"listHeight\", \"listItemHeight\", \"value\", \"defaultValue\", \"labelInValue\", \"onChange\"];\n/**\n * To match accessibility requirement, we always provide an input in the component.\n * Other element will not set `tabIndex` to avoid `onBlur` sequence problem.\n * For focused select, we set `aria-live=\"polite\"` to update the accessibility content.\n *\n * ref:\n * - keyboard: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role#Keyboard_interactions\n *\n * New api:\n * - listHeight\n * - listItemHeight\n * - component\n *\n * Remove deprecated api:\n * - multiple\n * - tags\n * - combobox\n * - firstActiveValue\n * - dropdownMenuStyle\n * - openClassName (Not list in api)\n *\n * Update:\n * - `backfill` only support `combobox` mode\n * - `combobox` mode not support `labelInValue` since it's meaningless\n * - `getInputElement` only support `combobox` mode\n * - `onChange` return OptionData instead of ReactNode\n * - `filterOption` `onChange` `onSelect` accept OptionData instead of ReactNode\n * - `combobox` mode trigger `onChange` will get `undefined` if no `value` match in Option\n * - `combobox` mode not support `optionLabelProp`\n */\n\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport warning from \"rc-util/es/warning\";\nimport * as React from 'react';\nimport BaseSelect, { isMultiple } from \"./BaseSelect\";\nimport useCache from \"./hooks/useCache\";\nimport useFilterOptions from \"./hooks/useFilterOptions\";\nimport useId from \"./hooks/useId\";\nimport useOptions from \"./hooks/useOptions\";\nimport useRefFunc from \"./hooks/useRefFunc\";\nimport OptGroup from \"./OptGroup\";\nimport Option from \"./Option\";\nimport OptionList from \"./OptionList\";\nimport SelectContext from \"./SelectContext\";\nimport { hasValue, toArray } from \"./utils/commonUtil\";\nimport { fillFieldNames, flattenOptions, injectPropsWithOption } from \"./utils/valueUtil\";\nimport warningProps, { warningNullOptions } from \"./utils/warningPropsUtil\";\nvar OMIT_DOM_PROPS = ['inputValue'];\n\nfunction isRawValue(value) {\n  return !value || _typeof(value) !== 'object';\n}\n\nvar Select = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n      mode = props.mode,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-select' : _props$prefixCls,\n      backfill = props.backfill,\n      fieldNames = props.fieldNames,\n      inputValue = props.inputValue,\n      searchValue = props.searchValue,\n      onSearch = props.onSearch,\n      _props$autoClearSearc = props.autoClearSearchValue,\n      autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect,\n      _props$dropdownMatchS = props.dropdownMatchSelectWidth,\n      dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS,\n      filterOption = props.filterOption,\n      filterSort = props.filterSort,\n      optionFilterProp = props.optionFilterProp,\n      optionLabelProp = props.optionLabelProp,\n      options = props.options,\n      children = props.children,\n      defaultActiveFirstOption = props.defaultActiveFirstOption,\n      menuItemSelectedIcon = props.menuItemSelectedIcon,\n      virtual = props.virtual,\n      _props$listHeight = props.listHeight,\n      listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight,\n      _props$listItemHeight = props.listItemHeight,\n      listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      labelInValue = props.labelInValue,\n      onChange = props.onChange,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var mergedId = useId(id);\n  var multiple = isMultiple(mode);\n  var childrenAsData = !!(!options && children);\n  var mergedFilterOption = React.useMemo(function () {\n    if (filterOption === undefined && mode === 'combobox') {\n      return false;\n    }\n\n    return filterOption;\n  }, [filterOption, mode]); // ========================= FieldNames =========================\n\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames, childrenAsData);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [// We stringify fieldNames to avoid unnecessary re-renders.\n  JSON.stringify(fieldNames), childrenAsData]\n  /* eslint-enable react-hooks/exhaustive-deps */\n  ); // =========================== Search ===========================\n\n  var _useMergedState = useMergedState('', {\n    value: searchValue !== undefined ? searchValue : inputValue,\n    postState: function postState(search) {\n      return search || '';\n    }\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSearchValue = _useMergedState2[0],\n      setSearchValue = _useMergedState2[1]; // =========================== Option ===========================\n\n\n  var parsedOptions = useOptions(options, children, mergedFieldNames, optionFilterProp, optionLabelProp);\n  var valueOptions = parsedOptions.valueOptions,\n      labelOptions = parsedOptions.labelOptions,\n      mergedOptions = parsedOptions.options; // ========================= Wrap Value =========================\n\n  var convert2LabelValues = React.useCallback(function (draftValues) {\n    // Convert to array\n    var valueList = toArray(draftValues); // Convert to labelInValue type\n\n    return valueList.map(function (val) {\n      var rawValue;\n      var rawLabel;\n      var rawKey;\n      var rawDisabled;\n      var rawTitle; // Fill label & value\n\n      if (isRawValue(val)) {\n        rawValue = val;\n      } else {\n        var _val$value;\n\n        rawKey = val.key;\n        rawLabel = val.label;\n        rawValue = (_val$value = val.value) !== null && _val$value !== void 0 ? _val$value : rawKey;\n      }\n\n      var option = valueOptions.get(rawValue);\n\n      if (option) {\n        var _option$key; // Fill missing props\n\n\n        if (rawLabel === undefined) rawLabel = option === null || option === void 0 ? void 0 : option[optionLabelProp || mergedFieldNames.label];\n        if (rawKey === undefined) rawKey = (_option$key = option === null || option === void 0 ? void 0 : option.key) !== null && _option$key !== void 0 ? _option$key : rawValue;\n        rawDisabled = option === null || option === void 0 ? void 0 : option.disabled;\n        rawTitle = option === null || option === void 0 ? void 0 : option.title; // Warning if label not same as provided\n\n        if (process.env.NODE_ENV !== 'production' && !optionLabelProp) {\n          var optionLabel = option === null || option === void 0 ? void 0 : option[mergedFieldNames.label];\n\n          if (optionLabel !== undefined && optionLabel !== rawLabel) {\n            warning(false, '`label` of `value` is not same as `label` in Select options.');\n          }\n        }\n      }\n\n      return {\n        label: rawLabel,\n        value: rawValue,\n        key: rawKey,\n        disabled: rawDisabled,\n        title: rawTitle\n      };\n    });\n  }, [mergedFieldNames, optionLabelProp, valueOptions]); // =========================== Values ===========================\n\n  var _useMergedState3 = useMergedState(defaultValue, {\n    value: value\n  }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      internalValue = _useMergedState4[0],\n      setInternalValue = _useMergedState4[1]; // Merged value with LabelValueType\n\n\n  var rawLabeledValues = React.useMemo(function () {\n    var _values$;\n\n    var values = convert2LabelValues(internalValue); // combobox no need save value when it's no value\n\n    if (mode === 'combobox' && !((_values$ = values[0]) !== null && _values$ !== void 0 && _values$.value)) {\n      return [];\n    }\n\n    return values;\n  }, [internalValue, convert2LabelValues, mode]); // Fill label with cache to avoid option remove\n\n  var _useCache = useCache(rawLabeledValues, valueOptions),\n      _useCache2 = _slicedToArray(_useCache, 2),\n      mergedValues = _useCache2[0],\n      getMixedOption = _useCache2[1];\n\n  var displayValues = React.useMemo(function () {\n    // `null` need show as placeholder instead\n    // https://github.com/ant-design/ant-design/issues/25057\n    if (!mode && mergedValues.length === 1) {\n      var firstValue = mergedValues[0];\n\n      if (firstValue.value === null && (firstValue.label === null || firstValue.label === undefined)) {\n        return [];\n      }\n    }\n\n    return mergedValues.map(function (item) {\n      var _item$label;\n\n      return _objectSpread(_objectSpread({}, item), {}, {\n        label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value\n      });\n    });\n  }, [mode, mergedValues]);\n  /** Convert `displayValues` to raw value type set */\n\n  var rawValues = React.useMemo(function () {\n    return new Set(mergedValues.map(function (val) {\n      return val.value;\n    }));\n  }, [mergedValues]);\n  React.useEffect(function () {\n    if (mode === 'combobox') {\n      var _mergedValues$;\n\n      var strValue = (_mergedValues$ = mergedValues[0]) === null || _mergedValues$ === void 0 ? void 0 : _mergedValues$.value;\n      setSearchValue(hasValue(strValue) ? String(strValue) : '');\n    }\n  }, [mergedValues]); // ======================= Display Option =======================\n  // Create a placeholder item if not exist in `options`\n\n  var createTagOption = useRefFunc(function (val, label) {\n    var _ref;\n\n    var mergedLabel = label !== null && label !== void 0 ? label : val;\n    return _ref = {}, _defineProperty(_ref, mergedFieldNames.value, val), _defineProperty(_ref, mergedFieldNames.label, mergedLabel), _ref;\n  }); // Fill tag as option if mode is `tags`\n\n  var filledTagOptions = React.useMemo(function () {\n    if (mode !== 'tags') {\n      return mergedOptions;\n    } // >>> Tag mode\n\n\n    var cloneOptions = _toConsumableArray(mergedOptions); // Check if value exist in options (include new patch item)\n\n\n    var existOptions = function existOptions(val) {\n      return valueOptions.has(val);\n    }; // Fill current value as option\n\n\n    _toConsumableArray(mergedValues).sort(function (a, b) {\n      return a.value < b.value ? -1 : 1;\n    }).forEach(function (item) {\n      var val = item.value;\n\n      if (!existOptions(val)) {\n        cloneOptions.push(createTagOption(val, item.label));\n      }\n    });\n\n    return cloneOptions;\n  }, [createTagOption, mergedOptions, valueOptions, mergedValues, mode]);\n  var filteredOptions = useFilterOptions(filledTagOptions, mergedFieldNames, mergedSearchValue, mergedFilterOption, optionFilterProp); // Fill options with search value if needed\n\n  var filledSearchOptions = React.useMemo(function () {\n    if (mode !== 'tags' || !mergedSearchValue || filteredOptions.some(function (item) {\n      return item[optionFilterProp || 'value'] === mergedSearchValue;\n    })) {\n      return filteredOptions;\n    } // Fill search value as option\n\n\n    return [createTagOption(mergedSearchValue)].concat(_toConsumableArray(filteredOptions));\n  }, [createTagOption, optionFilterProp, mode, filteredOptions, mergedSearchValue]);\n  var orderedFilteredOptions = React.useMemo(function () {\n    if (!filterSort) {\n      return filledSearchOptions;\n    }\n\n    return _toConsumableArray(filledSearchOptions).sort(function (a, b) {\n      return filterSort(a, b);\n    });\n  }, [filledSearchOptions, filterSort]);\n  var displayOptions = React.useMemo(function () {\n    return flattenOptions(orderedFilteredOptions, {\n      fieldNames: mergedFieldNames,\n      childrenAsData: childrenAsData\n    });\n  }, [orderedFilteredOptions, mergedFieldNames, childrenAsData]); // =========================== Change ===========================\n\n  var triggerChange = function triggerChange(values) {\n    var labeledValues = convert2LabelValues(values);\n    setInternalValue(labeledValues);\n\n    if (onChange && ( // Trigger event only when value changed\n    labeledValues.length !== mergedValues.length || labeledValues.some(function (newVal, index) {\n      var _mergedValues$index;\n\n      return ((_mergedValues$index = mergedValues[index]) === null || _mergedValues$index === void 0 ? void 0 : _mergedValues$index.value) !== (newVal === null || newVal === void 0 ? void 0 : newVal.value);\n    }))) {\n      var returnValues = labelInValue ? labeledValues : labeledValues.map(function (v) {\n        return v.value;\n      });\n      var returnOptions = labeledValues.map(function (v) {\n        return injectPropsWithOption(getMixedOption(v.value));\n      });\n      onChange( // Value\n      multiple ? returnValues : returnValues[0], // Option\n      multiple ? returnOptions : returnOptions[0]);\n    }\n  }; // ======================= Accessibility ========================\n\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activeValue = _React$useState2[0],\n      setActiveValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      accessibilityIndex = _React$useState4[0],\n      setAccessibilityIndex = _React$useState4[1];\n\n  var mergedDefaultActiveFirstOption = defaultActiveFirstOption !== undefined ? defaultActiveFirstOption : mode !== 'combobox';\n  var onActiveValue = React.useCallback(function (active, index) {\n    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref2$source = _ref2.source,\n        source = _ref2$source === void 0 ? 'keyboard' : _ref2$source;\n\n    setAccessibilityIndex(index);\n\n    if (backfill && mode === 'combobox' && active !== null && source === 'keyboard') {\n      setActiveValue(String(active));\n    }\n  }, [backfill, mode]); // ========================= OptionList =========================\n\n  var triggerSelect = function triggerSelect(val, selected, type) {\n    var getSelectEnt = function getSelectEnt() {\n      var _option$key2;\n\n      var option = getMixedOption(val);\n      return [labelInValue ? {\n        label: option === null || option === void 0 ? void 0 : option[mergedFieldNames.label],\n        value: val,\n        key: (_option$key2 = option === null || option === void 0 ? void 0 : option.key) !== null && _option$key2 !== void 0 ? _option$key2 : val\n      } : val, injectPropsWithOption(option)];\n    };\n\n    if (selected && onSelect) {\n      var _getSelectEnt = getSelectEnt(),\n          _getSelectEnt2 = _slicedToArray(_getSelectEnt, 2),\n          wrappedValue = _getSelectEnt2[0],\n          _option = _getSelectEnt2[1];\n\n      onSelect(wrappedValue, _option);\n    } else if (!selected && onDeselect && type !== 'clear') {\n      var _getSelectEnt3 = getSelectEnt(),\n          _getSelectEnt4 = _slicedToArray(_getSelectEnt3, 2),\n          _wrappedValue = _getSelectEnt4[0],\n          _option2 = _getSelectEnt4[1];\n\n      onDeselect(_wrappedValue, _option2);\n    }\n  }; // Used for OptionList selection\n\n\n  var onInternalSelect = useRefFunc(function (val, info) {\n    var cloneValues; // Single mode always trigger select only with option list\n\n    var mergedSelect = multiple ? info.selected : true;\n\n    if (mergedSelect) {\n      cloneValues = multiple ? [].concat(_toConsumableArray(mergedValues), [val]) : [val];\n    } else {\n      cloneValues = mergedValues.filter(function (v) {\n        return v.value !== val;\n      });\n    }\n\n    triggerChange(cloneValues);\n    triggerSelect(val, mergedSelect); // Clean search value if single or configured\n\n    if (mode === 'combobox') {\n      // setSearchValue(String(val));\n      setActiveValue('');\n    } else if (!isMultiple || autoClearSearchValue) {\n      setSearchValue('');\n      setActiveValue('');\n    }\n  }); // ======================= Display Change =======================\n  // BaseSelect display values change\n\n  var onDisplayValuesChange = function onDisplayValuesChange(nextValues, info) {\n    triggerChange(nextValues);\n    var type = info.type,\n        values = info.values;\n\n    if (type === 'remove' || type === 'clear') {\n      values.forEach(function (item) {\n        triggerSelect(item.value, false, type);\n      });\n    }\n  }; // =========================== Search ===========================\n\n\n  var onInternalSearch = function onInternalSearch(searchText, info) {\n    setSearchValue(searchText);\n    setActiveValue(null); // [Submit] Tag mode should flush input\n\n    if (info.source === 'submit') {\n      var formatted = (searchText || '').trim(); // prevent empty tags from appearing when you click the Enter button\n\n      if (formatted) {\n        var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), [formatted])));\n        triggerChange(newRawValues);\n        triggerSelect(formatted, true);\n        setSearchValue('');\n      }\n\n      return;\n    }\n\n    if (info.source !== 'blur') {\n      if (mode === 'combobox') {\n        triggerChange(searchText);\n      }\n\n      onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchText);\n    }\n  };\n\n  var onInternalSearchSplit = function onInternalSearchSplit(words) {\n    var patchValues = words;\n\n    if (mode !== 'tags') {\n      patchValues = words.map(function (word) {\n        var opt = labelOptions.get(word);\n        return opt === null || opt === void 0 ? void 0 : opt.value;\n      }).filter(function (val) {\n        return val !== undefined;\n      });\n    }\n\n    var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), _toConsumableArray(patchValues))));\n    triggerChange(newRawValues);\n    newRawValues.forEach(function (newRawValue) {\n      triggerSelect(newRawValue, true);\n    });\n  }; // ========================== Context ===========================\n\n\n  var selectContext = React.useMemo(function () {\n    var realVirtual = virtual !== false && dropdownMatchSelectWidth !== false;\n    return _objectSpread(_objectSpread({}, parsedOptions), {}, {\n      flattenOptions: displayOptions,\n      onActiveValue: onActiveValue,\n      defaultActiveFirstOption: mergedDefaultActiveFirstOption,\n      onSelect: onInternalSelect,\n      menuItemSelectedIcon: menuItemSelectedIcon,\n      rawValues: rawValues,\n      fieldNames: mergedFieldNames,\n      virtual: realVirtual,\n      listHeight: listHeight,\n      listItemHeight: listItemHeight,\n      childrenAsData: childrenAsData\n    });\n  }, [parsedOptions, displayOptions, onActiveValue, mergedDefaultActiveFirstOption, onInternalSelect, menuItemSelectedIcon, rawValues, mergedFieldNames, virtual, dropdownMatchSelectWidth, listHeight, listItemHeight, childrenAsData]); // ========================== Warning ===========================\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n    warningNullOptions(mergedOptions, mergedFieldNames);\n  } // ==============================================================\n  // ==                          Render                          ==\n  // ==============================================================\n\n\n  return /*#__PURE__*/React.createElement(SelectContext.Provider, {\n    value: selectContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({}, restProps, {\n    // >>> MISC\n    id: mergedId,\n    prefixCls: prefixCls,\n    ref: ref,\n    omitDomProps: OMIT_DOM_PROPS,\n    mode: mode // >>> Values\n    ,\n    displayValues: displayValues,\n    onDisplayValuesChange: onDisplayValuesChange // >>> Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch,\n    autoClearSearchValue: autoClearSearchValue,\n    onSearchSplit: onInternalSearchSplit,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth // >>> OptionList\n    ,\n    OptionList: OptionList,\n    emptyOptions: !displayOptions.length // >>> Accessibility\n    ,\n    activeValue: activeValue,\n    activeDescendantId: \"\".concat(mergedId, \"_list_\").concat(accessibilityIndex)\n  })));\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  Select.displayName = 'Select';\n}\n\nvar TypedSelect = Select;\nTypedSelect.Option = Option;\nTypedSelect.OptGroup = OptGroup;\nexport default TypedSelect;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/rc-select/es/Select.js"],"names":["_extends","_toConsumableArray","_defineProperty","_objectSpread","_slicedToArray","_objectWithoutProperties","_typeof","_excluded","useMergedState","warning","React","BaseSelect","isMultiple","useCache","useFilterOptions","useId","useOptions","useRefFunc","OptGroup","Option","OptionList","SelectContext","hasValue","toArray","fillFieldNames","flattenOptions","injectPropsWithOption","warningProps","warningNullOptions","OMIT_DOM_PROPS","isRawValue","value","Select","forwardRef","props","ref","id","mode","_props$prefixCls","prefixCls","backfill","fieldNames","inputValue","searchValue","onSearch","_props$autoClearSearc","autoClearSearchValue","onSelect","onDeselect","_props$dropdownMatchS","dropdownMatchSelectWidth","filterOption","filterSort","optionFilterProp","optionLabelProp","options","children","defaultActiveFirstOption","menuItemSelectedIcon","virtual","_props$listHeight","listHeight","_props$listItemHeight","listItemHeight","defaultValue","labelInValue","onChange","restProps","mergedId","multiple","childrenAsData","mergedFilterOption","useMemo","undefined","mergedFieldNames","JSON","stringify","_useMergedState","postState","search","_useMergedState2","mergedSearchValue","setSearchValue","parsedOptions","valueOptions","labelOptions","mergedOptions","convert2LabelValues","useCallback","draftValues","valueList","map","val","rawValue","rawLabel","rawKey","rawDisabled","rawTitle","_val$value","key","label","option","get","_option$key","disabled","title","process","env","NODE_ENV","optionLabel","_useMergedState3","_useMergedState4","internalValue","setInternalValue","rawLabeledValues","_values$","values","_useCache","_useCache2","mergedValues","getMixedOption","displayValues","length","firstValue","item","_item$label","rawValues","Set","useEffect","_mergedValues$","strValue","String","createTagOption","_ref","mergedLabel","filledTagOptions","cloneOptions","existOptions","has","sort","a","b","forEach","push","filteredOptions","filledSearchOptions","some","concat","orderedFilteredOptions","displayOptions","triggerChange","labeledValues","newVal","index","_mergedValues$index","returnValues","v","returnOptions","_React$useState","useState","_React$useState2","activeValue","setActiveValue","_React$useState3","_React$useState4","accessibilityIndex","setAccessibilityIndex","mergedDefaultActiveFirstOption","onActiveValue","active","_ref2","arguments","_ref2$source","source","triggerSelect","selected","type","getSelectEnt","_option$key2","_getSelectEnt","_getSelectEnt2","wrappedValue","_option","_getSelectEnt3","_getSelectEnt4","_wrappedValue","_option2","onInternalSelect","info","cloneValues","mergedSelect","filter","onDisplayValuesChange","nextValues","onInternalSearch","searchText","formatted","trim","newRawValues","Array","from","onInternalSearchSplit","words","patchValues","word","opt","newRawValue","selectContext","realVirtual","createElement","Provider","omitDomProps","onSearchSplit","emptyOptions","activeDescendantId","displayName","TypedSelect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar _excluded = [\"id\", \"mode\", \"prefixCls\", \"backfill\", \"fieldNames\", \"inputValue\", \"searchValue\", \"onSearch\", \"autoClearSearchValue\", \"onSelect\", \"onDeselect\", \"dropdownMatchSelectWidth\", \"filterOption\", \"filterSort\", \"optionFilterProp\", \"optionLabelProp\", \"options\", \"children\", \"defaultActiveFirstOption\", \"menuItemSelectedIcon\", \"virtual\", \"listHeight\", \"listItemHeight\", \"value\", \"defaultValue\", \"labelInValue\", \"onChange\"];\n/**\n * To match accessibility requirement, we always provide an input in the component.\n * Other element will not set `tabIndex` to avoid `onBlur` sequence problem.\n * For focused select, we set `aria-live=\"polite\"` to update the accessibility content.\n *\n * ref:\n * - keyboard: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role#Keyboard_interactions\n *\n * New api:\n * - listHeight\n * - listItemHeight\n * - component\n *\n * Remove deprecated api:\n * - multiple\n * - tags\n * - combobox\n * - firstActiveValue\n * - dropdownMenuStyle\n * - openClassName (Not list in api)\n *\n * Update:\n * - `backfill` only support `combobox` mode\n * - `combobox` mode not support `labelInValue` since it's meaningless\n * - `getInputElement` only support `combobox` mode\n * - `onChange` return OptionData instead of ReactNode\n * - `filterOption` `onChange` `onSelect` accept OptionData instead of ReactNode\n * - `combobox` mode trigger `onChange` will get `undefined` if no `value` match in Option\n * - `combobox` mode not support `optionLabelProp`\n */\n\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport warning from \"rc-util/es/warning\";\nimport * as React from 'react';\nimport BaseSelect, { isMultiple } from \"./BaseSelect\";\nimport useCache from \"./hooks/useCache\";\nimport useFilterOptions from \"./hooks/useFilterOptions\";\nimport useId from \"./hooks/useId\";\nimport useOptions from \"./hooks/useOptions\";\nimport useRefFunc from \"./hooks/useRefFunc\";\nimport OptGroup from \"./OptGroup\";\nimport Option from \"./Option\";\nimport OptionList from \"./OptionList\";\nimport SelectContext from \"./SelectContext\";\nimport { hasValue, toArray } from \"./utils/commonUtil\";\nimport { fillFieldNames, flattenOptions, injectPropsWithOption } from \"./utils/valueUtil\";\nimport warningProps, { warningNullOptions } from \"./utils/warningPropsUtil\";\nvar OMIT_DOM_PROPS = ['inputValue'];\nfunction isRawValue(value) {\n  return !value || _typeof(value) !== 'object';\n}\nvar Select = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n    mode = props.mode,\n    _props$prefixCls = props.prefixCls,\n    prefixCls = _props$prefixCls === void 0 ? 'rc-select' : _props$prefixCls,\n    backfill = props.backfill,\n    fieldNames = props.fieldNames,\n    inputValue = props.inputValue,\n    searchValue = props.searchValue,\n    onSearch = props.onSearch,\n    _props$autoClearSearc = props.autoClearSearchValue,\n    autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,\n    onSelect = props.onSelect,\n    onDeselect = props.onDeselect,\n    _props$dropdownMatchS = props.dropdownMatchSelectWidth,\n    dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS,\n    filterOption = props.filterOption,\n    filterSort = props.filterSort,\n    optionFilterProp = props.optionFilterProp,\n    optionLabelProp = props.optionLabelProp,\n    options = props.options,\n    children = props.children,\n    defaultActiveFirstOption = props.defaultActiveFirstOption,\n    menuItemSelectedIcon = props.menuItemSelectedIcon,\n    virtual = props.virtual,\n    _props$listHeight = props.listHeight,\n    listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight,\n    _props$listItemHeight = props.listItemHeight,\n    listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight,\n    value = props.value,\n    defaultValue = props.defaultValue,\n    labelInValue = props.labelInValue,\n    onChange = props.onChange,\n    restProps = _objectWithoutProperties(props, _excluded);\n  var mergedId = useId(id);\n  var multiple = isMultiple(mode);\n  var childrenAsData = !!(!options && children);\n  var mergedFilterOption = React.useMemo(function () {\n    if (filterOption === undefined && mode === 'combobox') {\n      return false;\n    }\n    return filterOption;\n  }, [filterOption, mode]);\n\n  // ========================= FieldNames =========================\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames, childrenAsData);\n  }, /* eslint-disable react-hooks/exhaustive-deps */\n  [\n  // We stringify fieldNames to avoid unnecessary re-renders.\n  JSON.stringify(fieldNames), childrenAsData]\n  /* eslint-enable react-hooks/exhaustive-deps */);\n\n  // =========================== Search ===========================\n  var _useMergedState = useMergedState('', {\n      value: searchValue !== undefined ? searchValue : inputValue,\n      postState: function postState(search) {\n        return search || '';\n      }\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    mergedSearchValue = _useMergedState2[0],\n    setSearchValue = _useMergedState2[1];\n\n  // =========================== Option ===========================\n  var parsedOptions = useOptions(options, children, mergedFieldNames, optionFilterProp, optionLabelProp);\n  var valueOptions = parsedOptions.valueOptions,\n    labelOptions = parsedOptions.labelOptions,\n    mergedOptions = parsedOptions.options;\n\n  // ========================= Wrap Value =========================\n  var convert2LabelValues = React.useCallback(function (draftValues) {\n    // Convert to array\n    var valueList = toArray(draftValues);\n\n    // Convert to labelInValue type\n    return valueList.map(function (val) {\n      var rawValue;\n      var rawLabel;\n      var rawKey;\n      var rawDisabled;\n      var rawTitle;\n\n      // Fill label & value\n      if (isRawValue(val)) {\n        rawValue = val;\n      } else {\n        var _val$value;\n        rawKey = val.key;\n        rawLabel = val.label;\n        rawValue = (_val$value = val.value) !== null && _val$value !== void 0 ? _val$value : rawKey;\n      }\n      var option = valueOptions.get(rawValue);\n      if (option) {\n        var _option$key;\n        // Fill missing props\n        if (rawLabel === undefined) rawLabel = option === null || option === void 0 ? void 0 : option[optionLabelProp || mergedFieldNames.label];\n        if (rawKey === undefined) rawKey = (_option$key = option === null || option === void 0 ? void 0 : option.key) !== null && _option$key !== void 0 ? _option$key : rawValue;\n        rawDisabled = option === null || option === void 0 ? void 0 : option.disabled;\n        rawTitle = option === null || option === void 0 ? void 0 : option.title;\n\n        // Warning if label not same as provided\n        if (process.env.NODE_ENV !== 'production' && !optionLabelProp) {\n          var optionLabel = option === null || option === void 0 ? void 0 : option[mergedFieldNames.label];\n          if (optionLabel !== undefined && optionLabel !== rawLabel) {\n            warning(false, '`label` of `value` is not same as `label` in Select options.');\n          }\n        }\n      }\n      return {\n        label: rawLabel,\n        value: rawValue,\n        key: rawKey,\n        disabled: rawDisabled,\n        title: rawTitle\n      };\n    });\n  }, [mergedFieldNames, optionLabelProp, valueOptions]);\n\n  // =========================== Values ===========================\n  var _useMergedState3 = useMergedState(defaultValue, {\n      value: value\n    }),\n    _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n    internalValue = _useMergedState4[0],\n    setInternalValue = _useMergedState4[1];\n\n  // Merged value with LabelValueType\n  var rawLabeledValues = React.useMemo(function () {\n    var _values$;\n    var values = convert2LabelValues(internalValue);\n\n    // combobox no need save value when it's no value\n    if (mode === 'combobox' && !((_values$ = values[0]) !== null && _values$ !== void 0 && _values$.value)) {\n      return [];\n    }\n    return values;\n  }, [internalValue, convert2LabelValues, mode]);\n\n  // Fill label with cache to avoid option remove\n  var _useCache = useCache(rawLabeledValues, valueOptions),\n    _useCache2 = _slicedToArray(_useCache, 2),\n    mergedValues = _useCache2[0],\n    getMixedOption = _useCache2[1];\n  var displayValues = React.useMemo(function () {\n    // `null` need show as placeholder instead\n    // https://github.com/ant-design/ant-design/issues/25057\n    if (!mode && mergedValues.length === 1) {\n      var firstValue = mergedValues[0];\n      if (firstValue.value === null && (firstValue.label === null || firstValue.label === undefined)) {\n        return [];\n      }\n    }\n    return mergedValues.map(function (item) {\n      var _item$label;\n      return _objectSpread(_objectSpread({}, item), {}, {\n        label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value\n      });\n    });\n  }, [mode, mergedValues]);\n\n  /** Convert `displayValues` to raw value type set */\n  var rawValues = React.useMemo(function () {\n    return new Set(mergedValues.map(function (val) {\n      return val.value;\n    }));\n  }, [mergedValues]);\n  React.useEffect(function () {\n    if (mode === 'combobox') {\n      var _mergedValues$;\n      var strValue = (_mergedValues$ = mergedValues[0]) === null || _mergedValues$ === void 0 ? void 0 : _mergedValues$.value;\n      setSearchValue(hasValue(strValue) ? String(strValue) : '');\n    }\n  }, [mergedValues]);\n\n  // ======================= Display Option =======================\n  // Create a placeholder item if not exist in `options`\n  var createTagOption = useRefFunc(function (val, label) {\n    var _ref;\n    var mergedLabel = label !== null && label !== void 0 ? label : val;\n    return _ref = {}, _defineProperty(_ref, mergedFieldNames.value, val), _defineProperty(_ref, mergedFieldNames.label, mergedLabel), _ref;\n  });\n\n  // Fill tag as option if mode is `tags`\n  var filledTagOptions = React.useMemo(function () {\n    if (mode !== 'tags') {\n      return mergedOptions;\n    }\n\n    // >>> Tag mode\n    var cloneOptions = _toConsumableArray(mergedOptions);\n\n    // Check if value exist in options (include new patch item)\n    var existOptions = function existOptions(val) {\n      return valueOptions.has(val);\n    };\n\n    // Fill current value as option\n    _toConsumableArray(mergedValues).sort(function (a, b) {\n      return a.value < b.value ? -1 : 1;\n    }).forEach(function (item) {\n      var val = item.value;\n      if (!existOptions(val)) {\n        cloneOptions.push(createTagOption(val, item.label));\n      }\n    });\n    return cloneOptions;\n  }, [createTagOption, mergedOptions, valueOptions, mergedValues, mode]);\n  var filteredOptions = useFilterOptions(filledTagOptions, mergedFieldNames, mergedSearchValue, mergedFilterOption, optionFilterProp);\n\n  // Fill options with search value if needed\n  var filledSearchOptions = React.useMemo(function () {\n    if (mode !== 'tags' || !mergedSearchValue || filteredOptions.some(function (item) {\n      return item[optionFilterProp || 'value'] === mergedSearchValue;\n    })) {\n      return filteredOptions;\n    }\n\n    // Fill search value as option\n    return [createTagOption(mergedSearchValue)].concat(_toConsumableArray(filteredOptions));\n  }, [createTagOption, optionFilterProp, mode, filteredOptions, mergedSearchValue]);\n  var orderedFilteredOptions = React.useMemo(function () {\n    if (!filterSort) {\n      return filledSearchOptions;\n    }\n    return _toConsumableArray(filledSearchOptions).sort(function (a, b) {\n      return filterSort(a, b);\n    });\n  }, [filledSearchOptions, filterSort]);\n  var displayOptions = React.useMemo(function () {\n    return flattenOptions(orderedFilteredOptions, {\n      fieldNames: mergedFieldNames,\n      childrenAsData: childrenAsData\n    });\n  }, [orderedFilteredOptions, mergedFieldNames, childrenAsData]);\n\n  // =========================== Change ===========================\n  var triggerChange = function triggerChange(values) {\n    var labeledValues = convert2LabelValues(values);\n    setInternalValue(labeledValues);\n    if (onChange && (\n    // Trigger event only when value changed\n    labeledValues.length !== mergedValues.length || labeledValues.some(function (newVal, index) {\n      var _mergedValues$index;\n      return ((_mergedValues$index = mergedValues[index]) === null || _mergedValues$index === void 0 ? void 0 : _mergedValues$index.value) !== (newVal === null || newVal === void 0 ? void 0 : newVal.value);\n    }))) {\n      var returnValues = labelInValue ? labeledValues : labeledValues.map(function (v) {\n        return v.value;\n      });\n      var returnOptions = labeledValues.map(function (v) {\n        return injectPropsWithOption(getMixedOption(v.value));\n      });\n      onChange(\n      // Value\n      multiple ? returnValues : returnValues[0],\n      // Option\n      multiple ? returnOptions : returnOptions[0]);\n    }\n  };\n\n  // ======================= Accessibility ========================\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    activeValue = _React$useState2[0],\n    setActiveValue = _React$useState2[1];\n  var _React$useState3 = React.useState(0),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    accessibilityIndex = _React$useState4[0],\n    setAccessibilityIndex = _React$useState4[1];\n  var mergedDefaultActiveFirstOption = defaultActiveFirstOption !== undefined ? defaultActiveFirstOption : mode !== 'combobox';\n  var onActiveValue = React.useCallback(function (active, index) {\n    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref2$source = _ref2.source,\n      source = _ref2$source === void 0 ? 'keyboard' : _ref2$source;\n    setAccessibilityIndex(index);\n    if (backfill && mode === 'combobox' && active !== null && source === 'keyboard') {\n      setActiveValue(String(active));\n    }\n  }, [backfill, mode]);\n\n  // ========================= OptionList =========================\n  var triggerSelect = function triggerSelect(val, selected, type) {\n    var getSelectEnt = function getSelectEnt() {\n      var _option$key2;\n      var option = getMixedOption(val);\n      return [labelInValue ? {\n        label: option === null || option === void 0 ? void 0 : option[mergedFieldNames.label],\n        value: val,\n        key: (_option$key2 = option === null || option === void 0 ? void 0 : option.key) !== null && _option$key2 !== void 0 ? _option$key2 : val\n      } : val, injectPropsWithOption(option)];\n    };\n    if (selected && onSelect) {\n      var _getSelectEnt = getSelectEnt(),\n        _getSelectEnt2 = _slicedToArray(_getSelectEnt, 2),\n        wrappedValue = _getSelectEnt2[0],\n        _option = _getSelectEnt2[1];\n      onSelect(wrappedValue, _option);\n    } else if (!selected && onDeselect && type !== 'clear') {\n      var _getSelectEnt3 = getSelectEnt(),\n        _getSelectEnt4 = _slicedToArray(_getSelectEnt3, 2),\n        _wrappedValue = _getSelectEnt4[0],\n        _option2 = _getSelectEnt4[1];\n      onDeselect(_wrappedValue, _option2);\n    }\n  };\n\n  // Used for OptionList selection\n  var onInternalSelect = useRefFunc(function (val, info) {\n    var cloneValues;\n\n    // Single mode always trigger select only with option list\n    var mergedSelect = multiple ? info.selected : true;\n    if (mergedSelect) {\n      cloneValues = multiple ? [].concat(_toConsumableArray(mergedValues), [val]) : [val];\n    } else {\n      cloneValues = mergedValues.filter(function (v) {\n        return v.value !== val;\n      });\n    }\n    triggerChange(cloneValues);\n    triggerSelect(val, mergedSelect);\n\n    // Clean search value if single or configured\n    if (mode === 'combobox') {\n      // setSearchValue(String(val));\n      setActiveValue('');\n    } else if (!isMultiple || autoClearSearchValue) {\n      setSearchValue('');\n      setActiveValue('');\n    }\n  });\n\n  // ======================= Display Change =======================\n  // BaseSelect display values change\n  var onDisplayValuesChange = function onDisplayValuesChange(nextValues, info) {\n    triggerChange(nextValues);\n    var type = info.type,\n      values = info.values;\n    if (type === 'remove' || type === 'clear') {\n      values.forEach(function (item) {\n        triggerSelect(item.value, false, type);\n      });\n    }\n  };\n\n  // =========================== Search ===========================\n  var onInternalSearch = function onInternalSearch(searchText, info) {\n    setSearchValue(searchText);\n    setActiveValue(null);\n\n    // [Submit] Tag mode should flush input\n    if (info.source === 'submit') {\n      var formatted = (searchText || '').trim();\n      // prevent empty tags from appearing when you click the Enter button\n      if (formatted) {\n        var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), [formatted])));\n        triggerChange(newRawValues);\n        triggerSelect(formatted, true);\n        setSearchValue('');\n      }\n      return;\n    }\n    if (info.source !== 'blur') {\n      if (mode === 'combobox') {\n        triggerChange(searchText);\n      }\n      onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchText);\n    }\n  };\n  var onInternalSearchSplit = function onInternalSearchSplit(words) {\n    var patchValues = words;\n    if (mode !== 'tags') {\n      patchValues = words.map(function (word) {\n        var opt = labelOptions.get(word);\n        return opt === null || opt === void 0 ? void 0 : opt.value;\n      }).filter(function (val) {\n        return val !== undefined;\n      });\n    }\n    var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), _toConsumableArray(patchValues))));\n    triggerChange(newRawValues);\n    newRawValues.forEach(function (newRawValue) {\n      triggerSelect(newRawValue, true);\n    });\n  };\n\n  // ========================== Context ===========================\n  var selectContext = React.useMemo(function () {\n    var realVirtual = virtual !== false && dropdownMatchSelectWidth !== false;\n    return _objectSpread(_objectSpread({}, parsedOptions), {}, {\n      flattenOptions: displayOptions,\n      onActiveValue: onActiveValue,\n      defaultActiveFirstOption: mergedDefaultActiveFirstOption,\n      onSelect: onInternalSelect,\n      menuItemSelectedIcon: menuItemSelectedIcon,\n      rawValues: rawValues,\n      fieldNames: mergedFieldNames,\n      virtual: realVirtual,\n      listHeight: listHeight,\n      listItemHeight: listItemHeight,\n      childrenAsData: childrenAsData\n    });\n  }, [parsedOptions, displayOptions, onActiveValue, mergedDefaultActiveFirstOption, onInternalSelect, menuItemSelectedIcon, rawValues, mergedFieldNames, virtual, dropdownMatchSelectWidth, listHeight, listItemHeight, childrenAsData]);\n\n  // ========================== Warning ===========================\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n    warningNullOptions(mergedOptions, mergedFieldNames);\n  }\n\n  // ==============================================================\n  // ==                          Render                          ==\n  // ==============================================================\n  return /*#__PURE__*/React.createElement(SelectContext.Provider, {\n    value: selectContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({}, restProps, {\n    // >>> MISC\n    id: mergedId,\n    prefixCls: prefixCls,\n    ref: ref,\n    omitDomProps: OMIT_DOM_PROPS,\n    mode: mode\n    // >>> Values\n    ,\n    displayValues: displayValues,\n    onDisplayValuesChange: onDisplayValuesChange\n    // >>> Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch,\n    autoClearSearchValue: autoClearSearchValue,\n    onSearchSplit: onInternalSearchSplit,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth\n    // >>> OptionList\n    ,\n    OptionList: OptionList,\n    emptyOptions: !displayOptions.length\n    // >>> Accessibility\n    ,\n    activeValue: activeValue,\n    activeDescendantId: \"\".concat(mergedId, \"_list_\").concat(accessibilityIndex)\n  })));\n});\nif (process.env.NODE_ENV !== 'production') {\n  Select.displayName = 'Select';\n}\nvar TypedSelect = Select;\nTypedSelect.Option = Option;\nTypedSelect.OptGroup = OptGroup;\nexport default TypedSelect;"]},"metadata":{},"sourceType":"module"}