{"ast":null,"code":"import * as React from 'react';\nimport { DescriptionsContext } from '.';\nimport Cell from './Cell';\n\nfunction renderCells(items, _ref, _ref2) {\n  let {\n    colon,\n    prefixCls,\n    bordered\n  } = _ref;\n  let {\n    component,\n    type,\n    showLabel,\n    showContent,\n    labelStyle: rootLabelStyle,\n    contentStyle: rootContentStyle\n  } = _ref2;\n  return items.map((_ref3, index) => {\n    let {\n      props: {\n        label,\n        children,\n        prefixCls: itemPrefixCls = prefixCls,\n        className,\n        style,\n        labelStyle,\n        contentStyle,\n        span = 1\n      },\n      key\n    } = _ref3;\n\n    if (typeof component === 'string') {\n      return /*#__PURE__*/React.createElement(Cell, {\n        key: `${type}-${key || index}`,\n        className: className,\n        style: style,\n        labelStyle: Object.assign(Object.assign({}, rootLabelStyle), labelStyle),\n        contentStyle: Object.assign(Object.assign({}, rootContentStyle), contentStyle),\n        span: span,\n        colon: colon,\n        component: component,\n        itemPrefixCls: itemPrefixCls,\n        bordered: bordered,\n        label: showLabel ? label : null,\n        content: showContent ? children : null\n      });\n    }\n\n    return [/*#__PURE__*/React.createElement(Cell, {\n      key: `label-${key || index}`,\n      className: className,\n      style: Object.assign(Object.assign(Object.assign({}, rootLabelStyle), style), labelStyle),\n      span: 1,\n      colon: colon,\n      component: component[0],\n      itemPrefixCls: itemPrefixCls,\n      bordered: bordered,\n      label: label\n    }), /*#__PURE__*/React.createElement(Cell, {\n      key: `content-${key || index}`,\n      className: className,\n      style: Object.assign(Object.assign(Object.assign({}, rootContentStyle), style), contentStyle),\n      span: span * 2 - 1,\n      component: component[1],\n      itemPrefixCls: itemPrefixCls,\n      bordered: bordered,\n      content: children\n    })];\n  });\n}\n\nconst Row = props => {\n  const descContext = React.useContext(DescriptionsContext);\n  const {\n    prefixCls,\n    vertical,\n    row,\n    index,\n    bordered\n  } = props;\n\n  if (vertical) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"tr\", {\n      key: `label-${index}`,\n      className: `${prefixCls}-row`\n    }, renderCells(row, props, Object.assign({\n      component: 'th',\n      type: 'label',\n      showLabel: true\n    }, descContext))), /*#__PURE__*/React.createElement(\"tr\", {\n      key: `content-${index}`,\n      className: `${prefixCls}-row`\n    }, renderCells(row, props, Object.assign({\n      component: 'td',\n      type: 'content',\n      showContent: true\n    }, descContext))));\n  }\n\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    key: index,\n    className: `${prefixCls}-row`\n  }, renderCells(row, props, Object.assign({\n    component: bordered ? ['th', 'td'] : 'td',\n    type: 'item',\n    showLabel: true,\n    showContent: true\n  }, descContext)));\n};\n\nexport default Row;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/descriptions/Row.js"],"names":["React","DescriptionsContext","Cell","renderCells","items","_ref","_ref2","colon","prefixCls","bordered","component","type","showLabel","showContent","labelStyle","rootLabelStyle","contentStyle","rootContentStyle","map","_ref3","index","props","label","children","itemPrefixCls","className","style","span","key","createElement","Object","assign","content","Row","descContext","useContext","vertical","row","Fragment"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { DescriptionsContext } from '.';\nimport Cell from './Cell';\nfunction renderCells(items, _ref, _ref2) {\n  let {\n    colon,\n    prefixCls,\n    bordered\n  } = _ref;\n  let {\n    component,\n    type,\n    showLabel,\n    showContent,\n    labelStyle: rootLabelStyle,\n    contentStyle: rootContentStyle\n  } = _ref2;\n  return items.map((_ref3, index) => {\n    let {\n      props: {\n        label,\n        children,\n        prefixCls: itemPrefixCls = prefixCls,\n        className,\n        style,\n        labelStyle,\n        contentStyle,\n        span = 1\n      },\n      key\n    } = _ref3;\n    if (typeof component === 'string') {\n      return /*#__PURE__*/React.createElement(Cell, {\n        key: `${type}-${key || index}`,\n        className: className,\n        style: style,\n        labelStyle: Object.assign(Object.assign({}, rootLabelStyle), labelStyle),\n        contentStyle: Object.assign(Object.assign({}, rootContentStyle), contentStyle),\n        span: span,\n        colon: colon,\n        component: component,\n        itemPrefixCls: itemPrefixCls,\n        bordered: bordered,\n        label: showLabel ? label : null,\n        content: showContent ? children : null\n      });\n    }\n    return [/*#__PURE__*/React.createElement(Cell, {\n      key: `label-${key || index}`,\n      className: className,\n      style: Object.assign(Object.assign(Object.assign({}, rootLabelStyle), style), labelStyle),\n      span: 1,\n      colon: colon,\n      component: component[0],\n      itemPrefixCls: itemPrefixCls,\n      bordered: bordered,\n      label: label\n    }), /*#__PURE__*/React.createElement(Cell, {\n      key: `content-${key || index}`,\n      className: className,\n      style: Object.assign(Object.assign(Object.assign({}, rootContentStyle), style), contentStyle),\n      span: span * 2 - 1,\n      component: component[1],\n      itemPrefixCls: itemPrefixCls,\n      bordered: bordered,\n      content: children\n    })];\n  });\n}\nconst Row = props => {\n  const descContext = React.useContext(DescriptionsContext);\n  const {\n    prefixCls,\n    vertical,\n    row,\n    index,\n    bordered\n  } = props;\n  if (vertical) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"tr\", {\n      key: `label-${index}`,\n      className: `${prefixCls}-row`\n    }, renderCells(row, props, Object.assign({\n      component: 'th',\n      type: 'label',\n      showLabel: true\n    }, descContext))), /*#__PURE__*/React.createElement(\"tr\", {\n      key: `content-${index}`,\n      className: `${prefixCls}-row`\n    }, renderCells(row, props, Object.assign({\n      component: 'td',\n      type: 'content',\n      showContent: true\n    }, descContext))));\n  }\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    key: index,\n    className: `${prefixCls}-row`\n  }, renderCells(row, props, Object.assign({\n    component: bordered ? ['th', 'td'] : 'td',\n    type: 'item',\n    showLabel: true,\n    showContent: true\n  }, descContext)));\n};\nexport default Row;"]},"metadata":{},"sourceType":"module"}