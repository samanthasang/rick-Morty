{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useLayoutUpdateEffect } from \"rc-util/es/hooks/useLayoutEffect\";\nimport { useRef, useState } from 'react';\n/**\n * Help to merge callback with `useLayoutEffect`.\n * One time will only trigger once.\n */\n\nexport default function useUpdate(callback) {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  var effectRef = useRef(0);\n  var callbackRef = useRef();\n  callbackRef.current = callback; // Trigger on `useLayoutEffect`\n\n  useLayoutUpdateEffect(function () {\n    var _callbackRef$current;\n\n    (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef);\n  }, [count]); // Trigger to update count\n\n  return function () {\n    if (effectRef.current !== count) {\n      return;\n    }\n\n    effectRef.current += 1;\n    setCount(effectRef.current);\n  };\n}\nexport function useUpdateState(defaultState) {\n  var batchRef = useRef([]);\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      forceUpdate = _useState4[1];\n\n  var state = useRef(typeof defaultState === 'function' ? defaultState() : defaultState);\n  var flushUpdate = useUpdate(function () {\n    var current = state.current;\n    batchRef.current.forEach(function (callback) {\n      current = callback(current);\n    });\n    batchRef.current = [];\n    state.current = current;\n    forceUpdate({});\n  });\n\n  function updater(callback) {\n    batchRef.current.push(callback);\n    flushUpdate();\n  }\n\n  return [state.current, updater];\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/rc-tabs/es/hooks/useUpdate.js"],"names":["_slicedToArray","useLayoutUpdateEffect","useRef","useState","useUpdate","callback","_useState","_useState2","count","setCount","effectRef","callbackRef","current","_callbackRef$current","call","useUpdateState","defaultState","batchRef","_useState3","_useState4","forceUpdate","state","flushUpdate","forEach","updater","push"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,SAASC,qBAAT,QAAsC,kCAAtC;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;AAEA;AACA;AACA;AACA;;AACA,eAAe,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AAC1C,MAAIC,SAAS,GAAGH,QAAQ,CAAC,CAAD,CAAxB;AAAA,MACEI,UAAU,GAAGP,cAAc,CAACM,SAAD,EAAY,CAAZ,CAD7B;AAAA,MAEEE,KAAK,GAAGD,UAAU,CAAC,CAAD,CAFpB;AAAA,MAGEE,QAAQ,GAAGF,UAAU,CAAC,CAAD,CAHvB;;AAIA,MAAIG,SAAS,GAAGR,MAAM,CAAC,CAAD,CAAtB;AACA,MAAIS,WAAW,GAAGT,MAAM,EAAxB;AACAS,EAAAA,WAAW,CAACC,OAAZ,GAAsBP,QAAtB,CAP0C,CAS1C;;AACAJ,EAAAA,qBAAqB,CAAC,YAAY;AAChC,QAAIY,oBAAJ;;AACA,KAACA,oBAAoB,GAAGF,WAAW,CAACC,OAApC,MAAiD,IAAjD,IAAyDC,oBAAoB,KAAK,KAAK,CAAvF,GAA2F,KAAK,CAAhG,GAAoGA,oBAAoB,CAACC,IAArB,CAA0BH,WAA1B,CAApG;AACD,GAHoB,EAGlB,CAACH,KAAD,CAHkB,CAArB,CAV0C,CAe1C;;AACA,SAAO,YAAY;AACjB,QAAIE,SAAS,CAACE,OAAV,KAAsBJ,KAA1B,EAAiC;AAC/B;AACD;;AACDE,IAAAA,SAAS,CAACE,OAAV,IAAqB,CAArB;AACAH,IAAAA,QAAQ,CAACC,SAAS,CAACE,OAAX,CAAR;AACD,GAND;AAOD;AACD,OAAO,SAASG,cAAT,CAAwBC,YAAxB,EAAsC;AAC3C,MAAIC,QAAQ,GAAGf,MAAM,CAAC,EAAD,CAArB;;AACA,MAAIgB,UAAU,GAAGf,QAAQ,CAAC,EAAD,CAAzB;AAAA,MACEgB,UAAU,GAAGnB,cAAc,CAACkB,UAAD,EAAa,CAAb,CAD7B;AAAA,MAEEE,WAAW,GAAGD,UAAU,CAAC,CAAD,CAF1B;;AAGA,MAAIE,KAAK,GAAGnB,MAAM,CAAC,OAAOc,YAAP,KAAwB,UAAxB,GAAqCA,YAAY,EAAjD,GAAsDA,YAAvD,CAAlB;AACA,MAAIM,WAAW,GAAGlB,SAAS,CAAC,YAAY;AACtC,QAAIQ,OAAO,GAAGS,KAAK,CAACT,OAApB;AACAK,IAAAA,QAAQ,CAACL,OAAT,CAAiBW,OAAjB,CAAyB,UAAUlB,QAAV,EAAoB;AAC3CO,MAAAA,OAAO,GAAGP,QAAQ,CAACO,OAAD,CAAlB;AACD,KAFD;AAGAK,IAAAA,QAAQ,CAACL,OAAT,GAAmB,EAAnB;AACAS,IAAAA,KAAK,CAACT,OAAN,GAAgBA,OAAhB;AACAQ,IAAAA,WAAW,CAAC,EAAD,CAAX;AACD,GAR0B,CAA3B;;AASA,WAASI,OAAT,CAAiBnB,QAAjB,EAA2B;AACzBY,IAAAA,QAAQ,CAACL,OAAT,CAAiBa,IAAjB,CAAsBpB,QAAtB;AACAiB,IAAAA,WAAW;AACZ;;AACD,SAAO,CAACD,KAAK,CAACT,OAAP,EAAgBY,OAAhB,CAAP;AACD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useLayoutUpdateEffect } from \"rc-util/es/hooks/useLayoutEffect\";\nimport { useRef, useState } from 'react';\n\n/**\n * Help to merge callback with `useLayoutEffect`.\n * One time will only trigger once.\n */\nexport default function useUpdate(callback) {\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    count = _useState2[0],\n    setCount = _useState2[1];\n  var effectRef = useRef(0);\n  var callbackRef = useRef();\n  callbackRef.current = callback;\n\n  // Trigger on `useLayoutEffect`\n  useLayoutUpdateEffect(function () {\n    var _callbackRef$current;\n    (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef);\n  }, [count]);\n\n  // Trigger to update count\n  return function () {\n    if (effectRef.current !== count) {\n      return;\n    }\n    effectRef.current += 1;\n    setCount(effectRef.current);\n  };\n}\nexport function useUpdateState(defaultState) {\n  var batchRef = useRef([]);\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    forceUpdate = _useState4[1];\n  var state = useRef(typeof defaultState === 'function' ? defaultState() : defaultState);\n  var flushUpdate = useUpdate(function () {\n    var current = state.current;\n    batchRef.current.forEach(function (callback) {\n      current = callback(current);\n    });\n    batchRef.current = [];\n    state.current = current;\n    forceUpdate({});\n  });\n  function updater(callback) {\n    batchRef.current.push(callback);\n    flushUpdate();\n  }\n  return [state.current, updater];\n}"]},"metadata":{},"sourceType":"module"}