{"ast":null,"code":"/**\n * Cut input selection into 2 part and return text before selection start\n */\nexport function getBeforeSelectionText(input) {\n  var selectionStart = input.selectionStart;\n  return input.value.slice(0, selectionStart);\n}\n/**\n * Find the last match prefix index\n */\n\nexport function getLastMeasureIndex(text, prefix) {\n  return prefix.reduce(function (lastMatch, prefixStr) {\n    var lastIndex = text.lastIndexOf(prefixStr);\n\n    if (lastIndex > lastMatch.location) {\n      return {\n        location: lastIndex,\n        prefix: prefixStr\n      };\n    }\n\n    return lastMatch;\n  }, {\n    location: -1,\n    prefix: ''\n  });\n}\n\nfunction lower(char) {\n  return (char || '').toLowerCase();\n}\n\nfunction reduceText(text, targetText, split) {\n  var firstChar = text[0];\n\n  if (!firstChar || firstChar === split) {\n    return text;\n  } // Reuse rest text as it can\n\n\n  var restText = text;\n  var targetTextLen = targetText.length;\n\n  for (var i = 0; i < targetTextLen; i += 1) {\n    if (lower(restText[i]) !== lower(targetText[i])) {\n      restText = restText.slice(i);\n      break;\n    } else if (i === targetTextLen - 1) {\n      restText = restText.slice(targetTextLen);\n    }\n  }\n\n  return restText;\n}\n/**\n * Paint targetText into current text:\n *  text: little@litest\n *  targetText: light\n *  => little @light test\n */\n\n\nexport function replaceWithMeasure(text, measureConfig) {\n  var measureLocation = measureConfig.measureLocation,\n      prefix = measureConfig.prefix,\n      targetText = measureConfig.targetText,\n      selectionStart = measureConfig.selectionStart,\n      split = measureConfig.split; // Before text will append one space if have other text\n\n  var beforeMeasureText = text.slice(0, measureLocation);\n\n  if (beforeMeasureText[beforeMeasureText.length - split.length] === split) {\n    beforeMeasureText = beforeMeasureText.slice(0, beforeMeasureText.length - split.length);\n  }\n\n  if (beforeMeasureText) {\n    beforeMeasureText = \"\".concat(beforeMeasureText).concat(split);\n  } // Cut duplicate string with current targetText\n\n\n  var restText = reduceText(text.slice(selectionStart), targetText.slice(selectionStart - measureLocation - prefix.length), split);\n\n  if (restText.slice(0, split.length) === split) {\n    restText = restText.slice(split.length);\n  }\n\n  var connectedStartText = \"\".concat(beforeMeasureText).concat(prefix).concat(targetText).concat(split);\n  return {\n    text: \"\".concat(connectedStartText).concat(restText),\n    selectionLocation: connectedStartText.length\n  };\n}\nexport function setInputSelection(input, location) {\n  input.setSelectionRange(location, location);\n  /**\n   * Reset caret into view.\n   * Since this function always called by user control, it's safe to focus element.\n   */\n\n  input.blur();\n  input.focus();\n}\nexport function validateSearch(text, split) {\n  return !split || text.indexOf(split) === -1;\n}\nexport function filterOption(input, _ref) {\n  var _ref$value = _ref.value,\n      value = _ref$value === void 0 ? '' : _ref$value;\n  var lowerCase = input.toLowerCase();\n  return value.toLowerCase().indexOf(lowerCase) !== -1;\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/rc-mentions/es/util.js"],"names":["getBeforeSelectionText","input","selectionStart","value","slice","getLastMeasureIndex","text","prefix","reduce","lastMatch","prefixStr","lastIndex","lastIndexOf","location","lower","char","toLowerCase","reduceText","targetText","split","firstChar","restText","targetTextLen","length","i","replaceWithMeasure","measureConfig","measureLocation","beforeMeasureText","concat","connectedStartText","selectionLocation","setInputSelection","setSelectionRange","blur","focus","validateSearch","indexOf","filterOption","_ref","_ref$value","lowerCase"],"mappings":"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","sourcesContent":["/**\n * Cut input selection into 2 part and return text before selection start\n */\nexport function getBeforeSelectionText(input) {\n  var selectionStart = input.selectionStart;\n  return input.value.slice(0, selectionStart);\n}\n/**\n * Find the last match prefix index\n */\nexport function getLastMeasureIndex(text, prefix) {\n  return prefix.reduce(function (lastMatch, prefixStr) {\n    var lastIndex = text.lastIndexOf(prefixStr);\n    if (lastIndex > lastMatch.location) {\n      return {\n        location: lastIndex,\n        prefix: prefixStr\n      };\n    }\n    return lastMatch;\n  }, {\n    location: -1,\n    prefix: ''\n  });\n}\nfunction lower(char) {\n  return (char || '').toLowerCase();\n}\nfunction reduceText(text, targetText, split) {\n  var firstChar = text[0];\n  if (!firstChar || firstChar === split) {\n    return text;\n  }\n\n  // Reuse rest text as it can\n  var restText = text;\n  var targetTextLen = targetText.length;\n  for (var i = 0; i < targetTextLen; i += 1) {\n    if (lower(restText[i]) !== lower(targetText[i])) {\n      restText = restText.slice(i);\n      break;\n    } else if (i === targetTextLen - 1) {\n      restText = restText.slice(targetTextLen);\n    }\n  }\n  return restText;\n}\n\n/**\n * Paint targetText into current text:\n *  text: little@litest\n *  targetText: light\n *  => little @light test\n */\nexport function replaceWithMeasure(text, measureConfig) {\n  var measureLocation = measureConfig.measureLocation,\n    prefix = measureConfig.prefix,\n    targetText = measureConfig.targetText,\n    selectionStart = measureConfig.selectionStart,\n    split = measureConfig.split;\n\n  // Before text will append one space if have other text\n  var beforeMeasureText = text.slice(0, measureLocation);\n  if (beforeMeasureText[beforeMeasureText.length - split.length] === split) {\n    beforeMeasureText = beforeMeasureText.slice(0, beforeMeasureText.length - split.length);\n  }\n  if (beforeMeasureText) {\n    beforeMeasureText = \"\".concat(beforeMeasureText).concat(split);\n  }\n\n  // Cut duplicate string with current targetText\n  var restText = reduceText(text.slice(selectionStart), targetText.slice(selectionStart - measureLocation - prefix.length), split);\n  if (restText.slice(0, split.length) === split) {\n    restText = restText.slice(split.length);\n  }\n  var connectedStartText = \"\".concat(beforeMeasureText).concat(prefix).concat(targetText).concat(split);\n  return {\n    text: \"\".concat(connectedStartText).concat(restText),\n    selectionLocation: connectedStartText.length\n  };\n}\nexport function setInputSelection(input, location) {\n  input.setSelectionRange(location, location);\n\n  /**\n   * Reset caret into view.\n   * Since this function always called by user control, it's safe to focus element.\n   */\n  input.blur();\n  input.focus();\n}\nexport function validateSearch(text, split) {\n  return !split || text.indexOf(split) === -1;\n}\nexport function filterOption(input, _ref) {\n  var _ref$value = _ref.value,\n    value = _ref$value === void 0 ? '' : _ref$value;\n  var lowerCase = input.toLowerCase();\n  return value.toLowerCase().indexOf(lowerCase) !== -1;\n}"]},"metadata":{},"sourceType":"module"}