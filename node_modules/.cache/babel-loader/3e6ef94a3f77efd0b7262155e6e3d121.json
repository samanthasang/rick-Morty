{"ast":null,"code":"import classNames from 'classnames';\nimport { Popup } from 'rc-tooltip';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style';\nimport { parseColor } from './util'; // ant-tooltip css-dev-only-do-not-override-w2s56n ant-tooltip-placement-top  ant-tooltip-hidden\n\nexport default function PurePanel(props) {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    placement = 'top',\n    title,\n    color,\n    overlayInnerStyle\n  } = props;\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('tooltip', customizePrefixCls);\n  const [wrapSSR, hashId] = useStyle(prefixCls, true); // Color\n\n  const colorInfo = parseColor(prefixCls, color);\n  const formattedOverlayInnerStyle = Object.assign(Object.assign({}, overlayInnerStyle), colorInfo.overlayStyle);\n  const arrowContentStyle = colorInfo.arrowStyle;\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(hashId, prefixCls, `${prefixCls}-pure`, `${prefixCls}-placement-${placement}`, className, colorInfo.className),\n    style: arrowContentStyle\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `${prefixCls}-arrow`\n  }), /*#__PURE__*/React.createElement(Popup, Object.assign({}, props, {\n    className: hashId,\n    prefixCls: prefixCls,\n    overlayInnerStyle: formattedOverlayInnerStyle\n  }), title)));\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/tooltip/PurePanel.js"],"names":["classNames","Popup","React","ConfigContext","useStyle","parseColor","PurePanel","props","prefixCls","customizePrefixCls","className","placement","title","color","overlayInnerStyle","getPrefixCls","useContext","wrapSSR","hashId","colorInfo","formattedOverlayInnerStyle","Object","assign","overlayStyle","arrowContentStyle","arrowStyle","createElement","style"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,QAAP,MAAqB,SAArB;AACA,SAASC,UAAT,QAA2B,QAA3B,C,CACA;;AACA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACvC,QAAM;AACJC,IAAAA,SAAS,EAAEC,kBADP;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,SAAS,GAAG,KAHR;AAIJC,IAAAA,KAJI;AAKJC,IAAAA,KALI;AAMJC,IAAAA;AANI,MAOFP,KAPJ;AAQA,QAAM;AACJQ,IAAAA;AADI,MAEFb,KAAK,CAACc,UAAN,CAAiBb,aAAjB,CAFJ;AAGA,QAAMK,SAAS,GAAGO,YAAY,CAAC,SAAD,EAAYN,kBAAZ,CAA9B;AACA,QAAM,CAACQ,OAAD,EAAUC,MAAV,IAAoBd,QAAQ,CAACI,SAAD,EAAY,IAAZ,CAAlC,CAbuC,CAcvC;;AACA,QAAMW,SAAS,GAAGd,UAAU,CAACG,SAAD,EAAYK,KAAZ,CAA5B;AACA,QAAMO,0BAA0B,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,iBAAlB,CAAd,EAAoDK,SAAS,CAACI,YAA9D,CAAnC;AACA,QAAMC,iBAAiB,GAAGL,SAAS,CAACM,UAApC;AACA,SAAOR,OAAO,EAAE,aAAaf,KAAK,CAACwB,aAAN,CAAoB,KAApB,EAA2B;AACtDhB,IAAAA,SAAS,EAAEV,UAAU,CAACkB,MAAD,EAASV,SAAT,EAAqB,GAAEA,SAAU,OAAjC,EAA0C,GAAEA,SAAU,cAAaG,SAAU,EAA7E,EAAgFD,SAAhF,EAA2FS,SAAS,CAACT,SAArG,CADiC;AAEtDiB,IAAAA,KAAK,EAAEH;AAF+C,GAA3B,EAG1B,aAAatB,KAAK,CAACwB,aAAN,CAAoB,KAApB,EAA2B;AACzChB,IAAAA,SAAS,EAAG,GAAEF,SAAU;AADiB,GAA3B,CAHa,EAKzB,aAAaN,KAAK,CAACwB,aAAN,CAAoBzB,KAApB,EAA2BoB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,KAAlB,EAAyB;AACnEG,IAAAA,SAAS,EAAEQ,MADwD;AAEnEV,IAAAA,SAAS,EAAEA,SAFwD;AAGnEM,IAAAA,iBAAiB,EAAEM;AAHgD,GAAzB,CAA3B,EAIbR,KAJa,CALY,CAAf,CAAd;AAUD","sourcesContent":["import classNames from 'classnames';\nimport { Popup } from 'rc-tooltip';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style';\nimport { parseColor } from './util';\n// ant-tooltip css-dev-only-do-not-override-w2s56n ant-tooltip-placement-top  ant-tooltip-hidden\nexport default function PurePanel(props) {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    placement = 'top',\n    title,\n    color,\n    overlayInnerStyle\n  } = props;\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('tooltip', customizePrefixCls);\n  const [wrapSSR, hashId] = useStyle(prefixCls, true);\n  // Color\n  const colorInfo = parseColor(prefixCls, color);\n  const formattedOverlayInnerStyle = Object.assign(Object.assign({}, overlayInnerStyle), colorInfo.overlayStyle);\n  const arrowContentStyle = colorInfo.arrowStyle;\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(hashId, prefixCls, `${prefixCls}-pure`, `${prefixCls}-placement-${placement}`, className, colorInfo.className),\n    style: arrowContentStyle\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `${prefixCls}-arrow`\n  }), /*#__PURE__*/React.createElement(Popup, Object.assign({}, props, {\n    className: hashId,\n    prefixCls: prefixCls,\n    overlayInnerStyle: formattedOverlayInnerStyle\n  }), title)));\n}"]},"metadata":{},"sourceType":"module"}