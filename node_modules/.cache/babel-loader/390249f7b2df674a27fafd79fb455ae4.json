{"ast":null,"code":"import * as React from 'react';\nimport useForceUpdate from '../_util/hooks/useForceUpdate';\nimport { cloneElement } from '../_util/reactNode';\nimport Statistic from './Statistic';\nimport { formatCountdown } from './utils';\nvar REFRESH_INTERVAL = 1000 / 30;\n\nfunction getTime(value) {\n  return new Date(value).getTime();\n}\n\nvar Countdown = function Countdown(props) {\n  var value = props.value,\n      _props$format = props.format,\n      format = _props$format === void 0 ? 'HH:mm:ss' : _props$format,\n      onChange = props.onChange,\n      onFinish = props.onFinish;\n  var forceUpdate = useForceUpdate();\n  var countdown = React.useRef(null);\n\n  var stopTimer = function stopTimer() {\n    onFinish === null || onFinish === void 0 ? void 0 : onFinish();\n\n    if (countdown.current) {\n      clearInterval(countdown.current);\n      countdown.current = null;\n    }\n  };\n\n  var syncTimer = function syncTimer() {\n    var timestamp = getTime(value);\n\n    if (timestamp >= Date.now()) {\n      countdown.current = setInterval(function () {\n        forceUpdate();\n        onChange === null || onChange === void 0 ? void 0 : onChange(timestamp - Date.now());\n\n        if (timestamp < Date.now()) {\n          stopTimer();\n        }\n      }, REFRESH_INTERVAL);\n    }\n  };\n\n  React.useEffect(function () {\n    syncTimer();\n    return function () {\n      if (countdown.current) {\n        clearInterval(countdown.current);\n        countdown.current = null;\n      }\n    };\n  }, [value]);\n\n  var formatter = function formatter(formatValue, config) {\n    return formatCountdown(formatValue, Object.assign(Object.assign({}, config), {\n      format: format\n    }));\n  };\n\n  var valueRender = function valueRender(node) {\n    return cloneElement(node, {\n      title: undefined\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Statistic, Object.assign({}, props, {\n    valueRender: valueRender,\n    formatter: formatter\n  }));\n};\n\nexport default /*#__PURE__*/React.memo(Countdown);","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/statistic/Countdown.js"],"names":["React","useForceUpdate","cloneElement","Statistic","formatCountdown","REFRESH_INTERVAL","getTime","value","Date","Countdown","props","format","onChange","onFinish","forceUpdate","countdown","useRef","stopTimer","current","clearInterval","syncTimer","timestamp","now","setInterval","useEffect","formatter","formatValue","config","Object","assign","valueRender","node","title","undefined","createElement","memo"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport useForceUpdate from '../_util/hooks/useForceUpdate';\nimport { cloneElement } from '../_util/reactNode';\nimport Statistic from './Statistic';\nimport { formatCountdown } from './utils';\nconst REFRESH_INTERVAL = 1000 / 30;\nfunction getTime(value) {\n  return new Date(value).getTime();\n}\nconst Countdown = props => {\n  const {\n    value,\n    format = 'HH:mm:ss',\n    onChange,\n    onFinish\n  } = props;\n  const forceUpdate = useForceUpdate();\n  const countdown = React.useRef(null);\n  const stopTimer = () => {\n    onFinish === null || onFinish === void 0 ? void 0 : onFinish();\n    if (countdown.current) {\n      clearInterval(countdown.current);\n      countdown.current = null;\n    }\n  };\n  const syncTimer = () => {\n    const timestamp = getTime(value);\n    if (timestamp >= Date.now()) {\n      countdown.current = setInterval(() => {\n        forceUpdate();\n        onChange === null || onChange === void 0 ? void 0 : onChange(timestamp - Date.now());\n        if (timestamp < Date.now()) {\n          stopTimer();\n        }\n      }, REFRESH_INTERVAL);\n    }\n  };\n  React.useEffect(() => {\n    syncTimer();\n    return () => {\n      if (countdown.current) {\n        clearInterval(countdown.current);\n        countdown.current = null;\n      }\n    };\n  }, [value]);\n  const formatter = (formatValue, config) => formatCountdown(formatValue, Object.assign(Object.assign({}, config), {\n    format\n  }));\n  const valueRender = node => cloneElement(node, {\n    title: undefined\n  });\n  return /*#__PURE__*/React.createElement(Statistic, Object.assign({}, props, {\n    valueRender: valueRender,\n    formatter: formatter\n  }));\n};\nexport default /*#__PURE__*/React.memo(Countdown);"]},"metadata":{},"sourceType":"module"}