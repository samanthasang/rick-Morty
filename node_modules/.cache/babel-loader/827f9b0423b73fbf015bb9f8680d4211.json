{"ast":null,"code":"import _slicedToArray from \"/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Countdown\nvar timeUnits = [['Y', 1000 * 60 * 60 * 24 * 365], ['M', 1000 * 60 * 60 * 24 * 30], ['D', 1000 * 60 * 60 * 24], ['H', 1000 * 60 * 60], ['m', 1000 * 60], ['s', 1000], ['S', 1] // million seconds\n];\nexport function formatTimeStr(duration, format) {\n  var leftDuration = duration;\n  var escapeRegex = /\\[[^\\]]*]/g;\n  var keepList = (format.match(escapeRegex) || []).map(function (str) {\n    return str.slice(1, -1);\n  });\n  var templateText = format.replace(escapeRegex, '[]');\n  var replacedText = timeUnits.reduce(function (current, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        name = _ref2[0],\n        unit = _ref2[1];\n\n    if (current.includes(name)) {\n      var value = Math.floor(leftDuration / unit);\n      leftDuration -= value * unit;\n      return current.replace(new RegExp(\"\".concat(name, \"+\"), 'g'), function (match) {\n        var len = match.length;\n        return value.toString().padStart(len, '0');\n      });\n    }\n\n    return current;\n  }, templateText);\n  var index = 0;\n  return replacedText.replace(escapeRegex, function () {\n    var match = keepList[index];\n    index += 1;\n    return match;\n  });\n}\nexport function formatCountdown(value, config) {\n  var _config$format = config.format,\n      format = _config$format === void 0 ? '' : _config$format;\n  var target = new Date(value).getTime();\n  var current = Date.now();\n  var diff = Math.max(target - current, 0);\n  return formatTimeStr(diff, format);\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/antd/es/statistic/utils.js"],"names":["timeUnits","formatTimeStr","duration","format","leftDuration","escapeRegex","keepList","match","map","str","slice","templateText","replace","replacedText","reduce","current","_ref","name","unit","includes","value","Math","floor","RegExp","len","length","toString","padStart","index","formatCountdown","config","target","Date","getTime","now","diff","max"],"mappings":";AAAA;AACA,IAAMA,SAAS,GAAG,CAAC,CAAC,GAAD,EAAM,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,GAA5B,CAAD,EAAmC,CAAC,GAAD,EAAM,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,EAA5B,CAAnC,EAAoE,CAAC,GAAD,EAAM,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAvB,CAApE,EAAgG,CAAC,GAAD,EAAM,OAAO,EAAP,GAAY,EAAlB,CAAhG,EAAuH,CAAC,GAAD,EAAM,OAAO,EAAb,CAAvH,EAAyI,CAAC,GAAD,EAAM,IAAN,CAAzI,EAAsJ,CAAC,GAAD,EAAM,CAAN,CAAtJ,CAA+J;AAA/J,CAAlB;AAGA,OAAO,SAASC,aAAT,CAAuBC,QAAvB,EAAiCC,MAAjC,EAAyC;AAC9C,MAAIC,YAAY,GAAGF,QAAnB;AACA,MAAMG,WAAW,GAAG,YAApB;AACA,MAAMC,QAAQ,GAAG,CAACH,MAAM,CAACI,KAAP,CAAaF,WAAb,KAA6B,EAA9B,EAAkCG,GAAlC,CAAsC,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAJ;AAAA,GAAzC,CAAjB;AACA,MAAMC,YAAY,GAAGR,MAAM,CAACS,OAAP,CAAeP,WAAf,EAA4B,IAA5B,CAArB;AACA,MAAMQ,YAAY,GAAGb,SAAS,CAACc,MAAV,CAAiB,UAACC,OAAD,EAAUC,IAAV,EAAmB;AACvD,+BAAmBA,IAAnB;AAAA,QAAKC,IAAL;AAAA,QAAWC,IAAX;;AACA,QAAIH,OAAO,CAACI,QAAR,CAAiBF,IAAjB,CAAJ,EAA4B;AAC1B,UAAMG,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWlB,YAAY,GAAGc,IAA1B,CAAd;AACAd,MAAAA,YAAY,IAAIgB,KAAK,GAAGF,IAAxB;AACA,aAAOH,OAAO,CAACH,OAAR,CAAgB,IAAIW,MAAJ,WAAcN,IAAd,QAAuB,GAAvB,CAAhB,EAA6C,UAAAV,KAAK,EAAI;AAC3D,YAAMiB,GAAG,GAAGjB,KAAK,CAACkB,MAAlB;AACA,eAAOL,KAAK,CAACM,QAAN,GAAiBC,QAAjB,CAA0BH,GAA1B,EAA+B,GAA/B,CAAP;AACD,OAHM,CAAP;AAID;;AACD,WAAOT,OAAP;AACD,GAXoB,EAWlBJ,YAXkB,CAArB;AAYA,MAAIiB,KAAK,GAAG,CAAZ;AACA,SAAOf,YAAY,CAACD,OAAb,CAAqBP,WAArB,EAAkC,YAAM;AAC7C,QAAME,KAAK,GAAGD,QAAQ,CAACsB,KAAD,CAAtB;AACAA,IAAAA,KAAK,IAAI,CAAT;AACA,WAAOrB,KAAP;AACD,GAJM,CAAP;AAKD;AACD,OAAO,SAASsB,eAAT,CAAyBT,KAAzB,EAAgCU,MAAhC,EAAwC;AAC7C,uBAEIA,MAFJ,CACE3B,MADF;AAAA,MACEA,MADF,+BACW,EADX;AAGA,MAAM4B,MAAM,GAAG,IAAIC,IAAJ,CAASZ,KAAT,EAAgBa,OAAhB,EAAf;AACA,MAAMlB,OAAO,GAAGiB,IAAI,CAACE,GAAL,EAAhB;AACA,MAAMC,IAAI,GAAGd,IAAI,CAACe,GAAL,CAASL,MAAM,GAAGhB,OAAlB,EAA2B,CAA3B,CAAb;AACA,SAAOd,aAAa,CAACkC,IAAD,EAAOhC,MAAP,CAApB;AACD","sourcesContent":["// Countdown\nconst timeUnits = [['Y', 1000 * 60 * 60 * 24 * 365], ['M', 1000 * 60 * 60 * 24 * 30], ['D', 1000 * 60 * 60 * 24], ['H', 1000 * 60 * 60], ['m', 1000 * 60], ['s', 1000], ['S', 1] // million seconds\n];\n\nexport function formatTimeStr(duration, format) {\n  let leftDuration = duration;\n  const escapeRegex = /\\[[^\\]]*]/g;\n  const keepList = (format.match(escapeRegex) || []).map(str => str.slice(1, -1));\n  const templateText = format.replace(escapeRegex, '[]');\n  const replacedText = timeUnits.reduce((current, _ref) => {\n    let [name, unit] = _ref;\n    if (current.includes(name)) {\n      const value = Math.floor(leftDuration / unit);\n      leftDuration -= value * unit;\n      return current.replace(new RegExp(`${name}+`, 'g'), match => {\n        const len = match.length;\n        return value.toString().padStart(len, '0');\n      });\n    }\n    return current;\n  }, templateText);\n  let index = 0;\n  return replacedText.replace(escapeRegex, () => {\n    const match = keepList[index];\n    index += 1;\n    return match;\n  });\n}\nexport function formatCountdown(value, config) {\n  const {\n    format = ''\n  } = config;\n  const target = new Date(value).getTime();\n  const current = Date.now();\n  const diff = Math.max(target - current, 0);\n  return formatTimeStr(diff, format);\n}"]},"metadata":{},"sourceType":"module"}