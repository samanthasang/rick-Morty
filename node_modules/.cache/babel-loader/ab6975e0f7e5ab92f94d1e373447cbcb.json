{"ast":null,"code":"import React from 'react';\nexport function useCellRender(_ref) {\n  var cellRender = _ref.cellRender,\n      monthCellRender = _ref.monthCellRender,\n      dateRender = _ref.dateRender;\n  var mergedCellRender = React.useMemo(function () {\n    if (cellRender) return cellRender;\n    if (!monthCellRender && !dateRender) return undefined;\n    return function (current, info) {\n      var date = current;\n\n      if (dateRender && info.type === 'date') {\n        return dateRender(date, info.today);\n      }\n\n      if (monthCellRender && info.type === 'month') {\n        return monthCellRender(date, info.locale);\n      }\n\n      return info.originNode;\n    };\n  }, [cellRender, monthCellRender, dateRender]);\n  return mergedCellRender;\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/rc-picker/es/hooks/useCellRender.js"],"names":["React","useCellRender","_ref","cellRender","monthCellRender","dateRender","mergedCellRender","useMemo","undefined","current","info","date","type","today","locale","originNode"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,MAAIC,UAAU,GAAGD,IAAI,CAACC,UAAtB;AAAA,MACEC,eAAe,GAAGF,IAAI,CAACE,eADzB;AAAA,MAEEC,UAAU,GAAGH,IAAI,CAACG,UAFpB;AAGA,MAAIC,gBAAgB,GAAGN,KAAK,CAACO,OAAN,CAAc,YAAY;AAC/C,QAAIJ,UAAJ,EAAgB,OAAOA,UAAP;AAChB,QAAI,CAACC,eAAD,IAAoB,CAACC,UAAzB,EAAqC,OAAOG,SAAP;AACrC,WAAO,UAAUC,OAAV,EAAmBC,IAAnB,EAAyB;AAC9B,UAAIC,IAAI,GAAGF,OAAX;;AACA,UAAIJ,UAAU,IAAIK,IAAI,CAACE,IAAL,KAAc,MAAhC,EAAwC;AACtC,eAAOP,UAAU,CAACM,IAAD,EAAOD,IAAI,CAACG,KAAZ,CAAjB;AACD;;AACD,UAAIT,eAAe,IAAIM,IAAI,CAACE,IAAL,KAAc,OAArC,EAA8C;AAC5C,eAAOR,eAAe,CAACO,IAAD,EAAOD,IAAI,CAACI,MAAZ,CAAtB;AACD;;AACD,aAAOJ,IAAI,CAACK,UAAZ;AACD,KATD;AAUD,GAbsB,EAapB,CAACZ,UAAD,EAAaC,eAAb,EAA8BC,UAA9B,CAboB,CAAvB;AAcA,SAAOC,gBAAP;AACD","sourcesContent":["import React from 'react';\nexport function useCellRender(_ref) {\n  var cellRender = _ref.cellRender,\n    monthCellRender = _ref.monthCellRender,\n    dateRender = _ref.dateRender;\n  var mergedCellRender = React.useMemo(function () {\n    if (cellRender) return cellRender;\n    if (!monthCellRender && !dateRender) return undefined;\n    return function (current, info) {\n      var date = current;\n      if (dateRender && info.type === 'date') {\n        return dateRender(date, info.today);\n      }\n      if (monthCellRender && info.type === 'month') {\n        return monthCellRender(date, info.locale);\n      }\n      return info.originNode;\n    };\n  }, [cellRender, monthCellRender, dateRender]);\n  return mergedCellRender;\n}"]},"metadata":{},"sourceType":"module"}