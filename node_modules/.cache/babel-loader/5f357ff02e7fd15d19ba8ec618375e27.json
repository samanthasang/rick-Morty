{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport CSSMotion from 'rc-motion';\nimport { getMotion } from \"../utils/motionUtil\";\nimport MenuContextProvider, { MenuContext } from \"../context/MenuContext\";\nimport SubMenuList from \"./SubMenuList\";\nexport default function InlineSubMenuList(_ref) {\n  var id = _ref.id,\n      open = _ref.open,\n      keyPath = _ref.keyPath,\n      children = _ref.children;\n  var fixedMode = 'inline';\n\n  var _React$useContext = React.useContext(MenuContext),\n      prefixCls = _React$useContext.prefixCls,\n      forceSubMenuRender = _React$useContext.forceSubMenuRender,\n      motion = _React$useContext.motion,\n      defaultMotions = _React$useContext.defaultMotions,\n      mode = _React$useContext.mode; // Always use latest mode check\n\n\n  var sameModeRef = React.useRef(false);\n  sameModeRef.current = mode === fixedMode; // We record `destroy` mark here since when mode change from `inline` to others.\n  // The inline list should remove when motion end.\n\n  var _React$useState = React.useState(!sameModeRef.current),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      destroy = _React$useState2[0],\n      setDestroy = _React$useState2[1];\n\n  var mergedOpen = sameModeRef.current ? open : false; // ================================= Effect =================================\n  // Reset destroy state when mode change back\n\n  React.useEffect(function () {\n    if (sameModeRef.current) {\n      setDestroy(false);\n    }\n  }, [mode]); // ================================= Render =================================\n\n  var mergedMotion = _objectSpread({}, getMotion(fixedMode, motion, defaultMotions)); // No need appear since nest inlineCollapse changed\n\n\n  if (keyPath.length > 1) {\n    mergedMotion.motionAppear = false;\n  } // Hide inline list when mode changed and motion end\n\n\n  var originOnVisibleChanged = mergedMotion.onVisibleChanged;\n\n  mergedMotion.onVisibleChanged = function (newVisible) {\n    if (!sameModeRef.current && !newVisible) {\n      setDestroy(true);\n    }\n\n    return originOnVisibleChanged === null || originOnVisibleChanged === void 0 ? void 0 : originOnVisibleChanged(newVisible);\n  };\n\n  if (destroy) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(MenuContextProvider, {\n    mode: fixedMode,\n    locked: !sameModeRef.current\n  }, /*#__PURE__*/React.createElement(CSSMotion, _extends({\n    visible: mergedOpen\n  }, mergedMotion, {\n    forceRender: forceSubMenuRender,\n    removeOnLeave: false,\n    leavedClassName: \"\".concat(prefixCls, \"-hidden\")\n  }), function (_ref2) {\n    var motionClassName = _ref2.className,\n        motionStyle = _ref2.style;\n    return /*#__PURE__*/React.createElement(SubMenuList, {\n      id: id,\n      className: motionClassName,\n      style: motionStyle\n    }, children);\n  }));\n}","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/rc-menu/es/SubMenu/InlineSubMenuList.js"],"names":["_extends","_objectSpread","_slicedToArray","React","CSSMotion","getMotion","MenuContextProvider","MenuContext","SubMenuList","InlineSubMenuList","_ref","id","open","keyPath","children","fixedMode","_React$useContext","useContext","prefixCls","forceSubMenuRender","motion","defaultMotions","mode","sameModeRef","useRef","current","_React$useState","useState","_React$useState2","destroy","setDestroy","mergedOpen","useEffect","mergedMotion","length","motionAppear","originOnVisibleChanged","onVisibleChanged","newVisible","createElement","locked","visible","forceRender","removeOnLeave","leavedClassName","concat","_ref2","motionClassName","className","motionStyle","style"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport CSSMotion from 'rc-motion';\nimport { getMotion } from \"../utils/motionUtil\";\nimport MenuContextProvider, { MenuContext } from \"../context/MenuContext\";\nimport SubMenuList from \"./SubMenuList\";\nexport default function InlineSubMenuList(_ref) {\n  var id = _ref.id,\n    open = _ref.open,\n    keyPath = _ref.keyPath,\n    children = _ref.children;\n  var fixedMode = 'inline';\n  var _React$useContext = React.useContext(MenuContext),\n    prefixCls = _React$useContext.prefixCls,\n    forceSubMenuRender = _React$useContext.forceSubMenuRender,\n    motion = _React$useContext.motion,\n    defaultMotions = _React$useContext.defaultMotions,\n    mode = _React$useContext.mode;\n\n  // Always use latest mode check\n  var sameModeRef = React.useRef(false);\n  sameModeRef.current = mode === fixedMode;\n\n  // We record `destroy` mark here since when mode change from `inline` to others.\n  // The inline list should remove when motion end.\n  var _React$useState = React.useState(!sameModeRef.current),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    destroy = _React$useState2[0],\n    setDestroy = _React$useState2[1];\n  var mergedOpen = sameModeRef.current ? open : false;\n\n  // ================================= Effect =================================\n  // Reset destroy state when mode change back\n  React.useEffect(function () {\n    if (sameModeRef.current) {\n      setDestroy(false);\n    }\n  }, [mode]);\n\n  // ================================= Render =================================\n  var mergedMotion = _objectSpread({}, getMotion(fixedMode, motion, defaultMotions));\n\n  // No need appear since nest inlineCollapse changed\n  if (keyPath.length > 1) {\n    mergedMotion.motionAppear = false;\n  }\n\n  // Hide inline list when mode changed and motion end\n  var originOnVisibleChanged = mergedMotion.onVisibleChanged;\n  mergedMotion.onVisibleChanged = function (newVisible) {\n    if (!sameModeRef.current && !newVisible) {\n      setDestroy(true);\n    }\n    return originOnVisibleChanged === null || originOnVisibleChanged === void 0 ? void 0 : originOnVisibleChanged(newVisible);\n  };\n  if (destroy) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(MenuContextProvider, {\n    mode: fixedMode,\n    locked: !sameModeRef.current\n  }, /*#__PURE__*/React.createElement(CSSMotion, _extends({\n    visible: mergedOpen\n  }, mergedMotion, {\n    forceRender: forceSubMenuRender,\n    removeOnLeave: false,\n    leavedClassName: \"\".concat(prefixCls, \"-hidden\")\n  }), function (_ref2) {\n    var motionClassName = _ref2.className,\n      motionStyle = _ref2.style;\n    return /*#__PURE__*/React.createElement(SubMenuList, {\n      id: id,\n      className: motionClassName,\n      style: motionStyle\n    }, children);\n  }));\n}"]},"metadata":{},"sourceType":"module"}