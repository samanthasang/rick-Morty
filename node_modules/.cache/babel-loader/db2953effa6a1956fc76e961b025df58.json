{"ast":null,"code":"import { responseImmutable, useContext } from '@rc-component/context';\nimport * as React from 'react';\nimport PerfContext from \"../context/PerfContext\";\nimport TableContext from \"../context/TableContext\";\nimport useFlattenRecords from \"../hooks/useFlattenRecords\";\nimport devRenderTimes from \"../hooks/useRenderTimes\";\nimport { getColumnsKey } from \"../utils/valueUtil\";\nimport BodyRow from \"./BodyRow\";\nimport ExpandedRow from \"./ExpandedRow\";\nimport MeasureRow from \"./MeasureRow\";\n\nfunction Body(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    devRenderTimes(props);\n  }\n\n  var data = props.data,\n      getRowKey = props.getRowKey,\n      measureColumnWidth = props.measureColumnWidth,\n      expandedKeys = props.expandedKeys,\n      onRow = props.onRow,\n      rowExpandable = props.rowExpandable,\n      emptyNode = props.emptyNode,\n      childrenColumnName = props.childrenColumnName;\n\n  var _useContext = useContext(TableContext, ['prefixCls', 'getComponent', 'onColumnResize', 'flattenColumns']),\n      prefixCls = _useContext.prefixCls,\n      getComponent = _useContext.getComponent,\n      onColumnResize = _useContext.onColumnResize,\n      flattenColumns = _useContext.flattenColumns;\n\n  var flattenData = useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey); // =================== Performance ====================\n\n  var perfRef = React.useRef({\n    renderWithProps: false\n  }); // ====================== Render ======================\n\n  var WrapperComponent = getComponent(['body', 'wrapper'], 'tbody');\n  var trComponent = getComponent(['body', 'row'], 'tr');\n  var tdComponent = getComponent(['body', 'cell'], 'td');\n  var thComponent = getComponent(['body', 'cell'], 'th');\n  var rows;\n\n  if (data.length) {\n    rows = flattenData.map(function (item, idx) {\n      var record = item.record,\n          indent = item.indent,\n          renderIndex = item.index;\n      var key = getRowKey(record, idx);\n      return /*#__PURE__*/React.createElement(BodyRow, {\n        key: key,\n        rowKey: key,\n        record: record,\n        index: idx,\n        renderIndex: renderIndex,\n        rowComponent: trComponent,\n        cellComponent: tdComponent,\n        scopeCellComponent: thComponent,\n        expandedKeys: expandedKeys,\n        onRow: onRow,\n        getRowKey: getRowKey,\n        rowExpandable: rowExpandable,\n        childrenColumnName: childrenColumnName,\n        indent: indent\n      });\n    });\n  } else {\n    rows = /*#__PURE__*/React.createElement(ExpandedRow, {\n      expanded: true,\n      className: \"\".concat(prefixCls, \"-placeholder\"),\n      prefixCls: prefixCls,\n      component: trComponent,\n      cellComponent: tdComponent,\n      colSpan: flattenColumns.length,\n      isEmpty: true\n    }, emptyNode);\n  }\n\n  var columnsKey = getColumnsKey(flattenColumns);\n  return /*#__PURE__*/React.createElement(PerfContext.Provider, {\n    value: perfRef.current\n  }, /*#__PURE__*/React.createElement(WrapperComponent, {\n    className: \"\".concat(prefixCls, \"-tbody\")\n  }, measureColumnWidth && /*#__PURE__*/React.createElement(MeasureRow, {\n    prefixCls: prefixCls,\n    columnsKey: columnsKey,\n    onColumnResize: onColumnResize\n  }), rows));\n}\n\nBody.displayName = 'Body';\nexport default responseImmutable(Body);","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/rc-table/es/Body/index.js"],"names":["responseImmutable","useContext","React","PerfContext","TableContext","useFlattenRecords","devRenderTimes","getColumnsKey","BodyRow","ExpandedRow","MeasureRow","Body","props","process","env","NODE_ENV","data","getRowKey","measureColumnWidth","expandedKeys","onRow","rowExpandable","emptyNode","childrenColumnName","_useContext","prefixCls","getComponent","onColumnResize","flattenColumns","flattenData","perfRef","useRef","renderWithProps","WrapperComponent","trComponent","tdComponent","thComponent","rows","length","map","item","idx","record","indent","renderIndex","index","key","createElement","rowKey","rowComponent","cellComponent","scopeCellComponent","expanded","className","concat","component","colSpan","isEmpty","columnsKey","Provider","value","current","displayName"],"mappings":"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","sourcesContent":["import { responseImmutable, useContext } from '@rc-component/context';\nimport * as React from 'react';\nimport PerfContext from \"../context/PerfContext\";\nimport TableContext from \"../context/TableContext\";\nimport useFlattenRecords from \"../hooks/useFlattenRecords\";\nimport devRenderTimes from \"../hooks/useRenderTimes\";\nimport { getColumnsKey } from \"../utils/valueUtil\";\nimport BodyRow from \"./BodyRow\";\nimport ExpandedRow from \"./ExpandedRow\";\nimport MeasureRow from \"./MeasureRow\";\nfunction Body(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    devRenderTimes(props);\n  }\n  var data = props.data,\n    getRowKey = props.getRowKey,\n    measureColumnWidth = props.measureColumnWidth,\n    expandedKeys = props.expandedKeys,\n    onRow = props.onRow,\n    rowExpandable = props.rowExpandable,\n    emptyNode = props.emptyNode,\n    childrenColumnName = props.childrenColumnName;\n  var _useContext = useContext(TableContext, ['prefixCls', 'getComponent', 'onColumnResize', 'flattenColumns']),\n    prefixCls = _useContext.prefixCls,\n    getComponent = _useContext.getComponent,\n    onColumnResize = _useContext.onColumnResize,\n    flattenColumns = _useContext.flattenColumns;\n  var flattenData = useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey);\n\n  // =================== Performance ====================\n  var perfRef = React.useRef({\n    renderWithProps: false\n  });\n\n  // ====================== Render ======================\n  var WrapperComponent = getComponent(['body', 'wrapper'], 'tbody');\n  var trComponent = getComponent(['body', 'row'], 'tr');\n  var tdComponent = getComponent(['body', 'cell'], 'td');\n  var thComponent = getComponent(['body', 'cell'], 'th');\n  var rows;\n  if (data.length) {\n    rows = flattenData.map(function (item, idx) {\n      var record = item.record,\n        indent = item.indent,\n        renderIndex = item.index;\n      var key = getRowKey(record, idx);\n      return /*#__PURE__*/React.createElement(BodyRow, {\n        key: key,\n        rowKey: key,\n        record: record,\n        index: idx,\n        renderIndex: renderIndex,\n        rowComponent: trComponent,\n        cellComponent: tdComponent,\n        scopeCellComponent: thComponent,\n        expandedKeys: expandedKeys,\n        onRow: onRow,\n        getRowKey: getRowKey,\n        rowExpandable: rowExpandable,\n        childrenColumnName: childrenColumnName,\n        indent: indent\n      });\n    });\n  } else {\n    rows = /*#__PURE__*/React.createElement(ExpandedRow, {\n      expanded: true,\n      className: \"\".concat(prefixCls, \"-placeholder\"),\n      prefixCls: prefixCls,\n      component: trComponent,\n      cellComponent: tdComponent,\n      colSpan: flattenColumns.length,\n      isEmpty: true\n    }, emptyNode);\n  }\n  var columnsKey = getColumnsKey(flattenColumns);\n  return /*#__PURE__*/React.createElement(PerfContext.Provider, {\n    value: perfRef.current\n  }, /*#__PURE__*/React.createElement(WrapperComponent, {\n    className: \"\".concat(prefixCls, \"-tbody\")\n  }, measureColumnWidth && /*#__PURE__*/React.createElement(MeasureRow, {\n    prefixCls: prefixCls,\n    columnsKey: columnsKey,\n    onColumnResize: onColumnResize\n  }), rows));\n}\nBody.displayName = 'Body';\nexport default responseImmutable(Body);"]},"metadata":{},"sourceType":"module"}