{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction splitValues(value) {\n  if (typeof value === 'number') {\n    return [[value], false];\n  }\n\n  var rawStyle = String(value).trim();\n  var importantCells = rawStyle.match(/(.*)(!important)/);\n  var splitStyle = (importantCells ? importantCells[1] : rawStyle).trim().split(/\\s+/); // Combine styles split in brackets, like `calc(1px + 2px)`\n\n  var temp = '';\n  var brackets = 0;\n  return [splitStyle.reduce(function (list, item) {\n    if (item.includes('(')) {\n      temp += item;\n      brackets += item.split('(').length - 1;\n    } else if (item.includes(')')) {\n      temp += item;\n      brackets -= item.split(')').length - 1;\n\n      if (brackets === 0) {\n        list.push(temp);\n        temp = '';\n      }\n    } else if (brackets > 0) {\n      temp += item;\n    } else {\n      list.push(item);\n    }\n\n    return list;\n  }, []), !!importantCells];\n}\n\nfunction noSplit(list) {\n  list.notSplit = true;\n  return list;\n}\n\nvar keyMap = {\n  // Inset\n  inset: ['top', 'right', 'bottom', 'left'],\n  insetBlock: ['top', 'bottom'],\n  insetBlockStart: ['top'],\n  insetBlockEnd: ['bottom'],\n  insetInline: ['left', 'right'],\n  insetInlineStart: ['left'],\n  insetInlineEnd: ['right'],\n  // Margin\n  marginBlock: ['marginTop', 'marginBottom'],\n  marginBlockStart: ['marginTop'],\n  marginBlockEnd: ['marginBottom'],\n  marginInline: ['marginLeft', 'marginRight'],\n  marginInlineStart: ['marginLeft'],\n  marginInlineEnd: ['marginRight'],\n  // Padding\n  paddingBlock: ['paddingTop', 'paddingBottom'],\n  paddingBlockStart: ['paddingTop'],\n  paddingBlockEnd: ['paddingBottom'],\n  paddingInline: ['paddingLeft', 'paddingRight'],\n  paddingInlineStart: ['paddingLeft'],\n  paddingInlineEnd: ['paddingRight'],\n  // Border\n  borderBlock: noSplit(['borderTop', 'borderBottom']),\n  borderBlockStart: noSplit(['borderTop']),\n  borderBlockEnd: noSplit(['borderBottom']),\n  borderInline: noSplit(['borderLeft', 'borderRight']),\n  borderInlineStart: noSplit(['borderLeft']),\n  borderInlineEnd: noSplit(['borderRight']),\n  // Border width\n  borderBlockWidth: ['borderTopWidth', 'borderBottomWidth'],\n  borderBlockStartWidth: ['borderTopWidth'],\n  borderBlockEndWidth: ['borderBottomWidth'],\n  borderInlineWidth: ['borderLeftWidth', 'borderRightWidth'],\n  borderInlineStartWidth: ['borderLeftWidth'],\n  borderInlineEndWidth: ['borderRightWidth'],\n  // Border style\n  borderBlockStyle: ['borderTopStyle', 'borderBottomStyle'],\n  borderBlockStartStyle: ['borderTopStyle'],\n  borderBlockEndStyle: ['borderBottomStyle'],\n  borderInlineStyle: ['borderLeftStyle', 'borderRightStyle'],\n  borderInlineStartStyle: ['borderLeftStyle'],\n  borderInlineEndStyle: ['borderRightStyle'],\n  // Border color\n  borderBlockColor: ['borderTopColor', 'borderBottomColor'],\n  borderBlockStartColor: ['borderTopColor'],\n  borderBlockEndColor: ['borderBottomColor'],\n  borderInlineColor: ['borderLeftColor', 'borderRightColor'],\n  borderInlineStartColor: ['borderLeftColor'],\n  borderInlineEndColor: ['borderRightColor'],\n  // Border radius\n  borderStartStartRadius: ['borderTopLeftRadius'],\n  borderStartEndRadius: ['borderTopRightRadius'],\n  borderEndStartRadius: ['borderBottomLeftRadius'],\n  borderEndEndRadius: ['borderBottomRightRadius']\n};\n\nfunction wrapImportantAndSkipCheck(value, important) {\n  var parsedValue = value;\n\n  if (important) {\n    parsedValue = \"\".concat(parsedValue, \" !important\");\n  }\n\n  return {\n    _skip_check_: true,\n    value: parsedValue\n  };\n}\n/**\n * Convert css logical properties to legacy properties.\n * Such as: `margin-block-start` to `margin-top`.\n * Transform list:\n * - inset\n * - margin\n * - padding\n * - border\n */\n\n\nvar transform = {\n  visit: function visit(cssObj) {\n    var clone = {};\n    Object.keys(cssObj).forEach(function (key) {\n      var value = cssObj[key];\n      var matchValue = keyMap[key];\n\n      if (matchValue && (typeof value === 'number' || typeof value === 'string')) {\n        var _splitValues = splitValues(value),\n            _splitValues2 = _slicedToArray(_splitValues, 2),\n            _values = _splitValues2[0],\n            _important = _splitValues2[1];\n\n        if (matchValue.length && matchValue.notSplit) {\n          // not split means always give same value like border\n          matchValue.forEach(function (matchKey) {\n            clone[matchKey] = wrapImportantAndSkipCheck(value, _important);\n          });\n        } else if (matchValue.length === 1) {\n          // Handle like `marginBlockStart` => `marginTop`\n          clone[matchValue[0]] = wrapImportantAndSkipCheck(value, _important);\n        } else if (matchValue.length === 2) {\n          // Handle like `marginBlock` => `marginTop` & `marginBottom`\n          matchValue.forEach(function (matchKey, index) {\n            var _values$index;\n\n            clone[matchKey] = wrapImportantAndSkipCheck((_values$index = _values[index]) !== null && _values$index !== void 0 ? _values$index : _values[0], _important);\n          });\n        } else if (matchValue.length === 4) {\n          // Handle like `inset` => `top` & `right` & `bottom` & `left`\n          matchValue.forEach(function (matchKey, index) {\n            var _ref, _values$index2;\n\n            clone[matchKey] = wrapImportantAndSkipCheck((_ref = (_values$index2 = _values[index]) !== null && _values$index2 !== void 0 ? _values$index2 : _values[index - 2]) !== null && _ref !== void 0 ? _ref : _values[0], _important);\n          });\n        } else {\n          clone[key] = value;\n        }\n      } else {\n        clone[key] = value;\n      }\n    });\n    return clone;\n  }\n};\nexport default transform;","map":{"version":3,"sources":["/Users/luna/Desktop/Project/Git Project/rick-Morty/node_modules/@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js"],"names":["_slicedToArray","splitValues","value","rawStyle","String","trim","importantCells","match","splitStyle","split","temp","brackets","reduce","list","item","includes","length","push","noSplit","notSplit","keyMap","inset","insetBlock","insetBlockStart","insetBlockEnd","insetInline","insetInlineStart","insetInlineEnd","marginBlock","marginBlockStart","marginBlockEnd","marginInline","marginInlineStart","marginInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd","paddingInline","paddingInlineStart","paddingInlineEnd","borderBlock","borderBlockStart","borderBlockEnd","borderInline","borderInlineStart","borderInlineEnd","borderBlockWidth","borderBlockStartWidth","borderBlockEndWidth","borderInlineWidth","borderInlineStartWidth","borderInlineEndWidth","borderBlockStyle","borderBlockStartStyle","borderBlockEndStyle","borderInlineStyle","borderInlineStartStyle","borderInlineEndStyle","borderBlockColor","borderBlockStartColor","borderBlockEndColor","borderInlineColor","borderInlineStartColor","borderInlineEndColor","borderStartStartRadius","borderStartEndRadius","borderEndStartRadius","borderEndEndRadius","wrapImportantAndSkipCheck","important","parsedValue","concat","_skip_check_","transform","visit","cssObj","clone","Object","keys","forEach","key","matchValue","_splitValues","_splitValues2","_values","_important","matchKey","index","_values$index","_ref","_values$index2"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nfunction splitValues(value) {\n  if (typeof value === 'number') {\n    return [[value], false];\n  }\n  var rawStyle = String(value).trim();\n  var importantCells = rawStyle.match(/(.*)(!important)/);\n  var splitStyle = (importantCells ? importantCells[1] : rawStyle).trim().split(/\\s+/);\n\n  // Combine styles split in brackets, like `calc(1px + 2px)`\n  var temp = '';\n  var brackets = 0;\n  return [splitStyle.reduce(function (list, item) {\n    if (item.includes('(')) {\n      temp += item;\n      brackets += item.split('(').length - 1;\n    } else if (item.includes(')')) {\n      temp += item;\n      brackets -= item.split(')').length - 1;\n      if (brackets === 0) {\n        list.push(temp);\n        temp = '';\n      }\n    } else if (brackets > 0) {\n      temp += item;\n    } else {\n      list.push(item);\n    }\n    return list;\n  }, []), !!importantCells];\n}\nfunction noSplit(list) {\n  list.notSplit = true;\n  return list;\n}\nvar keyMap = {\n  // Inset\n  inset: ['top', 'right', 'bottom', 'left'],\n  insetBlock: ['top', 'bottom'],\n  insetBlockStart: ['top'],\n  insetBlockEnd: ['bottom'],\n  insetInline: ['left', 'right'],\n  insetInlineStart: ['left'],\n  insetInlineEnd: ['right'],\n  // Margin\n  marginBlock: ['marginTop', 'marginBottom'],\n  marginBlockStart: ['marginTop'],\n  marginBlockEnd: ['marginBottom'],\n  marginInline: ['marginLeft', 'marginRight'],\n  marginInlineStart: ['marginLeft'],\n  marginInlineEnd: ['marginRight'],\n  // Padding\n  paddingBlock: ['paddingTop', 'paddingBottom'],\n  paddingBlockStart: ['paddingTop'],\n  paddingBlockEnd: ['paddingBottom'],\n  paddingInline: ['paddingLeft', 'paddingRight'],\n  paddingInlineStart: ['paddingLeft'],\n  paddingInlineEnd: ['paddingRight'],\n  // Border\n  borderBlock: noSplit(['borderTop', 'borderBottom']),\n  borderBlockStart: noSplit(['borderTop']),\n  borderBlockEnd: noSplit(['borderBottom']),\n  borderInline: noSplit(['borderLeft', 'borderRight']),\n  borderInlineStart: noSplit(['borderLeft']),\n  borderInlineEnd: noSplit(['borderRight']),\n  // Border width\n  borderBlockWidth: ['borderTopWidth', 'borderBottomWidth'],\n  borderBlockStartWidth: ['borderTopWidth'],\n  borderBlockEndWidth: ['borderBottomWidth'],\n  borderInlineWidth: ['borderLeftWidth', 'borderRightWidth'],\n  borderInlineStartWidth: ['borderLeftWidth'],\n  borderInlineEndWidth: ['borderRightWidth'],\n  // Border style\n  borderBlockStyle: ['borderTopStyle', 'borderBottomStyle'],\n  borderBlockStartStyle: ['borderTopStyle'],\n  borderBlockEndStyle: ['borderBottomStyle'],\n  borderInlineStyle: ['borderLeftStyle', 'borderRightStyle'],\n  borderInlineStartStyle: ['borderLeftStyle'],\n  borderInlineEndStyle: ['borderRightStyle'],\n  // Border color\n  borderBlockColor: ['borderTopColor', 'borderBottomColor'],\n  borderBlockStartColor: ['borderTopColor'],\n  borderBlockEndColor: ['borderBottomColor'],\n  borderInlineColor: ['borderLeftColor', 'borderRightColor'],\n  borderInlineStartColor: ['borderLeftColor'],\n  borderInlineEndColor: ['borderRightColor'],\n  // Border radius\n  borderStartStartRadius: ['borderTopLeftRadius'],\n  borderStartEndRadius: ['borderTopRightRadius'],\n  borderEndStartRadius: ['borderBottomLeftRadius'],\n  borderEndEndRadius: ['borderBottomRightRadius']\n};\nfunction wrapImportantAndSkipCheck(value, important) {\n  var parsedValue = value;\n  if (important) {\n    parsedValue = \"\".concat(parsedValue, \" !important\");\n  }\n  return {\n    _skip_check_: true,\n    value: parsedValue\n  };\n}\n\n/**\n * Convert css logical properties to legacy properties.\n * Such as: `margin-block-start` to `margin-top`.\n * Transform list:\n * - inset\n * - margin\n * - padding\n * - border\n */\nvar transform = {\n  visit: function visit(cssObj) {\n    var clone = {};\n    Object.keys(cssObj).forEach(function (key) {\n      var value = cssObj[key];\n      var matchValue = keyMap[key];\n      if (matchValue && (typeof value === 'number' || typeof value === 'string')) {\n        var _splitValues = splitValues(value),\n          _splitValues2 = _slicedToArray(_splitValues, 2),\n          _values = _splitValues2[0],\n          _important = _splitValues2[1];\n        if (matchValue.length && matchValue.notSplit) {\n          // not split means always give same value like border\n          matchValue.forEach(function (matchKey) {\n            clone[matchKey] = wrapImportantAndSkipCheck(value, _important);\n          });\n        } else if (matchValue.length === 1) {\n          // Handle like `marginBlockStart` => `marginTop`\n          clone[matchValue[0]] = wrapImportantAndSkipCheck(value, _important);\n        } else if (matchValue.length === 2) {\n          // Handle like `marginBlock` => `marginTop` & `marginBottom`\n          matchValue.forEach(function (matchKey, index) {\n            var _values$index;\n            clone[matchKey] = wrapImportantAndSkipCheck((_values$index = _values[index]) !== null && _values$index !== void 0 ? _values$index : _values[0], _important);\n          });\n        } else if (matchValue.length === 4) {\n          // Handle like `inset` => `top` & `right` & `bottom` & `left`\n          matchValue.forEach(function (matchKey, index) {\n            var _ref, _values$index2;\n            clone[matchKey] = wrapImportantAndSkipCheck((_ref = (_values$index2 = _values[index]) !== null && _values$index2 !== void 0 ? _values$index2 : _values[index - 2]) !== null && _ref !== void 0 ? _ref : _values[0], _important);\n          });\n        } else {\n          clone[key] = value;\n        }\n      } else {\n        clone[key] = value;\n      }\n    });\n    return clone;\n  }\n};\nexport default transform;"]},"metadata":{},"sourceType":"module"}